-- MySQL dump 10.13  Distrib 5.7.22, for Linux (x86_64)
--
-- Host: localhost    Database: development
-- ------------------------------------------------------
-- Server version 5.7.22

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Current Database: `development`
--

CREATE DATABASE /*!32312 IF NOT EXISTS*/ `development` /*!40100 DEFAULT CHARACTER SET latin1 */;

USE `development`;

--
-- Table structure for table `account_logs`
--

DROP TABLE IF EXISTS `account_logs`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `account_logs` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `row1` int(11) DEFAULT NULL,
  `row2` int(11) DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  `note` text,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`),
  KEY `index_account_log_associations_on_user_id` (`user_id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `account_logs`
--

LOCK TABLES `account_logs` WRITE;
/*!40000 ALTER TABLE `account_logs` DISABLE KEYS */;
/*!40000 ALTER TABLE `account_logs` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `accounts`
--

DROP TABLE IF EXISTS `accounts`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `accounts` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `transaction_type` varchar(255) DEFAULT NULL,
  `amount` float DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  `budget_id` int(11) DEFAULT NULL,
  `category` varchar(255) DEFAULT NULL,
  `job_id` int(11) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  `description` text,
  `labor_rate` float DEFAULT NULL,
  `markup_rate` float DEFAULT NULL,
  `operation_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `index_accounts_on_user_id` (`user_id`),
  KEY `index_accounts_on_budget_id` (`budget_id`),
  KEY `index_accounts_on_job_id` (`job_id`)
) ENGINE=InnoDB AUTO_INCREMENT=76627 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `accounts`
--

LOCK TABLES `accounts` WRITE;
/*!40000 ALTER TABLE `accounts` DISABLE KEYS */;
INSERT INTO `accounts` VALUES (76549,'debit',0,1,39,'materials',42573,'2017-10-02 17:51:12','2017-10-02 17:51:12','Materials',0,0,2955),(76550,'debit',0,1,39,'labor',42573,'2017-10-02 17:51:12','2017-10-02 17:51:12','Labor: 1.8 minutes @ $0.0/min',0,0,2955),(76551,'debit',0,1,39,'materials',42573,'2017-10-02 17:51:12','2017-10-02 17:51:12','Materials',0,0,2957),(76552,'debit',0,1,39,'labor',42573,'2017-10-02 17:51:12','2017-10-02 17:51:12','Labor: 1.8 minutes @ $0.0/min',0,0,2957),(76553,'debit',0.12,1,39,'materials',42575,'2017-10-02 17:51:16','2017-10-02 17:51:16','Materials',0,0,2954),(76554,'debit',0,1,39,'labor',42575,'2017-10-02 17:51:16','2017-10-02 17:51:16','Labor: 3.16 minutes @ $0.0/min',0,0,2954),(76555,'debit',0.12,1,39,'materials',42575,'2017-10-02 17:51:16','2017-10-02 17:51:16','Materials',0,0,2956),(76556,'debit',0,1,39,'labor',42575,'2017-10-02 17:51:16','2017-10-02 17:51:16','Labor: 3.16 minutes @ $0.0/min',0,0,2956),(76557,'debit',1.04,1,39,'materials',42599,'2017-10-02 18:17:49','2017-10-02 18:17:49','Materials',0,0,2958),(76558,'debit',0,1,39,'labor',42599,'2017-10-02 18:17:49','2017-10-02 18:17:49','Labor: 6.45 minutes @ $0.0/min',0,0,2958),(76559,'debit',1.04,1,39,'materials',42601,'2017-10-02 18:18:31','2017-10-02 18:18:31','Materials',0,0,2953),(76560,'debit',0,1,39,'labor',42601,'2017-10-02 18:18:31','2017-10-02 18:18:31','Labor: 6.45 minutes @ $0.0/min',0,0,2953),(76561,'debit',0,1,39,'materials',42605,'2017-10-27 04:49:52','2017-10-27 04:49:52','Materials',0,0,2959),(76562,'debit',0,1,39,'labor',42605,'2017-10-27 04:49:52','2017-10-27 04:49:52','Labor: 0 minutes @ $0.0/min',0,0,2959),(76563,'debit',0,1,39,'materials',42609,'2017-10-27 05:07:54','2017-10-27 05:07:54','Materials',0,0,2995),(76564,'debit',0,1,39,'labor',42609,'2017-10-27 05:07:54','2017-10-27 05:07:54','Labor: 1.8 minutes @ $0.0/min',0,0,2995),(76565,'debit',1.04,1,39,'materials',42611,'2017-10-27 05:09:36','2017-10-27 05:09:36','Materials',0,0,2981),(76566,'debit',0,1,39,'labor',42611,'2017-10-27 05:09:36','2017-10-27 05:09:36','Labor: 6.45 minutes @ $0.0/min',0,0,2981),(76567,'debit',0.12,1,39,'materials',42613,'2017-10-27 05:09:37','2017-10-27 05:09:37','Materials',0,0,2994),(76568,'debit',0,1,39,'labor',42613,'2017-10-27 05:09:37','2017-10-27 05:09:37','Labor: 3.16 minutes @ $0.0/min',0,0,2994),(76569,'debit',0.8,1,39,'materials',42615,'2017-10-27 05:09:45','2017-10-27 05:09:45','Materials',0,0,2982),(76570,'debit',0,1,39,'labor',42615,'2017-10-27 05:09:45','2017-10-27 05:09:45','Labor: 0.84 minutes @ $0.0/min',0,0,2982),(76573,'debit',1.04,1,39,'materials',42639,'2017-10-27 05:35:12','2017-10-27 05:35:12','Materials',0,0,3006),(76574,'debit',0,1,39,'labor',42639,'2017-10-27 05:35:12','2017-10-27 05:35:12','Labor: 6.45 minutes @ $0.0/min',0,0,3006),(76575,'debit',0,1,39,'materials',42641,'2017-10-27 05:35:12','2017-10-27 05:35:12','Materials',0,0,3020),(76576,'debit',0,1,39,'labor',42641,'2017-10-27 05:35:12','2017-10-27 05:35:12','Labor: 1.8 minutes @ $0.0/min',0,0,3020),(76577,'debit',0.8,1,39,'materials',42643,'2017-10-27 05:35:24','2017-10-27 05:35:24','Materials',0,0,3007),(76578,'debit',0,1,39,'labor',42643,'2017-10-27 05:35:24','2017-10-27 05:35:24','Labor: 0.84 minutes @ $0.0/min',0,0,3007),(76579,'debit',0.12,1,39,'materials',42645,'2017-10-27 05:35:25','2017-10-27 05:35:25','Materials',0,0,3019),(76580,'debit',0,1,39,'labor',42645,'2017-10-27 05:35:25','2017-10-27 05:35:25','Labor: 3.16 minutes @ $0.0/min',0,0,3019),(76581,'debit',0.26,1,39,'materials',42647,'2017-10-27 05:35:29','2017-10-27 05:35:29','Materials',0,0,3005),(76582,'debit',0,1,39,'labor',42647,'2017-10-27 05:35:29','2017-10-27 05:35:29','Labor: 2.03 minutes @ $0.0/min',0,0,3005),(76583,'debit',0.19,1,39,'materials',42649,'2017-10-27 05:35:33','2017-10-27 05:35:33','Materials',0,0,3004),(76584,'debit',0,1,39,'labor',42649,'2017-10-27 05:35:34','2017-10-27 05:35:34','Labor: 3.02 minutes @ $0.0/min',0,0,3004),(76585,'debit',1.79,1,39,'materials',42651,'2017-10-27 05:35:38','2017-10-27 05:35:38','Materials',0,0,3003),(76586,'debit',0,1,39,'labor',42651,'2017-10-27 05:35:38','2017-10-27 05:35:38','Labor: 7.43 minutes @ $0.0/min',0,0,3003),(76587,'debit',0,1,39,'materials',42657,'2017-10-27 05:40:42','2017-10-27 05:40:42','Materials',0,0,3021),(76588,'debit',0,1,39,'labor',42657,'2017-10-27 05:40:42','2017-10-27 05:40:42','Labor: 0 minutes @ $0.0/min',0,0,3021),(76589,'debit',3.78,1,39,'materials',42659,'2017-10-27 05:41:04','2017-10-27 05:41:04','Materials',0,0,3013),(76590,'debit',0,1,39,'labor',42659,'2017-10-27 05:41:04','2017-10-27 05:41:04','Labor: 6.16 minutes @ $0.0/min',0,0,3013),(76593,'debit',3.37,1,39,'materials',42667,'2017-10-27 05:45:44','2017-10-27 05:45:44','Materials',0,0,3012),(76594,'debit',0,1,39,'labor',42667,'2017-10-27 05:45:44','2017-10-27 05:45:44','Labor: 6.68 minutes @ $0.0/min',0,0,3012),(76595,'debit',3.37,1,39,'materials',42669,'2017-10-27 05:46:40','2017-10-27 05:46:40','Materials',0,0,3012),(76596,'debit',0,1,39,'labor',42669,'2017-10-27 05:46:40','2017-10-27 05:46:40','Labor: 6.68 minutes @ $0.0/min',0,0,3012),(76597,'debit',0.85,1,39,'materials',42675,'2017-10-27 05:47:22','2017-10-27 05:47:22','Materials',0,0,3011),(76598,'debit',0,1,39,'labor',42675,'2017-10-27 05:47:22','2017-10-27 05:47:22','Labor: 2.27 minutes @ $0.0/min',0,0,3011),(76601,'debit',0,1,39,'materials',42685,'2017-10-27 05:54:20','2017-10-27 05:54:20','Materials',0,0,3044),(76602,'debit',0,1,39,'labor',42685,'2017-10-27 05:54:20','2017-10-27 05:54:20','Labor: 0 minutes @ $0.0/min',0,0,3044),(76605,'debit',0.85,1,39,'materials',42691,'2017-10-27 05:59:03','2017-10-27 05:59:03','Materials',0,0,3011),(76606,'debit',0,1,39,'labor',42691,'2017-10-27 05:59:03','2017-10-27 05:59:03','Labor: 2.27 minutes @ $0.0/min',0,0,3011),(76607,'debit',0.02,1,39,'materials',42693,'2017-10-27 05:59:47','2017-10-27 05:59:47','Materials',0,0,3010),(76608,'debit',0,1,39,'labor',42693,'2017-10-27 05:59:47','2017-10-27 05:59:47','Labor: 0.68 minutes @ $0.0/min',0,0,3010),(76609,'debit',0.75,1,39,'materials',42695,'2017-10-27 06:00:05','2017-10-27 06:00:05','Materials',0,0,3009),(76610,'debit',0,1,39,'labor',42695,'2017-10-27 06:00:05','2017-10-27 06:00:05','Labor: 3.88 minutes @ $0.0/min',0,0,3009),(76611,'debit',1.28,1,39,'materials',42697,'2017-10-27 06:00:33','2017-10-27 06:00:33','Materials',0,0,3014),(76612,'debit',0,1,39,'labor',42697,'2017-10-27 06:00:33','2017-10-27 06:00:33','Labor: 11.65 minutes @ $0.0/min',0,0,3014),(76613,'debit',5.22,1,39,'materials',42699,'2017-10-27 06:01:19','2017-10-27 06:01:19','Materials',0,0,3015),(76614,'debit',0,1,39,'labor',42699,'2017-10-27 06:01:19','2017-10-27 06:01:19','Labor: 8.43 minutes @ $0.0/min',0,0,3015),(76615,'debit',5.22,1,39,'materials',42699,'2017-10-27 06:01:19','2017-10-27 06:01:19','Materials',0,0,3017),(76616,'debit',0,1,39,'labor',42699,'2017-10-27 06:01:19','2017-10-27 06:01:19','Labor: 8.43 minutes @ $0.0/min',0,0,3017),(76619,'debit',0,1,39,'materials',42711,'2017-10-27 06:13:55','2017-10-27 06:13:55','Materials',0,0,3016),(76620,'debit',0,1,39,'labor',42711,'2017-10-27 06:13:55','2017-10-27 06:13:55','Labor: 0.2 minutes @ $0.0/min',0,0,3016),(76621,'debit',0,1,39,'materials',42711,'2017-10-27 06:13:55','2017-10-27 06:13:55','Materials',0,0,3018),(76622,'debit',0,1,39,'labor',42711,'2017-10-27 06:13:55','2017-10-27 06:13:55','Labor: 0.2 minutes @ $0.0/min',0,0,3018),(76623,'debit',0.66,1,39,'materials',42713,'2017-10-27 06:16:43','2017-10-27 06:16:43','Materials',0,0,3008),(76624,'debit',0,1,39,'labor',42713,'2017-10-27 06:16:43','2017-10-27 06:16:43','Labor: 2.51 minutes @ $0.0/min',0,0,3008),(76625,'debit',0,1,39,'materials',42715,'2017-10-27 06:17:13','2017-10-27 06:17:13','Materials',0,0,3068),(76626,'debit',0,1,39,'labor',42715,'2017-10-27 06:17:13','2017-10-27 06:17:13','Labor: 0 minutes @ $0.0/min',0,0,3068);
/*!40000 ALTER TABLE `accounts` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `allowable_field_types`
--

DROP TABLE IF EXISTS `allowable_field_types`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `allowable_field_types` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `field_type_id` int(11) DEFAULT NULL,
  `sample_type_id` int(11) DEFAULT NULL,
  `object_type_id` int(11) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`),
  KEY `index_allowable_field_types_on_field_type_id` (`field_type_id`),
  KEY `index_allowable_field_types_on_sample_type_id` (`sample_type_id`),
  KEY `index_allowable_field_types_on_object_type_id` (`object_type_id`)
) ENGINE=InnoDB AUTO_INCREMENT=536 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `allowable_field_types`
--

LOCK TABLES `allowable_field_types` WRITE;
/*!40000 ALTER TABLE `allowable_field_types` DISABLE KEYS */;
INSERT INTO `allowable_field_types` VALUES (479,519,21,NULL,'2017-10-02 16:27:22','2017-10-02 16:27:22'),(480,522,22,NULL,'2017-10-02 16:27:22','2017-10-02 16:27:22'),(481,522,24,NULL,'2017-10-02 16:27:22','2017-10-02 16:27:22'),(482,522,23,NULL,'2017-10-02 16:27:22','2017-10-02 16:27:22'),(483,522,25,NULL,'2017-10-02 16:27:22','2017-10-02 16:27:22'),(484,523,21,NULL,'2017-10-02 16:27:22','2017-10-02 16:27:22'),(485,524,21,NULL,'2017-10-02 16:27:22','2017-10-02 16:27:22'),(486,527,24,NULL,'2017-10-02 16:27:22','2017-10-02 16:27:22'),(487,528,25,NULL,'2017-10-02 16:27:22','2017-10-02 16:27:22'),(488,529,22,NULL,'2017-10-02 16:27:22','2017-10-02 16:27:22'),(489,529,23,NULL,'2017-10-02 16:27:22','2017-10-02 16:27:22'),(490,530,22,NULL,'2017-10-02 16:27:22','2017-10-02 16:27:22'),(491,534,21,NULL,'2017-10-02 16:27:22','2017-10-02 16:27:22'),(492,535,21,NULL,'2017-10-02 16:27:22','2017-10-02 16:27:22'),(493,540,21,601,'2017-10-02 16:27:22','2017-10-02 16:27:22'),(494,541,21,601,'2017-10-02 16:27:22','2017-10-02 16:27:22'),(495,542,22,602,'2017-10-02 16:27:22','2017-10-02 16:27:22'),(496,542,23,603,'2017-10-02 16:27:22','2017-10-02 16:27:22'),(497,542,22,604,'2017-10-02 16:27:22','2017-10-02 16:27:22'),(498,542,22,605,'2017-10-02 16:27:22','2017-10-02 16:27:22'),(499,542,23,606,'2017-10-02 16:27:22','2017-10-02 16:27:22'),(500,543,23,607,'2017-10-02 16:27:22','2017-10-02 16:27:22'),(501,544,21,608,'2017-10-02 16:28:05','2017-10-02 16:28:05'),(502,546,21,608,'2017-10-02 16:29:49','2017-10-02 16:29:49'),(503,547,21,601,'2017-10-02 16:29:49','2017-10-02 16:29:49'),(504,548,21,609,'2017-10-02 16:29:49','2017-10-02 16:29:49'),(505,549,23,607,'2017-10-25 18:08:41','2017-10-25 18:08:41'),(506,550,NULL,611,'2017-10-25 18:08:41','2017-10-25 18:08:41'),(507,551,23,611,'2017-10-25 18:08:41','2017-10-25 18:08:41'),(508,552,NULL,611,'2017-10-25 18:09:36','2017-10-25 18:09:36'),(509,553,23,612,'2017-10-25 18:15:48','2017-10-25 18:15:48'),(510,554,23,603,'2017-10-25 18:15:48','2017-10-25 18:15:48'),(511,555,23,603,'2017-10-25 18:27:28','2017-10-25 18:27:28'),(512,556,22,613,'2017-10-25 18:27:28','2017-10-25 18:27:28'),(513,557,22,613,'2017-10-25 18:31:27','2017-10-25 18:31:27'),(514,558,24,614,'2017-10-25 18:31:27','2017-10-25 18:31:27'),(515,559,22,615,'2017-10-25 18:31:27','2017-10-25 18:31:27'),(516,560,22,615,'2017-10-25 18:37:40','2017-10-25 18:37:40'),(517,561,22,616,'2017-10-25 18:37:40','2017-10-25 18:37:40'),(518,562,22,616,'2017-10-27 01:07:44','2017-10-27 01:07:44'),(519,563,22,616,'2017-10-27 01:07:51','2017-10-27 01:07:51'),(520,564,22,617,'2017-10-27 01:08:29','2017-10-27 01:08:29'),(521,565,22,617,'2017-10-27 01:10:05','2017-10-27 01:10:05'),(522,566,22,618,'2017-10-27 01:10:05','2017-10-27 01:10:05'),(523,567,22,618,'2017-10-27 01:10:46','2017-10-27 01:10:46'),(524,568,22,602,'2017-10-27 01:10:46','2017-10-27 01:10:46'),(525,569,22,602,'2017-10-27 01:12:59','2017-10-27 01:12:59'),(526,570,21,601,'2017-10-27 01:12:59','2017-10-27 01:12:59'),(527,571,22,619,'2017-10-27 01:12:59','2017-10-27 01:12:59'),(528,572,22,618,'2017-10-27 01:15:26','2017-10-27 01:15:26'),(529,573,22,620,'2017-10-27 01:15:26','2017-10-27 01:15:26'),(530,575,22,619,'2017-10-27 01:16:04','2017-10-27 01:16:25'),(531,576,22,602,'2017-10-27 01:17:08','2017-10-27 01:17:08'),(532,577,22,617,'2017-10-27 01:17:08','2017-10-27 01:17:08'),(533,578,NULL,607,'2017-10-27 04:43:00','2017-10-27 04:43:00'),(534,579,23,611,'2017-10-27 04:56:55','2017-10-27 04:56:55'),(535,580,23,612,'2017-10-27 04:56:56','2017-10-27 04:56:56');
/*!40000 ALTER TABLE `allowable_field_types` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `announcements`
--

DROP TABLE IF EXISTS `announcements`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `announcements` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(255) DEFAULT NULL,
  `message` text,
  `active` tinyint(1) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `announcements`
--

LOCK TABLES `announcements` WRITE;
/*!40000 ALTER TABLE `announcements` DISABLE KEYS */;
/*!40000 ALTER TABLE `announcements` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `budgets`
--

DROP TABLE IF EXISTS `budgets`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `budgets` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL,
  `overhead` float DEFAULT NULL,
  `contact` varchar(255) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  `description` text,
  `email` varchar(255) DEFAULT NULL,
  `phone` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=40 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `budgets`
--

LOCK TABLES `budgets` WRITE;
/*!40000 ALTER TABLE `budgets` DISABLE KEYS */;
INSERT INTO `budgets` VALUES (39,'First Budget',NULL,'Mark Merill','2017-10-02 17:48:38','2017-10-19 04:58:33','A budget for Neptune','mark.c.merrill@gmail.com','9177674678');
/*!40000 ALTER TABLE `budgets` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `codes`
--

DROP TABLE IF EXISTS `codes`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `codes` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL,
  `content` text,
  `parent_id` int(11) DEFAULT NULL,
  `parent_class` varchar(255) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  `user_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=1079 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `codes`
--

LOCK TABLES `codes` WRITE;
/*!40000 ALTER TABLE `codes` DISABLE KEYS */;
INSERT INTO `codes` VALUES (935,'protocol','needs \"Cloning Libs/Cloning\"\r\nneeds \"Cloning Libs/Gradient PCR\"\r\n\r\nclass Protocol\r\n    \r\n  # I/O\r\n  FWD = \"Forward Primer\"\r\n  REV = \"Reverse Primer\"\r\n  TEMPLATE = \"Template\"\r\n  FRAGMENT = \"Fragment\"\r\n  \r\n  # get the gradient PCR magic\r\n  include Cloning\r\n  include GradientPCR\r\n\r\n\r\n\r\n  def main\r\n      \r\n    if debug\r\n      operations.retrieve interactive: false\r\n      item = operations[0].input(FWD).item\r\n      operations.each do |op|\r\n        if rand(2) < 1\r\n          op.input(REV).set item: item\r\n          op.input(FWD).set item: item\r\n        end\r\n      end\r\n    end\r\n      \r\n    # grab all necessary items\r\n    dilute_stocks_and_retrieve TEMPLATE\r\n    kapa_stock_item = find(:sample, name: \"Kapa HF Master Mix\")[0].in(\"Enzyme Stock\")[0]\r\n    take [kapa_stock_item], interactive: true,  method: \"boxes\"\r\n    \r\n    #check the volumes of input primers for all operations, and ensure they are sufficient\r\n    operations.each { |op| op.temporary[:primer_vol] = 2.5 }\r\n    check_volumes [FWD, REV], :primer_vol, :make_aliquots_from_stock, check_contam: true\r\n    \r\n    # build a pcrs hash that groups pcr by T Anneal\r\n    pcrs = build_pcrs_hash\r\n\r\n    # generate a table for stripwells\r\n    stripwell_tab = build_stripwell_table pcrs\r\n    \r\n    # prepare and label stripwells for PCR\r\n    prepare_stripwells stripwell_tab\r\n    \r\n    # add templates to stripwells for pcr\r\n    load_templates pcrs\r\n    \r\n    # add primers to stripwells\r\n    load_primers pcrs\r\n\r\n    # add kapa master mix to stripwells\r\n    add_mix stripwell_tab, kapa_stock_item\r\n    \r\n    # run the thermocycler\r\n    start_pcr pcrs\r\n    \r\n    # store \r\n    operations.running.store io: \"input\", interactive: true, method: \"boxes\"\r\n    release [kapa_stock_item], interactive: true\r\n    \r\n    return {}\r\n  end\r\n  \r\n  # dilute to 1ng/uL stocks if necessary\r\n  def dilute_stocks_and_retrieve input\r\n  \r\n    # only use inputs that haven\'t been diluted and that don\'t have diluted stocks already\r\n    ops_w_undiluted_template = operations.reject { true }\r\n    operations.each do |op|\r\n        next if op.input(input).object_type.name.include?(\"1 ng/L\")\r\n        \r\n        sample = op.input(input).sample\r\n        ot_name = op.input(input).object_type.name.include?(\"Unverified\") ? \"1 ng/L Plasmid Stock\" : \"1 ng/L \" + sample.sample_type.name + \" Stock\"\r\n        diluted_stock = sample.in(ot_name).first\r\n        \r\n        if diluted_stock\r\n            op.input(input).set item: diluted_stock\r\n        else\r\n            new_stock = produce new_sample sample.name, of: sample.sample_type.name, as: ot_name\r\n            op.temporary[:diluted_stock] = new_stock\r\n            \r\n            ops_w_undiluted_template.push op\r\n        end\r\n    end\r\n    \r\n    # retrieve operation inputs (doesn\'t include the stocks replaced by diluted stocks above)\r\n    ops_w_undiluted_template.retrieve\r\n    \r\n    # all stocks may be diluted already\r\n    if ops_w_undiluted_template.empty?\r\n        operations.retrieve\r\n        return\r\n    end\r\n    \r\n    # ensure concentrations\r\n    check_concentration ops_w_undiluted_template, input\r\n    \r\n    # dilute stocks\r\n    show do\r\n      title \"Make 1 ng/L Template Stocks\"\r\n      \r\n      check \"Grab #{ops_w_undiluted_template.length} 1.5 mL tubes, label them with #{ops_w_undiluted_template.map { |op| op.temporary[:diluted_stock].id }.join(\", \")}\"\r\n      check \"Add template stocks and water into newly labeled 1.5 mL tubes following the table below\"\r\n      \r\n      table ops_w_undiluted_template\r\n          .start_table\r\n          .custom_column(heading: \"Newly-labeled tube\") { |op| op.temporary[:diluted_stock].id }\r\n          .input_item(input, heading: \"Template stock, 1 L\", checkable: true)\r\n          .custom_column(heading: \"Water volume\", checkable: true) { |op| op.input(input).item.get(:concentration).to_f - 1 }\r\n          .end_table\r\n      check \"Vortex and then spin down for a few seconds\"\r\n    end\r\n    \r\n    # return input stocks\r\n    release ops_w_undiluted_template.map { |op| op.input(input).item }, interactive: true, method: \"boxes\"\r\n    \r\n    # retrieve the rest of the inputs\r\n    operations.reject { |op| ops_w_undiluted_template.include? op }.retrieve\r\n    \r\n    # set diluted stocks as inputs\r\n    ops_w_undiluted_template.each { |op| op.input(input).set item: op.temporary[:diluted_stock] }\r\n  end\r\n  \r\n  \r\n  # TODO dilute from stock if item is aliquot\r\n  # Callback for check_volume.\r\n  # takes in lists of all ops that have input aliquots with insufficient volume, sorted by item,\r\n  # and takes in the inputs which were checked for those ops.\r\n  # Deletes bad items and remakes each from primer stock\r\n#   def make_aliquots_from_stock bad_ops_by_item, inputs\r\n#     # bad_ops_by_item is accessible by bad_ops_by_item[item] = [op1, op2, op3...]\r\n#     # where each op has a bad volume reading for the given item\r\n    \r\n#     # Construct list of all stocks needed for making aliquots. Error ops for which no primer stock is available\r\n#     # for every non-errored op that has low item volume,\r\n#     # replace the old aliquot item with a new one. \r\n#     aliquots_to_make = 0\r\n#     stocks = []\r\n#     ops_by_fresh_item = Hash.new(0)\r\n#     stock_table = [[\"Primer Stock ID\", \"Primer Aliquot ID\"]]\r\n#     transfer_table = [[\"Old Aliquot ID\", \"New Aliquot ID\"]]\r\n#     bad_ops_by_item.each do |item, ops|\r\n#       stock = item.sample.in(\"Primer Stock\").first ######## items is a string?\r\n#       if stock.nil?\r\n#         ops.each { |op| op.error :no_primer, \"You need to order a primer stock for primer sample #{item.sample.id}.\" }\r\n#         bad_ops_by_item.except! item\r\n#       else\r\n#         stocks.push stock\r\n#         aliquots_to_make += 1\r\n#         item.mark_as_deleted\r\n#         fresh_item = produce new_sample item.sample.name, of: item.sample.sample_type.name, as: item.object_type.name\r\n#         bad_ops_by_item.except! item\r\n#         ops_by_fresh_item[fresh_item] = ops\r\n#         ops.each do |op| \r\n#           input = inputs.find { |input| op.input(input).item == item }\r\n#           op.input(input).set item: fresh_item\r\n#         end\r\n#         stock_table.push [stock.id, {content: fresh_item.id, check: true}]\r\n#         if item.get(:contaminated) != \"Yes\"\r\n#           transfer_table.push [item.id, {content: fresh_item.id, check: true}]    \r\n#         end\r\n#       end\r\n#     end\r\n    \r\n#     bad_ops_by_item.merge! ops_by_fresh_item\r\n#     take stocks, interactive: true\r\n    \r\n#     # label new aliquot tubes and dilute\r\n#     show do \r\n#       title \"Grab 1.5 mL tubes\"\r\n      \r\n#       note \"Grab #{aliquots_to_make} 1.5 mL tubes\"\r\n#       note \"Label each tube with the following ids: #{bad_ops_by_item.keys.map { |item| item.id }.sort.to_sentence}\"\r\n#       note \"Using the 100 uL pipette, pipette 90uL of water into each tube\"\r\n#     end\r\n  \r\n#     # make new aliquots\r\n#     show do \r\n#       title \"Transfer primer stock into primer aliquot\"\r\n      \r\n#       note \"Pipette 10 uL of the primer stock into the primer aliquot according to the following table:\"\r\n#       table stock_table\r\n#     end\r\n    \r\n    \r\n#     if transfer_table.length > 1\r\n#       show do\r\n#         title \"Transfer Residual Primer\"\r\n        \r\n#         note \"Transfer primer residue from the low volume aliquots into the fresh aliquots according to the following table:\"\r\n#         table transfer_table\r\n#       end\r\n#     end\r\n    \r\n#     release stocks, interactive: true\r\n#   end\r\n  \r\n  # build a pcrs hash that groups pcr by T Anneal\r\n  def build_pcrs_hash\r\n    pcrs = distribute_pcrs operations.running, 4\r\n    pcrs.each do |pcr|\r\n      lengths = pcr[:ops_by_bin].values.flatten.collect { |op| op.input(TEMPLATE).sample.properties[\"Length\"] }\r\n      extension_time = (lengths.max)/1000.0*30\r\n      # adding more extension time for longer size PCR.\r\n      if lengths.max < 2000\r\n        extension_time += 30\r\n      elsif lengths.max < 3000\r\n        extension_time += 60\r\n      else\r\n        extension_time += 90\r\n      end\r\n      extension_time = 3 * 60 if extension_time < 3 * 60\r\n      pcr[:mm], pcr[:ss] = (extension_time.to_i).divmod(60)\r\n      pcr[:mm] = \"0#{pcr[:mm]}\" if pcr[:mm].between?(0, 9)\r\n      pcr[:ss] = \"0#{pcr[:ss]}\" if pcr[:ss].between?(0, 9)\r\n\r\n      # set up stripwells (one for each temperature bin)\r\n      pcr[:ops_by_bin].each do |bin, ops|\r\n          ops.make\r\n          pcr[:stripwells] += ops.output_collections[FRAGMENT]\r\n      end\r\n    end\r\n    pcrs\r\n  end\r\n  \r\n  # generate a table for stripwells\r\n  def build_stripwell_table pcrs\r\n    stripwells = pcrs.collect { |pcr| pcr[:stripwells] }.flatten\r\n    stripwell_tab = [[\"Stripwell\", \"Wells to pipette\"]] + stripwells.map { |sw| [\"#{sw.id} (#{sw.num_samples <= 6 ? 6 : 12} wells)\", { content: sw.non_empty_string, check: true }] }\r\n  end\r\n  \r\n  # prepare and label stripwells for PCR\r\n    def prepare_stripwells stripwell_tab\r\n    show do\r\n      title \"Label and prepare stripwells\"\r\n      \r\n      note \"Label stripwells, and pipette 19 L of molecular grade water into each based on the following table:\"\r\n      table stripwell_tab\r\n      stripwell_tab\r\n    end\r\n  end\r\n  \r\n  # add templates to stripwells for pcr\r\n  def load_templates pcrs\r\n    pcrs.each_with_index do |pcr, idx|\r\n      show do\r\n        title \"Load templates for PCR ##{idx + 1}\"\r\n        \r\n        pcr[:ops_by_bin].each do |bin, ops|\r\n          table ops\r\n              .start_table\r\n              .output_collection(FRAGMENT, heading: \"Stripwell\")\r\n              .custom_column(heading: \"Well\") { |op| op.output(FRAGMENT).column + 1 }\r\n              .input_item(TEMPLATE, heading: \"Template, 1 L\", checkable: true)\r\n              .end_table\r\n        end\r\n        warning \"Use a fresh pipette tip for each transfer.\".upcase\r\n      end\r\n    end\r\n  end\r\n  \r\n  # add primers to stripwells\r\n  def load_primers pcrs\r\n    pcrs.each_with_index do |pcr, idx|\r\n      show do\r\n        title \"Load primers for PCR ##{idx + 1}\"\r\n        \r\n        pcr[:ops_by_bin].each do |bin, ops|\r\n          table ops.start_table\r\n              .output_collection(FRAGMENT, heading: \"Stripwell\")\r\n              .custom_column(heading: \"Well\") { |op| op.output(FRAGMENT).column + 1 }\r\n              .input_item(FWD, heading: \"Forward Primer, 2.5 L\", checkable: true)\r\n              .input_item(REV, heading: \"Reverse Primer, 2.5 L\", checkable: true)\r\n              .end_table\r\n        end\r\n        warning \"Use a fresh pipette tip for each transfer.\".upcase\r\n      end\r\n    end\r\n  end\r\n  \r\n  # add kapa master mix to stripwells\r\n  def add_mix stripwell_tab, kapa_stock_item\r\n      show do\r\n          title \"Add Master Mix\"\r\n          \r\n          note \"Pipette 25 L of master mix (#{kapa_stock_item}) into stripwells based on the following table:\"\r\n          table stripwell_tab\r\n          warning \"USE A NEW PIPETTE TIP FOR EACH WELL AND PIPETTE UP AND DOWN TO MIX.\"\r\n          check \"Cap each stripwell. Press each one very hard to make sure it is sealed.\"\r\n      end\r\n  end\r\n  \r\n  # run the thermocycler and update the positions of the stripwells\r\n  def start_pcr pcrs\r\n      pcrs.each_with_index do |pcr, idx|\r\n        is_gradient = pcr[:bins].length > 1\r\n        \r\n        thermocycler = show do\r\n          if !is_gradient\r\n            title \"Start PCR ##{idx + 1} at #{pcr[:bins].first} C\"\r\n            \r\n            check \"Place the stripwell(s) #{pcr[:stripwells].collect { |sw| \"#{sw}\" }.join(\", \")} into an available thermal cycler and close the lid.\"\r\n            get \"text\", var: \"name\", label: \"Enter the name of the thermocycler used\", default: \"TC1\"\r\n            check \"Click \'Home\' then click \'Saved Protocol\'. Choose \'YY\' and then \'CLONEPCR\'.\"\r\n            check \"Set the anneal temperature to #{pcr[:bins].first}. This is the 3rd temperature.\"\r\n          else\r\n            title \"Start PCR ##{idx + 1} (gradient) over range #{pcr[:bins].first}-#{pcr[:bins].last} C\"\r\n            check \"Click \'Home\' then click \'Saved Protocol\'. Choose \'YY\' and then \'CLONEPCR\'.\"\r\n            check \"Click on annealing temperature -> options, and check the gradient checkbox.\"\r\n            check \"Set the annealing temperature range to be #{pcr[:bins].first}-#{pcr[:bins].last} C.\"\r\n            note \"The following stripwells are ordered front to back.\"\r\n            pcr[:stripwells].map.with_index do |sw, idx|\r\n              temp = pcr[:ops_by_bin].keys[idx].to_f\r\n              row_num = pcr[:bins].index temp\r\n              row_letter = (\'H\'.ord - row_num).chr\r\n              row_letter = \'A\' if pcr[:bins].length == 2 && idx == 1\r\n              check \"Place the stripwell #{sw} into Row #{row_letter} (#{temp} C) of an available thermal cycler.\"\r\n            end\r\n            get \"text\", var: \"name\", label: \"Enter the name of the thermocycler used\", default: \"TC1\"\r\n          end\r\n          check \"Set the 4th time (extension time) to be #{pcr[:mm]}:#{pcr[:ss]}.\"\r\n          check \"Press \'Run\' and select 50 L.\"\r\n        end\r\n        \r\n        # set the location of the stripwell\r\n        pcr[:stripwells].flatten.each do |sw|\r\n          sw.move thermocycler[:name]\r\n        end\r\n      end\r\n  end\r\nend',183,'OperationType','2017-10-02 16:27:22','2017-10-02 17:59:15',NULL),(936,'precondition','def validate_property sample, field_name\r\n  validation_block = Proc.new\r\n  property = sample.properties[field_name]\r\n  if property.nil?\r\n    raise \"Could not find property #{field_name}\"\r\n  end\r\n  validation_block.call(sample, property)\r\nend\r\n\r\n# Appends associates msgs to plan and operation\r\ndef precondition_warnings op, msgs, key=:precondition_warnings, sep=\";\"\r\n  plan = op.plan\r\n  if plan\r\n    plan_msg = op.plan.get key\r\n    plan_msgs = plan_msg.split(sep).map { |x| x.strip } if plan_msg\r\n  end\r\n  plan_msgs ||= []\r\n  op_msgs = []\r\n\r\n  msgs.each { |valid, m|\r\n    if valid\r\n      plan_msgs.delete(m)\r\n    else\r\n      plan_msgs << m\r\n      op_msgs << m\r\n    end\r\n  }\r\n  op_msgs.uniq!\r\n  plan_msgs.uniq!\r\n\r\n  op.associate key, op_msgs.join(sep + \" \")\r\n  op.plan.associate key, plan_msgs.join(sep + \" \") if op.plan\r\nend\r\n\r\ndef precondition(op)\r\n  ready = true\r\n  msgs = []\r\n\r\n  # Validate sample, valid_block, valid_message\r\n  [\"Forward Primer\", \"Reverse Primer\"].each do |n|\r\n    sample = op.input(n).sample\r\n\r\n    msgs << validate_property(sample, \"T Anneal\") { |s, property|\r\n      validator = Proc.new { |p| p.to_f.between?(0.01, 100) }\r\n      msg = \"T Anneal #{property} for Primer \\\"#{s.name}\\\" is invalid\"\r\n      [validator.call(property), msg]\r\n    }\r\n  end\r\n  msgs.select! { |valid, m| !valid }\r\n  msgs.compact!\r\n  precondition_warnings op, msgs\r\n  ready = false if msgs.any?\r\n  ready\r\nend',183,'OperationType','2017-10-02 16:27:22','2017-10-02 16:27:22',NULL),(937,'cost_model','# Kilroy was here 2017-09-28 05:11:58\n# Kilroy was here 2017-09-21 20:39:57\n# Make PCR Fragment Cost Model\n\ndef cost(op)\n    {\n        materials: 1.04,\n        labor: 6.45\n    }      \nend',183,'OperationType','2017-10-02 16:27:22','2017-10-27 04:28:15',NULL),(938,'documentation','This is run after **Extract Fragment** and is a precursor to **Assemble Plasmid**. The technician combines the inputted forward primer, reverse primer, and the template in a stripwell, and runs the PCR in a thermocycler. ',183,'OperationType','2017-10-02 16:27:22','2017-10-02 16:27:22',NULL),(939,'protocol','needs \"Standard Libs/Debug\"\n\nclass Protocol\n  include Debug\n    \n  def main\n    Rails.logger.info \"whsdf\"\n    log_info \"wha\", \"bro\", nil\n    \n    operations.retrieve.make\n    \n    show { note operations.first.input(\"Urgent?\").val.to_s; note operations.first.input(\"Urgent?\").val.downcase.class.to_s }\n    show do\n      title \"Prepare to order primer\"\n      \n      check \"Go to the <a href=\'https://www.idtdna.com/site/account\' target=\'_blank\'>IDT website</a>, log in with the lab account. (Username: klavins_lab, password is the lab general password).\"\n      warning \"Ensure that you are logged in to this exact username and password!\"\n    end\n\n    # make primer table\n    tab = operations.map do |op|\n      primer = op.output(\"Primer\").sample\n      [primer.id.to_s + \" \" + primer.name, primer.properties[\"Overhang Sequence\"] + primer.properties[\"Anneal Sequence\"]]\n    end\n    \n    # make lists of primers of different lengths\n    operations.each { |op| op.temporary[:length] = (op.output(\"Primer\").sample.properties[\"Overhang Sequence\"] + op.output(\"Primer\").sample.properties[\"Anneal Sequence\"]).length }\n    \n    primers_over_60 = operations.select do |op| \n      length = op.temporary[:length]\n      length > 60 && length <= 90\n    end.map do |op| \n        primer = op.output(\"Primer\").sample\n        \"#{primer} (##{operations.index(op) + 1})\"\n    end.join(\", \")\n    \n    primers_over_90 = operations.select do |op| \n      length = op.temporary[:length]\n      length > 90\n    end.map do |op| \n        primer = op.output(\"Primer\").sample\n        \"#{primer} (##{operations.index(op) + 1})\"\n    end.join(\", \")\n    \n    # show primer table\n    data = show do\n      title \"Create an IDT DNA oligos order\"\n      \n      warning \"Oligo concentration for primer(s) #{primers_over_60} will have to be set to \\\"100 nmole DNA oligo.\\\"\" if primers_over_60 != \"\"\n      warning \"Oligo concentration for primer(s) #{primers_over_90} will have to be set to \\\"250 nmole DNA oligo.\\\"\" if primers_over_90 != \"\"\n      \n      check \"Click Custom DNA Oligos, click Bulk Input. Copy paste the following table and then click the Update button.\"\n      \n      table tab\n      \n      check \"Click Add to Order, review the shopping cart to double check that you entered correctly. There should be #{operations.length} primers in the cart.\"\n      check \"Click Checkout, then click Continue.\"\n      check \"Enter the payment information, click the oligo card tab, select the Card1 in Choose Payment and then click Submit Order.\"\n      check \"Go back to the main page, let it sit for 5-10 minutes, return and refresh, and find the order number for the order you just placed.\"\n      \n      get \"text\", var: \"order_number\", label: \"Enter the IDT order number below\", default: 100\n    end\n\n    operations.each { |op| op.set_output_data(\"Primer\", :order_number, data[:order_number]) }\n    \n    return {}\n    \n  end\n\nend\n',184,'OperationType','2017-10-02 16:28:05','2017-10-02 16:28:05',NULL),(940,'precondition','def precondition(op)\n  return true\n  \n  pending_orders = Operation.where(\"status = ? && operation_type_id IN (?)\", \"pending\", OperationType.where(\"name = \'Order Primer\'\").map { |order| order.id })\n  total_cost = pending_orders.inject(0) { |sum, order| sum + order.nominal_cost[:materials] }\n  \n  if (op.input(\"Urgent?\").val.downcase == \"yes\" ||\n     pending_orders.any? { |order| order.input(\"Urgent?\").val.downcase == \"yes\" } ||\n     total_cost > 50 ) && op.output(\"Primer\").sample.properties[\"Overhang Sequence\"] && op.output(\"Primer\").sample.properties[\"Anneal Sequence\"]\n      return true\n  end\n  \n  return false\nend',184,'OperationType','2017-10-02 16:28:05','2017-10-02 16:28:05',NULL),(941,'cost_model','# Kilroy was here 2017-09-22 18:54:13\ndef cost(op)\n    \n  props = op.output(\"Primer\").sample.properties\n  seq = props[\"Overhang Sequence\"] + props[\"Anneal Sequence\"]\n  n = seq.length\n  \n  if n <= 60\n    c = n * Parameter.get_float(\'short primer cost\')\n  elsif n <= 90\n    c = n * Parameter.get_float(\'medium primer cost\')\n  else\n    c = n * Parameter.get_float(\'long primer cost\')\n  end\n  \n  { labor: 1.8, materials: c }\n  \nend',184,'OperationType','2017-10-02 16:28:05','2017-10-27 04:28:21',NULL),(942,'documentation','Primers are ordered from IDT. The base price of a primer depends on the length as follows:\n\n| Length(bp)    | Cost per base | \n| ------------- | ------------- |\n| < 60          | $0.15         |\n| 60 - 90       | $0.34         |\n| > 90          | $.55          |\n\nIDT charges extra for shipping if primer orders are below $50. If you input \"y\" for the \"Urgent?\" parameter, your primer will be ordered whether or not there are extra shipping costs associated with it. If you input \"n\" for the \"Urgent?\" parameter, your primer will only be ordered when no extra shipping costs will be incurred. \n',184,'OperationType','2017-10-02 16:28:05','2017-10-02 16:28:05',NULL),(943,'protocol','class Protocol\n\n  def main\n    operations.retrieve interactive: false\n    operations.make\n    \n    # grab primers from EE office\n    pick_up_primers\n    \n    # Centrifuge ordered primer\n    spin_down_primers\n    \n    # Get nMoles of primer for each tube\n    get_primer_nm\n    \n    # Label primers and add TE\n    rehydrate_primers\n    \n    # Finish preparing primer stock tubes\n    vortex_and_centrifuge\n    \n    # Prepare tubes to make aliquots with\n    prepare_aliquot_tubes\n    \n    # Add primer stock to prepared aliquot tubes\n    make_aliquots\n    \n    operations.each { |op| op.input(\"Primer\").item.mark_as_deleted }\n    operations.store\n    \n    return {}\n  end\n\n  def pick_up_primers\n    show do\n      title \"Go the EE office to pick up primers\"\n      \n      note \"Abort this protocol if no primer has shown up. It will automatically rescheduled.\"\n    end\n  end\n  \n  def spin_down_primers\n    show do\n      title \"Quick spin down all the primer tubes\"\n      \n      note \"Find the order with sales order (or supplier ref) number #{operations.first.input_data(\"Primer\", :order_number)}\"\n      note \"Put all the primer tubes in a table top centrifuge to spin down for 3 seconds.\"\n      warning \"Make sure to balance!\"\n    end    \n  end\n  \n  # Queries the tech for the nMoles of primer as written on tube and stores the measurement in operation.temporary[:n_moles]\n  def get_primer_nm\n    show do\n      title \"Enter the nMoles of the primer\"\n      \n      note \"Enter the number of moles for each primer, in nm. This is written toward the bottom of the tube, below the MW.\"\n      note \"The id of the primer is listed before the primer\'s name on the side of the tube.\"\n      table operations\n          .start_table\n          .input_sample(\"Primer\")\n          .get(:n_moles, type: \"number\", heading: \"nMoles\", default: 10)\n          .end_table\n    end    \n  end\n  \n  # label the primer tubes with their new unique id, and rehydrate each with an amount of TE dependent on the nMoles of primer.\n  def rehydrate_primers\n    show do\n      title \"Label and rehydrate\"\n      \n      note \"Label each primer tube with the ids shown in Primer Stock ids and rehydrate with volume of TE shown in Rehydrate\"\n      table operations\n          .start_table\n          .input_sample(\"Primer\")\n          .output_item(\"Primer Stock\")\n          .custom_column(heading: \"Rehydrate (uL of TE)\", checkable: true) { |op| op.temporary[:n_moles] * 10 }\n          .end_table\n    end    \n  end\n  \n  def vortex_and_centrifuge\n    show do\n      title \"Vortex and centrifuge\"\n      \n      note \"Wait one minute for the primer to dissolve in TE.\" if operations.length < 7\n      note \"Vortex each tube on table top vortexer for 5 seconds and then quick spin for 2 seconds on table top centrifuge.\"\n    end    \n  end\n  \n  def prepare_aliquot_tubes\n    show do\n      title \"Grab #{operations.length} 1.5 mL tubes\"\n      \n      check \"Grab #{operations.length} 1.5 mL tubes, label with following ids: #{operations.map { |op| \"#{op.output(\"Primer Aliquot\").item.id}\" }.join(\", \")}\"\n      check \"Add 90 uL of water into each above tube.\"\n    end    \n  end\n\n  def make_aliquots\n    show do\n      title \"Make primer aliquots\"\n      \n      note \"Add 10 uL from primer stocks into each primer aliquot tube using the following table.\"\n      table operations\n          .start_table\n          .output_item(\"Primer Stock\", heading: \"Primer Stock (10 L)\")\n          .output_item(\"Primer Aliquot\", checkable: true)\n          .end_table\n    end    \n  end\nend\n',185,'OperationType','2017-10-02 16:29:49','2017-10-02 16:29:49',NULL),(944,'precondition','def precondition(op)\n  true\nend',185,'OperationType','2017-10-02 16:29:49','2017-10-02 16:29:49',NULL),(945,'cost_model','def cost(op)\n  { labor: 3.16, materials: 0.12 }\nend',185,'OperationType','2017-10-02 16:29:49','2017-10-02 16:29:49',NULL),(946,'documentation','This is run after **Order Primer**. The ordered primers are recieved as lyopholized primers, and the technician rehydrates them using TE and creates a primer aliquot that will be used in various jobs. ',185,'OperationType','2017-10-02 16:29:49','2017-10-02 16:29:49',NULL),(947,'source','# Library code here',11,'Library','2017-10-02 16:30:02','2017-10-02 16:30:33',NULL),(948,'source','module GradientPCR\n  def distribute_pcrs operations, num_therm\n    frags_by_bins = sort_fragments_into_bins operations, num_therm\n    frags_by_bins.reject { |frag_hash| frag_hash[:rows].empty? }.map do |frag_hash|\n      { \n        ops_by_bin: Hash[frag_hash[:rows].sort], bins: frag_hash[:bins], mm: 0, ss: 0, fragments: [], templates: [], forward_primers: [],\n        reverse_primers: [], forward_primer_ids: [], reverse_primer_ids: [], stripwells: [], tanneals: [] \n      }\n    end\n  end\n\n  def sort_fragments_into_bins operations, num_therm\n    operations.each do |op|\n        t1 = op.input(\"Forward Primer\").sample.properties[\"T Anneal\"]\n        t2 = op.input(\"Reverse Primer\").sample.properties[\"T Anneal\"]\n        op.temporary[:tanneal] = [t1, t2].min\n    end\n    \n    temps_by_bins = sort_temperatures_into_bins operations.map { |op| op.temporary[:tanneal] }, num_therm\n\n    operations_copy = Array.new(operations)\n    temps_by_bins.map do |grad_hash|\n      frag_hash = { bins: grad_hash[:bins], rows: Hash.new { |h, k| h[k] = [] } }\n      grad_hash[:rows].each do |b, ts|\n        frag_hash[:rows][b] += ts.map do |t|\n          op = operations_copy.find { |op| op.temporary[:tanneal] == t }\n          operations_copy.delete_at(operations_copy.index(op))\n          op\n        end\n      end\n      \n      frag_hash[:rows].each { |b, ops| ops.extend(OperationList) }\n      frag_hash\n    end\n  end\n\n  def sort_temperatures_into_bins an_temps, num_therm\n    bins = [0.0, 0.75, 2.0, 3.7, 6.1, 7.9, 9.3, 10.0]\n    puts \"\\n#{\"Annealing temperatures:\"} #{an_temps.to_s}\"\n\n    best_bin_set = find_best_bin_set an_temps, bins, (46..62).map { |t| t / 1 }, Array.new, num_therm\n    best_grad_set = make_grad_hash_set_from_bin_set(an_temps, best_bin_set)\n    puts \"\\n#{\"Best bin set:\"} #{best_bin_set}\"\n    puts \"\\n#{\"Best gradient set score:\"} #{score_set best_grad_set}\"\n    puts \"#{\"Best gradient set: \"} #{therm_format best_grad_set}\"\n\n    opt_best_grad_set = optimize_grad_set best_grad_set\n    puts \"\\n#{\"Best gradient set (optimized) score:\"} #{score_set opt_best_grad_set}\"\n    puts \"#{\"Best gradient set (optimized): \"} #{therm_format opt_best_grad_set}\"\n    puts opt_best_grad_set\n\n    normal_bin_set = [[46],[60],[64],[67]]\n    normal_grad_set = make_grad_hash_set_from_bin_set an_temps, normal_bin_set\n    puts \"\\n#{\"Normal gradient set score:\"} #{score_bin_set an_temps, normal_bin_set}\"\n    puts \"#{\"Normal gradient set:\"} #{therm_format normal_grad_set}\"\n\n    return opt_best_grad_set\n  end\n\n  def find_best_bin_set temps, bins, transforms, base_bin_set, num_bin_sets\n    return base_bin_set if num_bin_sets == 0\n\n    best_bin_set = nil\n    transforms.each { |trans|\n      t_bins = bins.map { |t| t + trans }\n      next_base_bin_set = [t_bins] + base_bin_set\n      next if (make_grad_hash temps, next_base_bin_set.flatten).nil?\n\n      bin_set = (find_best_bin_set temps, bins, transforms[1..-1], next_base_bin_set, num_bin_sets - 1)\n      best_bin_set ||= bin_set\n      best_bin_set = bin_set if score_bin_set(temps, bin_set) < score_bin_set(temps, best_bin_set)\n    }\n    best_bin_set\n  end\n\n  def make_grad_hash temps, bins\n    bin_rev = bins.reverse\n    grad_hash = { bins: bins, rows: Hash.new { |h, k| h[k] = [] } }\n    temps.each { |t|\n      key = \"#{bin_rev.find { |b| b <= t }}\"\n      return nil if key.empty?\n      grad_hash[:rows][key].push t\n    }\n    grad_hash\n  end\n\n  def score grad_hash\n    score = 0.0\n    grad_hash[:rows].each { |b, ts|\n      ts.each { |t| score = score + t - b.to_f }\n    }\n    score\n  end\n\n  def score_temps temps, bin\n    temps.inject(0) { |sum, t| sum + t - bin }\n  end\n\n  def score_set grad_hash_set\n    total = 0.0\n    grad_hash_set.each { |grad_hash| total = total + score(grad_hash) }\n    total.round(2)\n  end\n\n  def score_bin_set temps, bin_set\n    grad_hash = make_grad_hash temps, bin_set.flatten.sort\n    score(grad_hash).round(2)\n  end\n\n  def make_grad_hash_set_from_bin_set temps, bin_set\n    grand_grad_hash = make_grad_hash temps, bin_set.flatten.sort\n    bin_set.map { |bins|\n      row_hash = Hash.new\n      bins.each do |b|\n        if grand_grad_hash[:rows][b.to_s].any?\n          row_hash[b.to_s] = grand_grad_hash[:rows][b.to_s]\n          grand_grad_hash[:rows].delete(b.to_s)\n        end\n      end\n      { bins: bins, rows: row_hash }\n    }\n  end\n\n  def optimize_grad_set grad_set\n    grad_set.each_with_index do |grad_hash, idx|\n      if grad_hash[:rows].length <= 1 # Can take another temperature set\n        high_score_hash_and_bin = find_highest_scoring_hash_and_bin grad_set, grad_hash\n        if !high_score_hash_and_bin[:hash].empty? # Move highest scoring temperature set to this grad_hash\n          hs_bin = high_score_hash_and_bin[:bin]\n          hs_ts = high_score_hash_and_bin[:hash][hs_bin]\n          grad_hash[:rows].merge!({ hs_bin => hs_ts }) { |bin, ts1, ts2| ts1 + ts2 }\n          high_score_hash_and_bin[:hash].delete(hs_bin)\n        end\n        if grad_hash[:rows].length == 1 && grad_set[(idx + 1)..-1].any? { |gh| gh[:rows].length == 1 } # Move isolated temperature set to this grad_hash\n          targ_hash = grad_set[(idx + 1)..-1].find { |gh| gh[:rows].length == 1 }\n          targ_bin = targ_hash[:rows].keys.find { |b| targ_hash[:rows][b].any? }\n          grad_hash[:rows].merge!({ targ_bin => targ_hash[:rows][targ_bin] }) { |bin, ts1, ts2| ts1 + ts2 }\n          targ_hash[:rows].delete(targ_bin)\n          #puts \"HEY\"\n        end\n      end\n\n      update_rows grad_hash\n    end\n    \n    grad_set.each { |grad_hash| update_rows grad_hash }\n  end\n\n  def update_rows grad_hash  \n    if grad_hash[:rows].length == 1 # Set single temperature\n      row = grad_hash[:rows].values.first\n      grad_hash[:rows] = { row.min.to_s => row.sort }\n      grad_hash[:bins] = [row.min]\n    elsif grad_hash[:rows].length == 2 # Set the upper and lower temperature bounds\n      rows = grad_hash[:rows].values\n      grad_hash[:rows] = { rows.first.min.to_s => rows.first.sort, rows.last.min.to_s => rows.last.sort }\n      grad_hash[:bins] = [grad_hash[:rows].keys.min.to_f, grad_hash[:rows].keys.max.to_f].sort\n    end\n  end\n\n  def num_bins_with_any_temps_set grad_set\n    grad_set.map { |gh| gh[:rows].values.inject(0) { |sum, ts| sum + (ts.any? ? 1 : 0) } }\n  end\n\n  def find_highest_scoring_hash_and_bin grad_set, grad_hash\n    high_score_hash_and_bin = nil\n    grad_set.each { |gh|\n      next if gh == grad_hash || gh[:rows].length <= 2\n      gh[:rows].each { |b, ts|\n        high_score_hash_and_bin ||= { hash: gh[:rows], bin: b }\n        hs_bin = high_score_hash_and_bin[:bin]\n        hs_ts = high_score_hash_and_bin[:hash][hs_bin]\n        if score_temps(ts, b.to_f) > score_temps(hs_ts, hs_bin.to_f)\n          high_score_hash_and_bin = { hash: gh[:rows], bin: b }\n        end\n      }\n    }\n    high_score_hash_and_bin || { hash: {}, bin: \"\" }\n  end\n\n  def therm_format grad_set\n    str = \"\"\n    grad_set.each_with_index { |grad_hash, idx|\n      str += \"\\n#{\"Therm #{idx + 1}:\"} Set gradient #{grad_hash[:bins].first}-#{grad_hash[:bins].last}\"\n      grad_hash[:rows].each { |b, ts|\n        str += \"\\n    #{b}: #{ts.to_s}\"\n      }\n    }\n    str\n  end\nend',11,'Library','2017-10-02 16:30:32','2017-10-27 05:07:16',NULL),(949,'source','# Library code here',12,'Library','2017-10-02 16:31:18','2017-10-02 16:31:30',NULL),(950,'source','module Cloning\n  \n  def check_concentration operations, input_name\n    items = operations.collect { |op| op.input_array(input_name).items.select { |i| i.get(:concentration).nil? } }.flatten.uniq\n    \n    cc = show do \n      title \"Please nanodrop the following #{items.first.object_type.name.pluralize}\"\n      note \"Please nanodrop the following #{items.first.object_type.name.pluralize}:\"\n      items.each do |i|\n        get \"number\", var: \"c#{i.id}\", label: \"#{i} item\", default: 42\n      end\n    end if items.any?\n    \n    items.each do |i|\n      i.associate :concentration, cc[\"c#{i.id}\".to_sym]\n    end\n  end\n  \n    \n  # The check_volumes method will have the lab tech ensure that the given input item volumes are above a certain minimum amount, \n  # for each operation. The inputs to check are specified in an array parameter. \n  # The minimum volume is specified in mL on a per-operation basis using the the value stored in op.temporary[<vol_sym>],\n  # where vol_sym is a symbol name of your choice. \n  # Contamination can be checked for too, with the additional option parameter check_contam: true\n  # After determining which inputs for which ops are low volume, this method passes off a hash of \'items -> lists of ops\' to your rebuilder function specified by name as string or symbol in the callback argument.\n  # when the callback method returns, check_volumes loops back and checks the volumes again of the newly assigned unverified input items, and repeats this loop until all given inputs for all ops are verified for their volume.\n  # for a detailed example of how this method can be used, look at the method call in make PCR fragment, and the callback function make_aliquots_from_stock\n  def check_volumes inputs, vol_sym, callback, options = {}  \n    \n    ops_by_item = Hash.new(0)\n    operations.running.each do |op|\n      inputs.each do |input|\n        if ops_by_item.keys.include? op.input(input).item\n          ops_by_item[op.input(input).item].push op\n        else\n          ops_by_item[op.input(input).item] = [op] \n        end\n      end\n    end\n      \n    # while any operations for any of the specified inputs are unverified, check the volumes again and send any bad op/input combos to rebuilder function\n    while ops_by_item.keys.any?\n      verify_data = show do\n        title \"Verify enough volume of each #{inputs.to_sentence(last_word_connector: \", or\")} exists#{options[:check_contam] ? \", or note if contamination is present\" : \"\"}\"\n        \n        ops_by_item.each do |item, ops| \n          volume = 0.0\n          ops.each { |op| volume += op.temporary[vol_sym] }\n          volume = (volume*100).round / 100.0\n          choices = options[:check_contam] ? [\"Yes\", \"No\", \"Contamination is present\"] : [\"Yes\", \"No\"]\n          select choices, var: \"#{item.id}\", label: \"Is there at least #{volume} µL of #{item.id}?\", default: 0\n        end\n      end\n      ops_by_item.each do |item, ops|\n        if verify_data[\"#{item.id}\".to_sym] == \"Yes\"\n          ops_by_item.except! item\n        elsif verify_data[\"#{item.id}\".to_sym] == \"Contamination is present\"\n          item.associate(:contaminated, \"Yes\")\n        end\n      end\n      method(callback.to_sym).call(ops_by_item, inputs) if ops_by_item.keys.any?\n    end\n  end\n  \n  # a common callback for check_volume.\n  # takes in lists of all ops that have input aliquots with insufficient volume, sorted by item,\n  # and takes in the inputs which were checked for those ops.\n  # Deletes bad items and remakes each primer aliquots from primer stock\n  def make_aliquots_from_stock bad_ops_by_item, inputs\n    # bad_ops_by_item is accessible by bad_ops_by_item[item] = [op1, op2, op3...]\n    # where each op has a bad volume reading for the given item\n    \n    # Construct list of all stocks needed for making aliquots. Error ops for which no primer stock is available\n    # for every non-errored op that has low item volume,\n    # replace the old aliquot item with a new one. \n    aliquots_to_make = 0\n    stocks = []\n    ops_by_fresh_item = Hash.new(0)\n    found_items = []\n    stock_table = [[\"Primer Stock ID\", \"Primer Aliquot ID\"]]\n    transfer_table = [[\"Old Aliquot ID\", \"New Aliquot ID\"]]\n    bad_ops_by_item.each do |item, ops|\n        \n      #first, check to see if there is a replacement aliquot availalbe in the inventory\n      fresh_item = item.sample.in(\"Primer Aliquot\").reject {|i| i == item }.first\n      \n      if fresh_item\n        #if a replacement item was found in the inventory, snag it\n        found_items.push fresh_item\n      else\n        # no replacement, found, lets try making one.\n        stock = item.sample.in(\"Primer Stock\").first\n        if stock.nil?\n          # no stock found, replacement could not be made or found: erroring operation\n          ops.each { |op| op.error :no_primer_stock, \"aliquot #{item.id} was bad and a replacement could not be made. You need to order a primer stock for primer sample #{item.sample.id}.\" }\n          bad_ops_by_item.except! item\n        else\n          stocks.push stock\n          aliquots_to_make += 1\n          fresh_item = produce new_sample item.sample.name, of: item.sample.sample_type.name, as: item.object_type.name\n          stock_table.push [stock.id, {content: fresh_item.id, check: true}]\n        end\n      end\n      \n      if fresh_item\n        # for the items where a replacement is able to be found or made, update op item info\n        item.mark_as_deleted\n        bad_ops_by_item.except! item\n        ops_by_fresh_item[fresh_item] = ops\n        ops.each do |op| \n          input = inputs.find { |input| op.input(input).item == item }\n          op.input(input).set item: fresh_item\n        end\n        if item.get(:contaminated) != \"Yes\"\n          transfer_table.push [item.id, {content: fresh_item.id, check: true}]    \n        end\n      end\n    end\n    \n    take found_items, interactive: true if found_items.any?\n    #items are guilty untill proven innocent. all the fresh items will be put back into the list of items to check for volume\n    bad_ops_by_item.merge! ops_by_fresh_item\n    take stocks, interactive: true if stocks.any?\n    \n    # label new aliquot tubes and dilute\n    show do \n      title \"Grab 1.5 mL tubes\"\n      \n      note \"Grab #{aliquots_to_make} 1.5 mL tubes\"\n      note \"Label each tube with the following ids: #{bad_ops_by_item.keys.reject { |item| found_items.include? item }.map { |item| item.id }.sort.to_sentence}\"\n      note \"Using the 100 uL pipette, pipette 90uL of water into each tube\"\n    end if bad_ops_by_item.keys.reject { |item| found_items.include? item }.any?\n  \n    # make new aliquots\n    show do \n      title \"Transfer primer stock into primer aliquot\"\n      \n      note \"Pipette 10 uL of the primer stock into the primer aliquot according to the following table:\"\n      table stock_table\n    end if stocks.any?\n    \n    \n    if transfer_table.length > 1\n      show do\n        title \"Transfer Residual Primer\"\n        \n        note \"Transfer primer residue from the low volume aliquots into the fresh aliquots according to the following table:\"\n        table transfer_table\n      end\n    end\n    \n    release stocks, interactive: true if stocks.any?\n  end\n\n  \n  \n  \n  # Associates specified associations + uploads from :from to :to. This is used primarily to pass sequencing results through items in a plasmid\'s lineage\n  #   e.g., pass_data \"sequence_verified\", \"sequencing results\", from: overnight, to: glycerol_stock\n  #   This will copy all sequencing results and the sequence_verified associations from the overnight to the glycerol stock\n  def pass_data *names, **kwargs\n    from = kwargs[:from]\n    to = kwargs[:to]\n    names.each do |name|\n      keys = from.associations.keys.select { |k| k.include? name }\n      keys.each do |k|\n        to.associate k, from.get(k), from.upload(k)\n      end\n    end\n  end\n  \nend\n\n   ',12,'Library','2017-10-02 16:31:30','2017-10-27 05:07:08',NULL),(951,'source','# Library code here',13,'Library','2017-10-02 16:31:48','2017-10-02 16:32:16',NULL),(952,'source','module Debug\n  def print_object obj\n    if [Numeric, String].any? { |c| obj.is_a? c }\n      obj\n    elsif [Array].any? { |c| obj.is_a? c }\n      obj.map { |item| print_object item }\n    elsif [Hash].any? { |c| obj.is_a? c }\n      Hash[obj.map { |k, v| [k, print_object(v)] }]\n    else\n      s = obj ? obj.id.to_s : \"\"\n      s += \" #{obj.name}\" if obj.class.method_defined? :name\n      s\n    end\n  end\n    \n  def log_info *args\n    if debug\n      show do\n        title \"Debug slide (#{args.length} #{\"arg\".pluralize args.length})\"\n        \n        args.each do |arg|\n          note \"#{arg.class}: #{print_object arg}\"\n        end\n      end\n    end\n  end\nend\n',13,'Library','2017-10-02 16:32:16','2017-10-02 16:32:16',NULL),(953,'protocol','needs \"Cloning Libs/Cloning\"\r\nneeds \"Cloning Libs/Gradient PCR\"\r\n\r\nclass Protocol\r\n    \r\n  # I/O\r\n  FWD = \"Forward Primer\"\r\n  REV = \"Reverse Primer\"\r\n  TEMPLATE = \"Template\"\r\n  FRAGMENT = \"Fragment\"\r\n  \r\n  # get the gradient PCR magic\r\n  include Cloning\r\n  include GradientPCR\r\n\r\n\r\n\r\n  def main\r\n      \r\n    if debug\r\n      operations.retrieve interactive: false\r\n      item = operations[0].input(FWD).item\r\n      operations.each do |op|\r\n        if rand(2) < 1\r\n          op.input(REV).set item: item\r\n          op.input(FWD).set item: item\r\n        end\r\n      end\r\n    end\r\n      \r\n    # grab all necessary items\r\n    dilute_stocks_and_retrieve TEMPLATE\r\n    kapa_stock_item = find(:sample, name: \"Kapa HF Master Mix\")[0].in(\"Enzyme Stock\")[0]\r\n    take [kapa_stock_item], interactive: true,  method: \"boxes\"\r\n    \r\n    #check the volumes of input primers for all operations, and ensure they are sufficient\r\n    operations.each { |op| op.temporary[:primer_vol] = 2.5 }\r\n    check_volumes [FWD, REV], :primer_vol, :make_aliquots_from_stock, check_contam: true\r\n    \r\n    # build a pcrs hash that groups pcr by T Anneal\r\n    pcrs = build_pcrs_hash\r\n\r\n    # generate a table for stripwells\r\n    stripwell_tab = build_stripwell_table pcrs\r\n    \r\n    # prepare and label stripwells for PCR\r\n    prepare_stripwells stripwell_tab\r\n    \r\n    # add templates to stripwells for pcr\r\n    load_templates pcrs\r\n    \r\n    # add primers to stripwells\r\n    load_primers pcrs\r\n\r\n    # add kapa master mix to stripwells\r\n    add_mix stripwell_tab, kapa_stock_item\r\n    \r\n    # run the thermocycler\r\n    start_pcr pcrs\r\n    \r\n    # store \r\n    operations.running.store io: \"input\", interactive: true, method: \"boxes\"\r\n    release [kapa_stock_item], interactive: true\r\n    \r\n    return {}\r\n  end\r\n  \r\n  # dilute to 1ng/uL stocks if necessary\r\n  def dilute_stocks_and_retrieve input\r\n  \r\n    # only use inputs that haven\'t been diluted and that don\'t have diluted stocks already\r\n    ops_w_undiluted_template = operations.reject { true }\r\n    operations.each do |op|\r\n        next if op.input(input).object_type.name.include?(\"1 ng/L\")\r\n        \r\n        sample = op.input(input).sample\r\n        ot_name = op.input(input).object_type.name.include?(\"Unverified\") ? \"1 ng/µL Plasmid Stock\" : \"1 ng/µL \" + sample.sample_type.name + \" Stock\"\r\n        diluted_stock = sample.in(ot_name).first\r\n        \r\n        if diluted_stock\r\n            op.input(input).set item: diluted_stock\r\n        else\r\n            new_stock = produce new_sample sample.name, of: sample.sample_type.name, as: ot_name\r\n            op.temporary[:diluted_stock] = new_stock\r\n            \r\n            ops_w_undiluted_template.push op\r\n        end\r\n    end\r\n    \r\n    # retrieve operation inputs (doesn\'t include the stocks replaced by diluted stocks above)\r\n    ops_w_undiluted_template.retrieve\r\n    \r\n    # all stocks may be diluted already\r\n    if ops_w_undiluted_template.empty?\r\n        operations.retrieve\r\n        return\r\n    end\r\n    \r\n    # ensure concentrations\r\n    check_concentration ops_w_undiluted_template, input\r\n    \r\n    # dilute stocks\r\n    show do\r\n      title \"Make 1 ng/µL Template Stocks\"\r\n      \r\n      check \"Grab #{ops_w_undiluted_template.length} 1.5 mL tubes, label them with #{ops_w_undiluted_template.map { |op| op.temporary[:diluted_stock].id }.join(\", \")}\"\r\n      check \"Add template stocks and water into newly labeled 1.5 mL tubes following the table below\"\r\n      \r\n      table ops_w_undiluted_template\r\n          .start_table\r\n          .custom_column(heading: \"Newly-labeled tube\") { |op| op.temporary[:diluted_stock].id }\r\n          .input_item(input, heading: \"Template stock, 1 L\", checkable: true)\r\n          .custom_column(heading: \"Water volume\", checkable: true) { |op| op.input(input).item.get(:concentration).to_f - 1 }\r\n          .end_table\r\n      check \"Vortex and then spin down for a few seconds\"\r\n    end\r\n    \r\n    # return input stocks\r\n    release ops_w_undiluted_template.map { |op| op.input(input).item }, interactive: true, method: \"boxes\"\r\n    \r\n    # retrieve the rest of the inputs\r\n    operations.reject { |op| ops_w_undiluted_template.include? op }.retrieve\r\n    \r\n    # set diluted stocks as inputs\r\n    ops_w_undiluted_template.each { |op| op.input(input).set item: op.temporary[:diluted_stock] }\r\n  end\r\n  \r\n  \r\n  # TODO dilute from stock if item is aliquot\r\n  # Callback for check_volume.\r\n  # takes in lists of all ops that have input aliquots with insufficient volume, sorted by item,\r\n  # and takes in the inputs which were checked for those ops.\r\n  # Deletes bad items and remakes each from primer stock\r\n#   def make_aliquots_from_stock bad_ops_by_item, inputs\r\n#     # bad_ops_by_item is accessible by bad_ops_by_item[item] = [op1, op2, op3...]\r\n#     # where each op has a bad volume reading for the given item\r\n    \r\n#     # Construct list of all stocks needed for making aliquots. Error ops for which no primer stock is available\r\n#     # for every non-errored op that has low item volume,\r\n#     # replace the old aliquot item with a new one. \r\n#     aliquots_to_make = 0\r\n#     stocks = []\r\n#     ops_by_fresh_item = Hash.new(0)\r\n#     stock_table = [[\"Primer Stock ID\", \"Primer Aliquot ID\"]]\r\n#     transfer_table = [[\"Old Aliquot ID\", \"New Aliquot ID\"]]\r\n#     bad_ops_by_item.each do |item, ops|\r\n#       stock = item.sample.in(\"Primer Stock\").first ######## items is a string?\r\n#       if stock.nil?\r\n#         ops.each { |op| op.error :no_primer, \"You need to order a primer stock for primer sample #{item.sample.id}.\" }\r\n#         bad_ops_by_item.except! item\r\n#       else\r\n#         stocks.push stock\r\n#         aliquots_to_make += 1\r\n#         item.mark_as_deleted\r\n#         fresh_item = produce new_sample item.sample.name, of: item.sample.sample_type.name, as: item.object_type.name\r\n#         bad_ops_by_item.except! item\r\n#         ops_by_fresh_item[fresh_item] = ops\r\n#         ops.each do |op| \r\n#           input = inputs.find { |input| op.input(input).item == item }\r\n#           op.input(input).set item: fresh_item\r\n#         end\r\n#         stock_table.push [stock.id, {content: fresh_item.id, check: true}]\r\n#         if item.get(:contaminated) != \"Yes\"\r\n#           transfer_table.push [item.id, {content: fresh_item.id, check: true}]    \r\n#         end\r\n#       end\r\n#     end\r\n    \r\n#     bad_ops_by_item.merge! ops_by_fresh_item\r\n#     take stocks, interactive: true\r\n    \r\n#     # label new aliquot tubes and dilute\r\n#     show do \r\n#       title \"Grab 1.5 mL tubes\"\r\n      \r\n#       note \"Grab #{aliquots_to_make} 1.5 mL tubes\"\r\n#       note \"Label each tube with the following ids: #{bad_ops_by_item.keys.map { |item| item.id }.sort.to_sentence}\"\r\n#       note \"Using the 100 uL pipette, pipette 90uL of water into each tube\"\r\n#     end\r\n  \r\n#     # make new aliquots\r\n#     show do \r\n#       title \"Transfer primer stock into primer aliquot\"\r\n      \r\n#       note \"Pipette 10 uL of the primer stock into the primer aliquot according to the following table:\"\r\n#       table stock_table\r\n#     end\r\n    \r\n    \r\n#     if transfer_table.length > 1\r\n#       show do\r\n#         title \"Transfer Residual Primer\"\r\n        \r\n#         note \"Transfer primer residue from the low volume aliquots into the fresh aliquots according to the following table:\"\r\n#         table transfer_table\r\n#       end\r\n#     end\r\n    \r\n#     release stocks, interactive: true\r\n#   end\r\n  \r\n  # build a pcrs hash that groups pcr by T Anneal\r\n  def build_pcrs_hash\r\n    pcrs = distribute_pcrs operations.running, 4\r\n    pcrs.each do |pcr|\r\n      lengths = pcr[:ops_by_bin].values.flatten.collect { |op| op.input(TEMPLATE).sample.properties[\"Length\"] }\r\n      extension_time = (lengths.max)/1000.0*30\r\n      # adding more extension time for longer size PCR.\r\n      if lengths.max < 2000\r\n        extension_time += 30\r\n      elsif lengths.max < 3000\r\n        extension_time += 60\r\n      else\r\n        extension_time += 90\r\n      end\r\n      extension_time = 3 * 60 if extension_time < 3 * 60\r\n      pcr[:mm], pcr[:ss] = (extension_time.to_i).divmod(60)\r\n      pcr[:mm] = \"0#{pcr[:mm]}\" if pcr[:mm].between?(0, 9)\r\n      pcr[:ss] = \"0#{pcr[:ss]}\" if pcr[:ss].between?(0, 9)\r\n\r\n      # set up stripwells (one for each temperature bin)\r\n      pcr[:ops_by_bin].each do |bin, ops|\r\n          ops.make\r\n          pcr[:stripwells] += ops.output_collections[FRAGMENT]\r\n      end\r\n    end\r\n    pcrs\r\n  end\r\n  \r\n  # generate a table for stripwells\r\n  def build_stripwell_table pcrs\r\n    stripwells = pcrs.collect { |pcr| pcr[:stripwells] }.flatten\r\n    stripwell_tab = [[\"Stripwell\", \"Wells to pipette\"]] + stripwells.map { |sw| [\"#{sw.id} (#{sw.num_samples <= 6 ? 6 : 12} wells)\", { content: sw.non_empty_string, check: true }] }\r\n  end\r\n  \r\n  # prepare and label stripwells for PCR\r\n    def prepare_stripwells stripwell_tab\r\n    show do\r\n      title \"Label and prepare stripwells\"\r\n      \r\n      note \"Label stripwells, and pipette 19 L of molecular grade water into each based on the following table:\"\r\n      table stripwell_tab\r\n      stripwell_tab\r\n    end\r\n  end\r\n  \r\n  # add templates to stripwells for pcr\r\n  def load_templates pcrs\r\n    pcrs.each_with_index do |pcr, idx|\r\n      show do\r\n        title \"Load templates for PCR ##{idx + 1}\"\r\n        \r\n        pcr[:ops_by_bin].each do |bin, ops|\r\n          table ops\r\n              .start_table\r\n              .output_collection(FRAGMENT, heading: \"Stripwell\")\r\n              .custom_column(heading: \"Well\") { |op| op.output(FRAGMENT).column + 1 }\r\n              .input_item(TEMPLATE, heading: \"Template, 1 L\", checkable: true)\r\n              .end_table\r\n        end\r\n        warning \"Use a fresh pipette tip for each transfer.\".upcase\r\n      end\r\n    end\r\n  end\r\n  \r\n  # add primers to stripwells\r\n  def load_primers pcrs\r\n    pcrs.each_with_index do |pcr, idx|\r\n      show do\r\n        title \"Load primers for PCR ##{idx + 1}\"\r\n        \r\n        pcr[:ops_by_bin].each do |bin, ops|\r\n          table ops.start_table\r\n              .output_collection(FRAGMENT, heading: \"Stripwell\")\r\n              .custom_column(heading: \"Well\") { |op| op.output(FRAGMENT).column + 1 }\r\n              .input_item(FWD, heading: \"Forward Primer, 2.5 L\", checkable: true)\r\n              .input_item(REV, heading: \"Reverse Primer, 2.5 L\", checkable: true)\r\n              .end_table\r\n        end\r\n        warning \"Use a fresh pipette tip for each transfer.\".upcase\r\n      end\r\n    end\r\n  end\r\n  \r\n  # add kapa master mix to stripwells\r\n  def add_mix stripwell_tab, kapa_stock_item\r\n      show do\r\n          title \"Add Master Mix\"\r\n          \r\n          note \"Pipette 25 L of master mix (#{kapa_stock_item}) into stripwells based on the following table:\"\r\n          table stripwell_tab\r\n          warning \"USE A NEW PIPETTE TIP FOR EACH WELL AND PIPETTE UP AND DOWN TO MIX.\"\r\n          check \"Cap each stripwell. Press each one very hard to make sure it is sealed.\"\r\n      end\r\n  end\r\n  \r\n  # run the thermocycler and update the positions of the stripwells\r\n  def start_pcr pcrs\r\n      pcrs.each_with_index do |pcr, idx|\r\n        is_gradient = pcr[:bins].length > 1\r\n        \r\n        thermocycler = show do\r\n          if !is_gradient\r\n            title \"Start PCR ##{idx + 1} at #{pcr[:bins].first} C\"\r\n            \r\n            check \"Place the stripwell(s) #{pcr[:stripwells].collect { |sw| \"#{sw}\" }.join(\", \")} into an available thermal cycler and close the lid.\"\r\n            get \"text\", var: \"name\", label: \"Enter the name of the thermocycler used\", default: \"TC1\"\r\n            check \"Click \'Home\' then click \'Saved Protocol\'. Choose \'YY\' and then \'CLONEPCR\'.\"\r\n            check \"Set the anneal temperature to #{pcr[:bins].first}. This is the 3rd temperature.\"\r\n          else\r\n            title \"Start PCR ##{idx + 1} (gradient) over range #{pcr[:bins].first}-#{pcr[:bins].last} C\"\r\n            check \"Click \'Home\' then click \'Saved Protocol\'. Choose \'YY\' and then \'CLONEPCR\'.\"\r\n            check \"Click on annealing temperature -> options, and check the gradient checkbox.\"\r\n            check \"Set the annealing temperature range to be #{pcr[:bins].first}-#{pcr[:bins].last} C.\"\r\n            note \"The following stripwells are ordered front to back.\"\r\n            pcr[:stripwells].map.with_index do |sw, idx|\r\n              temp = pcr[:ops_by_bin].keys[idx].to_f\r\n              row_num = pcr[:bins].index temp\r\n              row_letter = (\'H\'.ord - row_num).chr\r\n              row_letter = \'A\' if pcr[:bins].length == 2 && idx == 1\r\n              check \"Place the stripwell #{sw} into Row #{row_letter} (#{temp} C) of an available thermal cycler.\"\r\n            end\r\n            get \"text\", var: \"name\", label: \"Enter the name of the thermocycler used\", default: \"TC1\"\r\n          end\r\n          check \"Set the 4th time (extension time) to be #{pcr[:mm]}:#{pcr[:ss]}.\"\r\n          check \"Press \'Run\' and select 50 L.\"\r\n        end\r\n        \r\n        # set the location of the stripwell\r\n        pcr[:stripwells].flatten.each do |sw|\r\n          sw.move thermocycler[:name]\r\n        end\r\n      end\r\n  end\r\nend',183,'OperationType','2017-10-02 17:59:15','2017-10-02 18:01:56',NULL),(954,'protocol','needs \"Cloning Libs/Cloning\"\r\nneeds \"Cloning Libs/Gradient PCR\"\r\n\r\nclass Protocol\r\n    \r\n  # I/O\r\n  FWD = \"Forward Primer\"\r\n  REV = \"Reverse Primer\"\r\n  TEMPLATE = \"Template\"\r\n  FRAGMENT = \"Fragment\"\r\n  \r\n  # get the gradient PCR magic\r\n  include Cloning\r\n  include GradientPCR\r\n\r\n\r\n\r\n  def main\r\n      \r\n    if debug\r\n      item = operations[0].input(FWD).item\r\n      operations[0].input(REV).set item: item\r\n      operations[1].input(REV).set item: item\r\n      operations[3].input(FWD).set item: item\r\n    end\r\n      \r\n    # grab all necessary items\r\n    dilute_stocks_and_retrieve TEMPLATE\r\n    kapa_stock_item = find(:sample, name: \"Kapa HF Master Mix\")[0].in(\"Enzyme Stock\")[0]\r\n    take [kapa_stock_item], interactive: true,  method: \"boxes\"\r\n    \r\n    #check the volumes of input primers for all operations, and ensure they are sufficient\r\n    operations.each { |op| op.temporary[:primer_vol] = 2.5 }\r\n    check_volumes [FWD, REV], :primer_vol, :make_aliquots_from_stock, check_contam: true\r\n    \r\n    # build a pcrs hash that groups pcr by T Anneal\r\n    pcrs = build_pcrs_hash\r\n\r\n    # generate a table for stripwells\r\n    stripwell_tab = build_stripwell_table pcrs\r\n    \r\n    # prepare and label stripwells for PCR\r\n    prepare_stripwells stripwell_tab\r\n    \r\n    # add templates to stripwells for pcr\r\n    load_templates pcrs\r\n    \r\n    # add primers to stripwells\r\n    load_primers pcrs\r\n\r\n    # add kapa master mix to stripwells\r\n    add_mix stripwell_tab, kapa_stock_item\r\n    \r\n    # run the thermocycler\r\n    start_pcr pcrs\r\n    \r\n    # store \r\n    operations.running.store io: \"input\", interactive: true, method: \"boxes\"\r\n    release [kapa_stock_item], interactive: true\r\n    \r\n    return {}\r\n  end\r\n  \r\n  # dilute to 1ng/uL stocks if necessary\r\n  def dilute_stocks_and_retrieve input\r\n  \r\n    # only use inputs that haven\'t been diluted and that don\'t have diluted stocks already\r\n    ops_w_undiluted_template = operations.reject { true }\r\n    operations.each do |op|\r\n        next if op.input(input).object_type.name.include?(\"1 ng/µL\")\r\n        \r\n        sample = op.input(input).sample\r\n        ot_name = op.input(input).object_type.name.include?(\"Unverified\") ? \"1 ng/µL Plasmid Stock\" : \"1 ng/µL \" + sample.sample_type.name + \" Stock\"\r\n        diluted_stock = sample.in(ot_name).first\r\n        \r\n        if diluted_stock\r\n            op.input(input).set item: diluted_stock\r\n        else\r\n            new_stock = produce new_sample sample.name, of: sample.sample_type.name, as: ot_name\r\n            op.temporary[:diluted_stock] = new_stock\r\n            \r\n            ops_w_undiluted_template.push op\r\n        end\r\n    end\r\n    \r\n    # retrieve operation inputs (doesn\'t include the stocks replaced by diluted stocks above)\r\n    ops_w_undiluted_template.retrieve\r\n    \r\n    # all stocks may be diluted already\r\n    if ops_w_undiluted_template.empty?\r\n        operations.retrieve\r\n        return\r\n    end\r\n    \r\n    # ensure concentrations\r\n    check_concentration ops_w_undiluted_template, input\r\n    \r\n    # dilute stocks\r\n    show do\r\n      title \"Make 1 ng/µL Template Stocks\"\r\n      \r\n      check \"Grab #{ops_w_undiluted_template.length} 1.5 mL tubes, label them with #{ops_w_undiluted_template.map { |op| op.temporary[:diluted_stock].id }.join(\", \")}\"\r\n      check \"Add template stocks and water into newly labeled 1.5 mL tubes following the table below\"\r\n      \r\n      table ops_w_undiluted_template\r\n          .start_table\r\n          .custom_column(heading: \"Newly-labeled tube\") { |op| op.temporary[:diluted_stock].id }\r\n          .input_item(input, heading: \"Template stock, 1 µL\", checkable: true)\r\n          .custom_column(heading: \"Water volume\", checkable: true) { |op| op.input(input).item.get(:concentration).to_f - 1 }\r\n          .end_table\r\n      check \"Vortex and then spin down for a few seconds\"\r\n    end\r\n    \r\n    # return input stocks\r\n    release ops_w_undiluted_template.map { |op| op.input(input).item }, interactive: true, method: \"boxes\"\r\n    \r\n    # retrieve the rest of the inputs\r\n    operations.reject { |op| ops_w_undiluted_template.include? op }.retrieve\r\n    \r\n    # set diluted stocks as inputs\r\n    ops_w_undiluted_template.each { |op| op.input(input).set item: op.temporary[:diluted_stock] }\r\n  end\r\n  \r\n  \r\n  # TODO dilute from stock if item is aliquot\r\n  # Callback for check_volume.\r\n  # takes in lists of all ops that have input aliquots with insufficient volume, sorted by item,\r\n  # and takes in the inputs which were checked for those ops.\r\n  # Deletes bad items and remakes each from primer stock\r\n  def make_aliquots_from_stock bad_ops_by_item, inputs\r\n    # bad_ops_by_item is accessible by bad_ops_by_item[item] = [op1, op2, op3...]\r\n    # where each op has a bad volume reading for the given item\r\n    \r\n    # Construct list of all stocks needed for making aliquots. Error ops for which no primer stock is available\r\n    # for every non-errored op that has low item volume,\r\n    # replace the old aliquot item with a new one. \r\n    aliquots_to_make = 0\r\n    stocks = []\r\n    ops_by_fresh_item = Hash.new(0)\r\n    stock_table = [[\"Primer Stock ID\", \"Primer Aliquot ID\"]]\r\n    transfer_table = [[\"Old Aliquot ID\", \"New Aliquot ID\"]]\r\n    bad_ops_by_item.each do |item, ops|\r\n      stock = item.sample.in(\"Primer Stock\").first ######## items is a string?\r\n      if stock.nil?\r\n        ops.each { |op| op.error :no_primer, \"You need to order a primer stock for primer sample #{item.sample.id}.\" }\r\n        bad_ops_by_item.except! item\r\n      else\r\n        stocks.push stock\r\n        aliquots_to_make += 1\r\n        item.mark_as_deleted\r\n        fresh_item = produce new_sample item.sample.name, of: item.sample.sample_type.name, as: item.object_type.name\r\n        bad_ops_by_item.except! item\r\n        ops_by_fresh_item[fresh_item] = ops\r\n        ops.each do |op| \r\n          input = inputs.find { |input| op.input(input).item == item }\r\n          op.input(input).set item: fresh_item\r\n        end\r\n        stock_table.push [stock.id, {content: fresh_item.id, check: true}]\r\n        if item.get(:contaminated) != \"Yes\"\r\n          transfer_table.push [item.id, {content: fresh_item.id, check: true}]    \r\n        end\r\n      end\r\n    end\r\n    \r\n    bad_ops_by_item.merge! ops_by_fresh_item\r\n    take stocks, interactive: true\r\n    \r\n    # label new aliquot tubes and dilute\r\n    show do \r\n      title \"Grab 1.5 mL tubes\"\r\n      \r\n      note \"Grab #{aliquots_to_make} 1.5 mL tubes\"\r\n      note \"Label each tube with the following ids: #{bad_ops_by_item.keys.map { |item| item.id }.sort.to_sentence}\"\r\n      note \"Using the 100 uL pipette, pipette 90uL of water into each tube\"\r\n    end\r\n  \r\n    # make new aliquots\r\n    show do \r\n      title \"Transfer primer stock into primer aliquot\"\r\n      \r\n      note \"Pipette 10 uL of the primer stock into the primer aliquot according to the following table:\"\r\n      table stock_table\r\n    end\r\n    \r\n    \r\n    if transfer_table.length > 1\r\n      show do\r\n        title \"Transfer Residual Primer\"\r\n        \r\n        note \"Transfer primer residue from the low volume aliquots into the fresh aliquots according to the following table:\"\r\n        table transfer_table\r\n      end\r\n    end\r\n    \r\n    release stocks, interactive: true\r\n  end\r\n  \r\n  # build a pcrs hash that groups pcr by T Anneal\r\n  def build_pcrs_hash\r\n    pcrs = distribute_pcrs operations.running, 4\r\n    pcrs.each do |pcr|\r\n      lengths = pcr[:ops_by_bin].values.flatten.collect { |op| op.input(TEMPLATE).sample.properties[\"Length\"] }\r\n      extension_time = (lengths.max)/1000.0*30\r\n      # adding more extension time for longer size PCR.\r\n      if lengths.max < 2000\r\n        extension_time += 30\r\n      elsif lengths.max < 3000\r\n        extension_time += 60\r\n      else\r\n        extension_time += 90\r\n      end\r\n      extension_time = 3 * 60 if extension_time < 3 * 60\r\n      pcr[:mm], pcr[:ss] = (extension_time.to_i).divmod(60)\r\n      pcr[:mm] = \"0#{pcr[:mm]}\" if pcr[:mm].between?(0, 9)\r\n      pcr[:ss] = \"0#{pcr[:ss]}\" if pcr[:ss].between?(0, 9)\r\n\r\n      # set up stripwells (one for each temperature bin)\r\n      pcr[:ops_by_bin].each do |bin, ops|\r\n          ops.make\r\n          pcr[:stripwells] += ops.output_collections[FRAGMENT]\r\n      end\r\n    end\r\n    pcrs\r\n  end\r\n  \r\n  # generate a table for stripwells\r\n  def build_stripwell_table pcrs\r\n    stripwells = pcrs.collect { |pcr| pcr[:stripwells] }.flatten\r\n    stripwell_tab = [[\"Stripwell\", \"Wells to pipette\"]] + stripwells.map { |sw| [\"#{sw.id} (#{sw.num_samples <= 6 ? 6 : 12} wells)\", { content: sw.non_empty_string, check: true }] }\r\n  end\r\n  \r\n  # prepare and label stripwells for PCR\r\n    def prepare_stripwells stripwell_tab\r\n    show do\r\n      title \"Label and prepare stripwells\"\r\n      \r\n      note \"Label stripwells, and pipette 19 µL of molecular grade water into each based on the following table:\"\r\n      table stripwell_tab\r\n      stripwell_tab\r\n    end\r\n  end\r\n  \r\n  # add templates to stripwells for pcr\r\n  def load_templates pcrs\r\n    pcrs.each_with_index do |pcr, idx|\r\n      show do\r\n        title \"Load templates for PCR ##{idx + 1}\"\r\n        \r\n        pcr[:ops_by_bin].each do |bin, ops|\r\n          table ops\r\n              .start_table\r\n              .output_collection(FRAGMENT, heading: \"Stripwell\")\r\n              .custom_column(heading: \"Well\") { |op| op.output(FRAGMENT).column + 1 }\r\n              .input_item(TEMPLATE, heading: \"Template, 1 µL\", checkable: true)\r\n              .end_table\r\n        end\r\n        warning \"Use a fresh pipette tip for each transfer.\".upcase\r\n      end\r\n    end\r\n  end\r\n  \r\n  # add primers to stripwells\r\n  def load_primers pcrs\r\n    pcrs.each_with_index do |pcr, idx|\r\n      show do\r\n        title \"Load primers for PCR ##{idx + 1}\"\r\n        \r\n        pcr[:ops_by_bin].each do |bin, ops|\r\n          table ops.start_table\r\n              .output_collection(FRAGMENT, heading: \"Stripwell\")\r\n              .custom_column(heading: \"Well\") { |op| op.output(FRAGMENT).column + 1 }\r\n              .input_item(FWD, heading: \"Forward Primer, 2.5 µL\", checkable: true)\r\n              .input_item(REV, heading: \"Reverse Primer, 2.5 µL\", checkable: true)\r\n              .end_table\r\n        end\r\n        warning \"Use a fresh pipette tip for each transfer.\".upcase\r\n      end\r\n    end\r\n  end\r\n  \r\n  # add kapa master mix to stripwells\r\n  def add_mix stripwell_tab, kapa_stock_item\r\n      show do\r\n          title \"Add Master Mix\"\r\n          \r\n          note \"Pipette 25 µL of master mix (#{kapa_stock_item}) into stripwells based on the following table:\"\r\n          table stripwell_tab\r\n          warning \"USE A NEW PIPETTE TIP FOR EACH WELL AND PIPETTE UP AND DOWN TO MIX.\"\r\n          check \"Cap each stripwell. Press each one very hard to make sure it is sealed.\"\r\n      end\r\n  end\r\n  \r\n  # run the thermocycler and update the positions of the stripwells\r\n  def start_pcr pcrs\r\n      pcrs.each_with_index do |pcr, idx|\r\n        is_gradient = pcr[:bins].length > 1\r\n        \r\n        thermocycler = show do\r\n          if !is_gradient\r\n            title \"Start PCR ##{idx + 1} at #{pcr[:bins].first} C\"\r\n            \r\n            check \"Place the stripwell(s) #{pcr[:stripwells].collect { |sw| \"#{sw}\" }.join(\", \")} into an available thermal cycler and close the lid.\"\r\n            get \"text\", var: \"name\", label: \"Enter the name of the thermocycler used\", default: \"TC1\"\r\n            check \"Click \'Home\' then click \'Saved Protocol\'. Choose \'YY\' and then \'CLONEPCR\'.\"\r\n            check \"Set the anneal temperature to #{pcr[:bins].first}. This is the 3rd temperature.\"\r\n          else\r\n            title \"Start PCR ##{idx + 1} (gradient) over range #{pcr[:bins].first}-#{pcr[:bins].last} C\"\r\n            check \"Click \'Home\' then click \'Saved Protocol\'. Choose \'YY\' and then \'CLONEPCR\'.\"\r\n            check \"Click on annealing temperature -> options, and check the gradient checkbox.\"\r\n            check \"Set the annealing temperature range to be #{pcr[:bins].first}-#{pcr[:bins].last} C.\"\r\n            note \"The following stripwells are ordered front to back.\"\r\n            pcr[:stripwells].map.with_index do |sw, idx|\r\n              temp = pcr[:ops_by_bin].keys[idx].to_f\r\n              row_num = pcr[:bins].index temp\r\n              row_letter = (\'H\'.ord - row_num).chr\r\n              row_letter = \'A\' if pcr[:bins].length == 2 && idx == 1\r\n              check \"Place the stripwell #{sw} into Row #{row_letter} (#{temp} C) of an available thermal cycler.\"\r\n            end\r\n            get \"text\", var: \"name\", label: \"Enter the name of the thermocycler used\", default: \"TC1\"\r\n          end\r\n          check \"Set the 4th time (extension time) to be #{pcr[:mm]}:#{pcr[:ss]}.\"\r\n          check \"Press \'Run\' and select 50 µL.\"\r\n        end\r\n        \r\n        # set the location of the stripwell\r\n        pcr[:stripwells].flatten.each do |sw|\r\n          sw.move thermocycler[:name]\r\n        end\r\n      end\r\n  end\r\nend',183,'OperationType','2017-10-02 18:01:56','2017-10-27 05:09:15',NULL),(955,'protocol','# This is a default, one-size-fits all protocol that shows how you can \n# access the inputs and outputs of the operations associated with a job.\n# Add specific instructions for this protocol!\n\nclass Protocol\n\n  def main\n\n    operations.retrieve.make\n    \n    tin  = operations.io_table \"input\"\n    tout = operations.io_table \"output\"\n    \n    show do \n      title \"Input Table\"\n      table tin.all.render\n    end\n    \n    show do \n      title \"Output Table\"\n      table tout.all.render\n    end\n    \n    operations.store\n    \n    return {}\n    \n  end\n\nend\n',186,'OperationType','2017-10-25 18:08:41','2017-10-27 01:35:35',NULL),(956,'precondition','def precondition(op)\n  true\nend',186,'OperationType','2017-10-25 18:08:41','2017-10-25 18:08:41',NULL),(957,'cost_model','def cost(op)\n  { labor: 0, materials: 0 }\nend',186,'OperationType','2017-10-25 18:08:41','2017-10-27 04:28:40',NULL),(958,'documentation','Documentation here. Start with a paragraph, not a heading or title, as in most views, the title will be supplied by the view.',186,'OperationType','2017-10-25 18:08:41','2017-10-27 04:31:16',NULL),(959,'protocol','# This is a default, one-size-fits all protocol that shows how you can \n# access the inputs and outputs of the operations associated with a job.\n# Add specific instructions for this protocol!\n\nclass Protocol\n\n  def main\n\n    operations.retrieve.make\n    \n    tin  = operations.io_table \"input\"\n    tout = operations.io_table \"output\"\n    \n    show do \n      title \"Input Table\"\n      table tin.all.render\n    end\n    \n    show do \n      title \"Output Table\"\n      table tout.all.render\n    end\n    \n    operations.store\n    \n    return {}\n    \n  end\n\nend\n',187,'OperationType','2017-10-25 18:09:36','2017-10-27 01:35:46',NULL),(960,'precondition','def precondition(op)\n  true\nend',187,'OperationType','2017-10-25 18:09:36','2017-10-27 01:25:14',NULL),(961,'cost_model','def cost(op)\n  { labor: 0, materials: 0 }\nend',187,'OperationType','2017-10-25 18:09:36','2017-10-27 04:28:51',NULL),(962,'documentation','Documentation here. Start with a paragraph, not a heading or title, as in most views, the title will be supplied by the view.',187,'OperationType','2017-10-25 18:09:36','2017-10-27 04:31:24',NULL),(963,'protocol','# This is a default, one-size-fits all protocol that shows how you can \n# access the inputs and outputs of the operations associated with a job.\n# Add specific instructions for this protocol!\n\nclass Protocol\n\n  def main\n\n    operations.retrieve.make\n    \n    tin  = operations.io_table \"input\"\n    tout = operations.io_table \"output\"\n    \n    show do \n      title \"Input Table\"\n      table tin.all.render\n    end\n    \n    show do \n      title \"Output Table\"\n      table tout.all.render\n    end\n    \n    operations.store\n    \n    return {}\n    \n  end\n\nend\n',188,'OperationType','2017-10-25 18:15:48','2017-10-27 04:25:42',NULL),(964,'precondition','def precondition(op)\n  true\nend',188,'OperationType','2017-10-25 18:15:48','2017-10-25 18:15:48',NULL),(965,'cost_model','def cost(op)\n  { labor: 0, materials: 0 }\nend',188,'OperationType','2017-10-25 18:15:48','2017-10-27 04:29:01',NULL),(966,'documentation','Documentation here. Start with a paragraph, not a heading or title, as in most views, the title will be supplied by the view.',188,'OperationType','2017-10-25 18:15:48','2017-10-27 04:31:43',NULL),(967,'protocol','# This is a default, one-size-fits all protocol that shows how you can \n# access the inputs and outputs of the operations associated with a job.\n# Add specific instructions for this protocol!\n\nclass Protocol\n\n  def main\n\n    operations.retrieve.make\n    \n    tin  = operations.io_table \"input\"\n    tout = operations.io_table \"output\"\n    \n    show do \n      title \"Input Table\"\n      table tin.all.render\n    end\n    \n    show do \n      title \"Output Table\"\n      table tout.all.render\n    end\n    \n    operations.store\n    \n    return {}\n    \n  end\n\nend\n',189,'OperationType','2017-10-25 18:27:28','2017-10-27 04:25:50',NULL),(968,'precondition','def precondition(op)\n  true\nend',189,'OperationType','2017-10-25 18:27:28','2017-10-27 01:25:14',NULL),(969,'cost_model','def cost(op)\n  { labor: 0, materials: 0 }\nend',189,'OperationType','2017-10-25 18:27:28','2017-10-27 04:29:10',NULL),(970,'documentation','Documentation here. Start with a paragraph, not a heading or title, as in most views, the title will be supplied by the view.',189,'OperationType','2017-10-25 18:27:28','2017-10-27 04:31:53',NULL),(971,'protocol','# This is a default, one-size-fits all protocol that shows how you can \n# access the inputs and outputs of the operations associated with a job.\n# Add specific instructions for this protocol!\n\nclass Protocol\n\n  def main\n\n    operations.retrieve.make\n    \n    tin  = operations.io_table \"input\"\n    tout = operations.io_table \"output\"\n    \n    show do \n      title \"Input Table\"\n      table tin.all.render\n    end\n    \n    show do \n      title \"Output Table\"\n      table tout.all.render\n    end\n    \n    operations.store\n    \n    return {}\n    \n  end\n\nend\n',190,'OperationType','2017-10-25 18:31:27','2017-10-27 04:25:58',NULL),(972,'precondition','def precondition(op)\n  true\nend',190,'OperationType','2017-10-25 18:31:27','2017-10-27 01:25:14',NULL),(973,'cost_model','def cost(op)\n  { labor: 0, materials: 0 }\nend',190,'OperationType','2017-10-25 18:31:27','2017-10-27 04:29:25',NULL),(974,'documentation','Documentation here. Start with a paragraph, not a heading or title, as in most views, the title will be supplied by the view.',190,'OperationType','2017-10-25 18:31:27','2017-10-27 04:32:02',NULL),(975,'protocol','# This is a default, one-size-fits all protocol that shows how you can \n# access the inputs and outputs of the operations associated with a job.\n# Add specific instructions for this protocol!\n\nclass Protocol\n\n  def main\n\n    operations.retrieve.make\n    \n    tin  = operations.io_table \"input\"\n    tout = operations.io_table \"output\"\n    \n    show do \n      title \"Input Table\"\n      table tin.all.render\n    end\n    \n    show do \n      title \"Output Table\"\n      table tout.all.render\n    end\n    \n    operations.store\n    \n    return {}\n    \n  end\n\nend\n',191,'OperationType','2017-10-25 18:37:40','2017-10-27 04:26:08',NULL),(976,'precondition','def precondition(op)\n  true\nend',191,'OperationType','2017-10-25 18:37:40','2017-10-25 18:37:40',NULL),(977,'cost_model','def cost(op)\n  { labor: 0, materials: 0 }\nend',191,'OperationType','2017-10-25 18:37:40','2017-10-27 04:29:42',NULL),(978,'documentation','Documentation here. Start with a paragraph, not a heading or title, as in most views, the title will be supplied by the view.',191,'OperationType','2017-10-25 18:37:40','2017-10-27 04:32:09',NULL),(979,'protocol','# This is a default, one-size-fits all protocol that shows how you can \n# access the inputs and outputs of the operations associated with a job.\n# Add specific instructions for this protocol!\n\nclass Protocol\n\n  def main\n\n    operations.retrieve.make\n    \n    tin  = operations.io_table \"input\"\n    tout = operations.io_table \"output\"\n    \n    show do \n      title \"Input Table\"\n      table tin.all.render\n    end\n    \n    show do \n      title \"Output Table\"\n      table tout.all.render\n    end\n    \n    operations.store\n    \n    return {}\n    \n  end\n\nend\n',194,'OperationType','2017-10-27 01:10:05','2017-10-27 04:26:26',NULL),(980,'precondition','def precondition(op)\n  true\nend',194,'OperationType','2017-10-27 01:10:05','2017-10-27 01:10:05',NULL),(981,'cost_model','def cost(op)\n  { labor: 0, materials: 0 }\nend',194,'OperationType','2017-10-27 01:10:05','2017-10-27 04:30:04',NULL),(982,'documentation','Documentation here. Start with a paragraph, not a heading or title, as in most views, the title will be supplied by the view.',194,'OperationType','2017-10-27 01:10:05','2017-10-27 04:32:28',NULL),(983,'protocol','# This is a default, one-size-fits all protocol that shows how you can \n# access the inputs and outputs of the operations associated with a job.\n# Add specific instructions for this protocol!\n\nclass Protocol\n\n  def main\n\n    operations.retrieve.make\n    \n    tin  = operations.io_table \"input\"\n    tout = operations.io_table \"output\"\n    \n    show do \n      title \"Input Table\"\n      table tin.all.render\n    end\n    \n    show do \n      title \"Output Table\"\n      table tout.all.render\n    end\n    \n    operations.store\n    \n    return {}\n    \n  end\n\nend\n',195,'OperationType','2017-10-27 01:10:46','2017-10-27 04:26:36',NULL),(984,'precondition','def precondition(op)\n  true\nend',195,'OperationType','2017-10-27 01:10:46','2017-10-27 01:10:46',NULL),(985,'cost_model','def cost(op)\n  { labor: 0, materials: 0 }\nend',195,'OperationType','2017-10-27 01:10:46','2017-10-27 04:30:13',NULL),(986,'documentation','Documentation here. Start with a paragraph, not a heading or title, as in most views, the title will be supplied by the view.',195,'OperationType','2017-10-27 01:10:46','2017-10-27 04:32:36',NULL),(987,'protocol','# This is a default, one-size-fits all protocol that shows how you can \n# access the inputs and outputs of the operations associated with a job.\n# Add specific instructions for this protocol!\n\nclass Protocol\n\n  def main\n\n    operations.retrieve.make\n    \n    tin  = operations.io_table \"input\"\n    tout = operations.io_table \"output\"\n    \n    show do \n      title \"Input Table\"\n      table tin.all.render\n    end\n    \n    show do \n      title \"Output Table\"\n      table tout.all.render\n    end\n    \n    operations.store\n    \n    return {}\n    \n  end\n\nend\n',196,'OperationType','2017-10-27 01:12:59','2017-10-27 04:27:25',NULL),(988,'precondition','def precondition(op)\n  true\nend',196,'OperationType','2017-10-27 01:12:59','2017-10-27 01:12:59',NULL),(989,'cost_model','def cost(op)\n  { labor: 0, materials: 0 }\nend',196,'OperationType','2017-10-27 01:12:59','2017-10-27 04:30:27',NULL),(990,'documentation','Documentation here. Start with a paragraph, not a heading or title, as in most views, the title will be supplied by the view.',196,'OperationType','2017-10-27 01:12:59','2017-10-27 04:32:46',NULL),(991,'protocol','# This is a default, one-size-fits all protocol that shows how you can \n# access the inputs and outputs of the operations associated with a job.\n# Add specific instructions for this protocol!\n\nclass Protocol\n\n  def main\n\n    operations.retrieve.make\n    \n    tin  = operations.io_table \"input\"\n    tout = operations.io_table \"output\"\n    \n    show do \n      title \"Input Table\"\n      table tin.all.render\n    end\n    \n    show do \n      title \"Output Table\"\n      table tout.all.render\n    end\n    \n    operations.store\n    \n    return {}\n    \n  end\n\nend\n',197,'OperationType','2017-10-27 01:15:26','2017-10-27 04:27:37',NULL),(992,'precondition','def precondition(op)\n  true\nend',197,'OperationType','2017-10-27 01:15:26','2017-10-27 01:25:14',NULL),(993,'cost_model','def cost(op)\n  { labor: 0, materials: 0 }\nend',197,'OperationType','2017-10-27 01:15:26','2017-10-27 04:30:39',NULL),(994,'documentation','Documentation here. Start with a paragraph, not a heading or title, as in most views, the title will be supplied by the view.',197,'OperationType','2017-10-27 01:15:26','2017-10-27 04:32:55',NULL),(995,'protocol','# This is a default, one-size-fits all protocol that shows how you can \n# access the inputs and outputs of the operations associated with a job.\n# Add specific instructions for this protocol!\n\nclass Protocol\n\n  def main\n\n    operations.retrieve.make\n    \n    tin  = operations.io_table \"input\"\n    tout = operations.io_table \"output\"\n    \n    show do \n      title \"Input Table\"\n      table tin.all.render\n    end\n    \n    show do \n      title \"Output Table\"\n      table tout.all.render\n    end\n    \n    operations.store\n    \n    return {}\n    \n  end\n\nend\n',198,'OperationType','2017-10-27 01:16:04','2017-10-27 04:27:44',NULL),(996,'precondition','def precondition(op)\n  true\nend',198,'OperationType','2017-10-27 01:16:04','2017-10-27 01:25:14',NULL),(997,'cost_model','def cost(op)\n  { labor: 0, materials: 0 }\nend',198,'OperationType','2017-10-27 01:16:04','2017-10-27 04:30:48',NULL),(998,'documentation','Documentation here. Start with a paragraph, not a heading or title, as in most views, the title will be supplied by the view.',198,'OperationType','2017-10-27 01:16:04','2017-10-27 04:33:04',NULL),(999,'protocol','# This is a default, one-size-fits all protocol that shows how you can \n# access the inputs and outputs of the operations associated with a job.\n# Add specific instructions for this protocol!\n\nclass Protocol\n\n  def main\n\n    operations.retrieve.make\n    \n    tin  = operations.io_table \"input\"\n    tout = operations.io_table \"output\"\n    \n    show do \n      title \"Input Table\"\n      table tin.all.render\n    end\n    \n    show do \n      title \"Output Table\"\n      table tout.all.render\n    end\n    \n    operations.store\n    \n    return {}\n    \n  end\n\nend\n',199,'OperationType','2017-10-27 01:17:08','2017-10-27 04:27:51',NULL),(1000,'precondition','def precondition(op)\n  true\nend',199,'OperationType','2017-10-27 01:17:08','2017-10-27 01:25:14',NULL),(1001,'cost_model','def cost(op)\n  { labor: 0, materials: 0 }\nend',199,'OperationType','2017-10-27 01:17:08','2017-10-27 01:17:08',NULL),(1002,'documentation','Documentation here. Start with a paragraph, not a heading or title, as in most views, the title will be supplied by the view.',199,'OperationType','2017-10-27 01:17:08','2017-10-27 04:33:12',NULL),(1003,'protocol','# Add code here.f',192,'OperationType','2017-10-27 01:19:39','2017-10-27 01:19:52',NULL),(1004,'protocol','# Add code here.f\n\n\nthing',192,'OperationType','2017-10-27 01:19:52','2017-10-27 04:26:16',NULL),(1005,'precondition','# Add code here.f',192,'OperationType','2017-10-27 01:20:57','2017-10-27 01:25:14',NULL),(1006,'precondition','eval Library.find_by_name(\"Cloning\").code.first.content\nextend Cloning\n\ndef precondition(op)\n    # return true if response provided for sequencing results\n    if op.plan\n        # check plan associations\n        response = plan.get(plan.associations.keys.find { |key| key.include? \"sequencing ok?\" })\n        if response.present? &&\n           (response.downcase.include?(\"yes\") || response.downcase.include?(\"resequence\") || response.downcase.include?(\"no\")) &&\n           !(response.downcase.include?(\"yes\") && response.downcase.include?(\"no\"))\n           \n            # Set plasmid stock and overnight to sequence-verified\n            stock = op.input(\"Stock\").item\n            stock.associate :sequence_verified, \"Yes\"\n            if stock.get(:from) && response.downcase.include?(\"yes\")\n                overnight = Item.find(stock.get(:from).to_i)\n                pass_data \"sequencing results\", \"sequence_verified\", from: stock, to: overnight\n            end\n            \n            return true\n        end\n    end\nend\n',199,'OperationType','2017-10-27 01:25:14','2017-10-27 01:25:14',NULL),(1007,'precondition','eval Library.find_by_name(\"Preconditions\").code.first.content\nextend Preconditions\n\ndef precondition(op) \n  time_elapsed op, \"Plate\", days: 0\nend',192,'OperationType','2017-10-27 01:25:14','2017-10-27 01:25:14',NULL),(1008,'precondition','eval Library.find_by_name(\"Preconditions\").code.first.content\nextend Preconditions\n\ndef precondition(op) \n    if op.input(\"Plasmid\").object_type.name == \"Ligation Product\" \n        return time_elapsed op, \"Plasmid\", hours: 2\n    else\n        true\n    end\nend',190,'OperationType','2017-10-27 01:25:14','2017-10-27 05:43:07',NULL),(1009,'precondition','def precondition(op)\n    if op.plan\n      pcrs = op.plan.operations.select { |o|\n          o.operation_type.name == \"Make PCR Fragment\"\n      }\n      pcrs.length == 0 || pcrs[0].status == \'done\'\n    else\n      true\n    end\nend',187,'OperationType','2017-10-27 01:25:14','2017-10-27 01:25:14',NULL),(1010,'precondition','def precondition(op)\n  if op.input(\"Plasmid\").item\n      order_name = op.input(\"Plasmid\").item.get \"seq_order_name_#{op.input(\"Plasmid\").column}\".to_sym\n      \n      # associate old sequencing name style (just in case)\n      if order_name.nil?\n        op.input(\"Plasmid\").item.associate \"seq_order_name_#{op.input(\"Plasmid\").column}\".to_sym, \"#{op.input(\"Plasmid\").item.id}_#{op.input(\"Plasmid\").column}\"\n    end\n  end\n  \n  true\nend',198,'OperationType','2017-10-27 01:25:14','2017-10-27 01:25:14',NULL),(1011,'precondition','def precondition(op)\n    needs_seq = op.input(\"Needs Sequencing Results?\").val.strip == \"Yes\"\n    # op.associate :item_thing, op.input(\"Overnight\").item.get(:sequence_verified).downcase\n    return !needs_seq || (op.input(\"Overnight\").item && op.input(\"Overnight\").item.get(:sequence_verified).downcase.include?(\"yes\"))\nend',197,'OperationType','2017-10-27 01:25:14','2017-10-27 01:25:14',NULL),(1012,'precondition','def precondition(op)\n    op.input_array(\"Fragment\").each do |f|\n        if f.sample.properties[\"Length\"] == 0.0\n            op.error :need_fragment_length, \"Your fragment #{f.sample.name} needs a valid length for assembly.\"\n            \n            return false\n        end\n    end\n    \n    return true\nend',189,'OperationType','2017-10-27 01:25:14','2017-10-27 01:25:14',NULL),(1013,'protocol','\n#TO DO: 100 BP LADDER ONLY WHEN A FRAGMENT LESS THAN 500 BP ONLY \n\nclass Protocol\n    \n    # PCR puts stripwells out of operations order. This sorts gel lanes by stripwell to make tables nicer\n    def arrange_gels_by_stripwells ops\n        # get stripwell vals\n        stripwells = ops.map { |op| op.input(\"Fragment\").collection }.uniq.sort { |sw1, sw2| sw1.id <=> sw2.id }\n        sw_size = stripwells.first.object_type.columns\n        wells = ops.map do |op|\n            sw_offset = stripwells.index(op.input(\"Fragment\").collection) * sw_size\n            op.temporary[:sw_val] = sw_offset + op.input(\"Fragment\").column\n            op.temporary[:sw_val]\n        end\n        # show { note \"wells #{wells}\" }\n        \n        # get lane vals\n        gels = ops.map { |op| op.input(\"Gel\").collection }.uniq.sort { |g1, g2| g1.id <=> g2.id }\n        gel_size = gels.first.object_type.rows * gels.first.object_type.columns\n        gel_columns = gels.first.object_type.columns\n        lanes = ops.map do |op| \n            gel_offset = gels.index(op.input(\"Gel\").collection) * gel_size\n            row_offset = op.input(\"Gel\").row * gel_columns\n            gel_offset + row_offset + op.input(\"Gel\").column\n        end\n        # show { note \"lanes #{lanes}\" }\n        \n        # sort lanes by stripwells\n        wells_sorted = wells.sort\n        lanes_sorted = lanes.sort\n        well_to_lane = lanes_sorted.each_with_index.each_with_object({}) do |(l, i), hsh|\n          hsh[wells_sorted[i]] = l\n        end\n        # show { note \"well_to_lane #{well_to_lane.to_s}\" }\n        \n        lanes_ordered_by_well = wells.map { |well| well_to_lane[well] }\n        # show { note \"lanes_ordered_by_well #{lanes_ordered_by_well}\" }\n        \n        # associate operations with new gel, rows & columns\n        ops.each_with_index do |op, idx|\n            gel_idx = lanes_ordered_by_well[idx] / gel_size\n            lane = lanes_ordered_by_well[idx] - gel_idx * gel_size\n            row = lane / gel_columns\n            column = lane % gel_columns\n            \n            gel_fv = op.input(\"Gel\")\n            gel_fv.set collection: gels[gel_idx]\n            gel_fv.row = row\n            gel_fv.column = column\n            gel_fv.save\n            \n            # show { note \"op #{idx}: col: #{op.input(\"Gel\").collection.id}, row: #{op.input(\"Gel\").row}, column: #{op.input(\"Gel\").column}\" }\n        end\n    end\n    \n  def main\n      \n      debug = false\n\n    operations.retrieve interactive: false\n\n    arrange_gels_by_stripwells operations.reject { |op| op.virtual? }\n\n    # Don\'t use generic operations.make\n    operations.each do |op|\n        op.output(\"Fragment\").make_part(\n            op.input(\"Gel\").collection,\n            op.input(\"Gel\").row,\n            op.input(\"Gel\").column\n        )\n    end\n    \n    gels = operations.map { |op| op.input(\"Gel\").collection }.uniq\n    stripwells = operations.map { |op| op.input(\"Fragment\").collection }.uniq.sort { |sw1, sw2| sw1.id <=> sw2.id }\n    \n    # Find a ladder\n    ladder_100 = Sample.find_by_name(\"100 bp Ladder\")\n    ladder_1k = Sample.find_by_name(\"1 kb Ladder\")\n    dye = Sample.find_by_name(\"6X Loading Dye\")\n    items = [ladder_100.in(\"Ladder Aliquot\").first,\n             ladder_1k.in(\"Ladder Aliquot\").first,\n             Item.where(sample_id: dye.id).reject! { |i| i.deleted? }.first]\n    \n    take items + gels.collect { |i| Item.find_by_id(i.id) } + stripwells.collect { |i| Item.find_by_id(i.id) }, interactive: true\n    \n    show do\n        title \"Set up the power supply\"\n        \n        note  \"In the gel room, obtain a power supply and set it to 80 V and with a 40 minute timer.\"\n        note  \"Attach the electrodes of an appropriate gel box lid from A7.525 to the power supply.\"\n        \n        image \"Items/gel_power_settings.JPG\" \n    end\n    \n     show do\n        title \"Set up the gel box(s).\"\n        \n        check \"Remove the casting tray(s) (with gel(s)) and place it(them) on the bench.\"\n        check \"Using the graduated cylinder at A5.305, fill the gel box(s) with 200 mL of 1X TAE from J2 at A5.500. TAE should just cover the center of the gel box(s).\"\n        check \"With the gel box(s) electrodes facing away from you, place the casting tray(s) (with gel(s)) back in the gel box(s). The top lane(s) should be on your left, as the DNA will move to the right.\"\n        check \"Using the graduated cylinder, add 50 mL of 1X TAE from J2 at A5.500 so that the surface of the gel is covered.\"\n        check \"Remove the comb(s) and place them in the appropriate box(s) in A7.325.\"\n        check \"Put the graduated cylinder back at A5.305.\"\n        \n        image \"Items/gel_fill_TAE_to_line.JPG\"\n    end\n    \n    #ONLY DO 100 BP IF THERE IS FRAGMENT W LENGTH < 500 BP\n    gels.each do |gel|\n        gel.set 0,0,ladder_1k.id\n        gel.set 0,1, ladder_100.id\n        gel.set 1,0, ladder_1k.id\n        gel.set 1,1, ladder_100.id\n        show do\n            title \"Add Ladders to Gel\"\n            note \"Pipette 10 uL of the 1 kb ladder to positions (1,1) and (2,1) of gel #{gel.id}\"\n            note \"Pipette 10 uL of the 100bp ladder to positions (1,2) and (2,2) of gel #{gel.id}\"\n        end\n    end\n    \n    show do \n        title \"Add Dye to Each Well\"\n        stripwells.each do |s|\n            note \"Add 10 uL dye to stripwell #{s.id} from wells #{s.non_empty_string}\"\n        end\n    end\n   \n#   operations.each_with_index do |op, i|\n#       f = op.input(\"Fragment\")\n       \n#       unless op.input(\"Fragment\").column\n#          f.column = i % 6\n#       end\n   \n#       unless op.input(\"Fragment\").row \n#          f.row = (i / 6).ceil\n#       end\n       \n#       f.save\n#   end\n   \n   \n    # TO DO: Fix loading if ladders exist\n    show do \n        title \"Transfer 50 uL of each PCR result into indicated gel lane\"\n        note \"Transfer samples from each stripwell to the gel(s) according to the following table:\"\n        table operations.reject { |op| op.virtual? }.sort { |op1, op2| op1.input(\"Fragment\").item.id <=> op2.input(\"Fragment\").item.id }.extend(OperationList).start_table\n            .input_collection(\"Fragment\", heading: \"Stripwell\")\n            .custom_column(heading: \"Well Number\") { |op| (op.input(\"Fragment\").column + 1)  }\n            .input_collection(\"Gel\", heading: \"Gel\")\n            .custom_column(heading: \"Gel Row\") { |op| (op.input(\"Gel\").row + 1) }\n            .custom_column(heading: \"Gel Column\", checkable: true) { |op| (op.input(\"Gel\").column + 1) }\n        .end_table\n    end\n    \n    show do\n        title \"Start Electrophoresis\"\n        note \"Carefully attach the gel box lid(s) to the gel box(es), being careful not to bump the samples out of the wells. Attach the red electrode to the red terminal of the power supply, and the black electrode to the neighboring black terminal. Hit the start button on the gel boxes - usually a small running person icon.\"\n        note \"Make sure the power supply is not erroring (no E* messages) and that there are bubbles emerging from the platinum wires in the bottom corners of the gel box.\"\n        image \"gel_check_for_bubbles\"\n    end\n    \n    show do \n        title \"Discard Stripwells\"\n        note \"Discard all the empty stripwells\"\n        operations.each do |op|\n            op.input(\"Fragment\").item.mark_as_deleted\n        end\n    end\n    \n    show do\n        title \"Set a timer\"\n        \n        check \"When you get back to your bench, set a 40 minute timer.\" \n        check \"When the 40 minute timer is up, grab a lab manager to check on the gel. The lab manager may have you set another timer after checking the gel.\"\n    end\n    \n    release items, interactive: true\n    \n    return {}\n    \n  end\n\nend\n',186,'OperationType','2017-10-27 01:35:35','2017-10-27 05:25:09',NULL),(1014,'protocol','class Protocol\n    \n  def main\n      \n    num_ops = operations.length\n    # lanes_per_gel = 12\n    o = operations.first.output(\"Lane\").object_type\n    lanes_per_gel = o.rows * o.columns\n    \n    gels_needed = ( num_ops / 8.0 ).ceil # since four lanes are reserved for ladder\n    \n    ladder_lanes = ( num_ops / 4.0 ).ceil # since four lanes are reserved for ladder\n    \n    volume = 35.0\n    percentage = 1.0\n    mass = ((percentage / 100) * volume).round 2\n    error = ( mass * 0.05 ).round 5 \n    \n    #insert virtual operations at 0, 6, 12, 18, ...\n    (0...ladder_lanes).each do |l|\n       insert_operation 6*l, VirtualOperation.new\n       insert_operation 6*l + 1, VirtualOperation.new\n    end\n    \n    operations.make\n    \n    # show do\n    #     title \"DEBUG\"\n    #     note \"#{operations.output_collections}\"\n    # end\n    \n    operations.output_collections[\"Lane\"].each_with_index do | gel, i | \n        show do\n            title \"Pour gel\"\n            check \"Grab a flask from on top of the microwave M2.\"\n            check \"Using a digital scale, measure out #{mass} g (+/- #{error} g) of agarose powder and add it to the flask.\"\n            check \"Get a graduated cylinder from on top of the microwave. Measure and add 50 mL of 1X TAE from jug J2 to the flask.\"\n            check \"Microwave 70 seconds on high in microwave M2, then swirl. The agarose should now be in solution.\"\n            note \"If it is not in solution, microwave 7 seconds on high, then swirl. Repeat until dissolved.\"\n            warning \"Work in the gel room, wear gloves and eye protection all the time\"\n        end\n\n        show do\n            title \"Add 5 µL GelGreen\"\n            note \"Using a 10 µL pipetter, take up 5 µL of GelGreen into the pipet tip. Expel the GelGreen directly into the molten agar (under the surface), then swirl to mix.\"\n            warning \"GelGreen is supposedly safe, but stains DNA and can transit cell membranes (limit your exposure).\"\n            warning \"GelGreen is photolabile. Limit its exposure to light by putting it back in the box.\"\n            # image \"gel_add_gelgreen\"\n        end\n    \n        show do\n            title \"Gel Number #{i + 1}, add top comb\"\n            check \"Go get a 49 mL Gel Box With Casting Tray (clean)\"\n            check \"Retrieve a 6-well purple comb from A7.325\"\n            check \"Position the gel box with the electrodes facing away from you. Add a purple comb to the side of the casting tray nearest the side of the gel box.\"\n            check \"Put the thick side of the comb down.\"\n            note \"Make sure the comb is well-situated in the groove of the casting tray.\"\n        end\n    \n        show do\n            title \"Gel Number #{i + 1}, add bottom comb\"\n            check \"Retrieve a 6-well purple comb from A7.325\"\n            check \"Position the gel box with the electrodes facing away from you. Add a purple comb to the center of the casting tray.\"\n            check \"Put the thick side of the comb down.\"\n            note \"Make sure the comb is well-situated in the groove of the casting tray.\"\n            # image \"gel_comb_placement\"\n        end\n    \n        show do\n            title \"Pour and label the gel\"\n            note \"Using a gel pouring autoclave glove, pour agarose from one flask into the casting tray. \n                  Pour slowly and in a corner for best results. Pop any bubbles with a 10 µL pipet tip.\"\n            note \"Write id #{gel.id} on piece of lab tape and affix it to the side of the gel box.\"\n            note \"Leave the gel to location A7.325 to solidify.\"\n            # image \"gel_pouring\"\n        end\n    end\n    \n    operations.store(io: \"output\") \n    \n    #show do\n    #     title \"This protocol should make enough gels to process #{num_ops} samples\"\n    #     note \"Which means #{gels_needed} gels should be made\"\n    #     note \"The operations list has been extended with virtual operations to reserve space for the ladders\"\n    #     table operations.collect { |op| [ op.virtual? ? \"virtual operation for ladder\" : \"operation #{op.id}\" ] }\n    # end\n      \n    # operations.make\n    \n    # show do\n    #   title \"Operation assignments to lanes\" \n    #   table operations.start_table\n    #     .operation_id\n    #     .output_collection(\"Lane\")\n    #     .output_row(\"Lane\")\n    #     .output_column(\"Lane\")\n    #     .end_table\n    # end\n    # operations.store\n    \n    return {}\n    \n  end\n\nend',187,'OperationType','2017-10-27 01:35:46','2017-10-27 01:35:46',NULL),(1015,'protocol','# Purify Gel Protocol\n\n# This protocol purfies gel slices into DNA fragment stocks.\n\nclass Protocol\n  \n  # TODO refactor density parameter name? (see qg_volumes and iso_volumes definitions)\n  DENSITY1 = 1.0 / 3000.0\n  DENSITY2 = 1.0 / 1000.0\n  \n  def main\n  \n    if debug\n       operations.shuffle! \n    end\n  \n    keep_gel_slices = operations.first.plan.get(:choice) == \"Yes\"\n    \n    operations.retrieve interactive: keep_gel_slices\n    operations.sort! { |op1, op2| op1.input(\"Gel\").item.id <=> op2.input(\"Gel\").item.id }\n    operations.make\n    \n    # While testing, assign a random weight value\n    operations.each{ |op| op.set_input_data(\"Gel\", :weight, Random.rand / 2 + 0.1)  } if debug\n\n    # show { title operations.map{|op| op.input(\"Gel\").item.to_s } }\n    \n    operations.each do |op|\n        op.temporary[:qg_volume]  = (op.input_data(\"Gel\", :weight).to_f / DENSITY1).floor\n        op.temporary[:iso_volume] = (op.input_data(\"Gel\", :weight).to_f / DENSITY2).floor\n        op.temporary[:iso_volume] = 0 if op.input(\"Gel\").sample.properties[\"Length\"].between?(500, 4000)\n        op.temporary[:total_volume] = op.temporary[:qg_volume] + op.temporary[:iso_volume]\n        op.temporary[:is_divided] = op.temporary[:total_volume] >= 2000\n    end\n    \n    # TODO delete all of these transient variables\n    # gel_slices = operations.map { |op| op.input(\"Gel\").item}\n    # gel_slice_lengths = gel_slices.map { |gs| gs.sample.properties[\"Length\"] }\n    # num_arr = *(1..operations.length)\n    # qg_volumes = operations.map { |op| (op.input_data(\"Gel\", :weight) / DENSITY1).floor }\n    # iso_volumes  = operations.map { |op| (op.input_data(\"Gel\", :weight) / DENSITY2).floor }\n    # total_volumes = (0...gel_slices.length).map { |idx| qg_volumes[idx] + iso_volumes[idx] }\n    # gel_slices.each_with_index do |gs,idx|\n    #     if gs.sample.properties[\"Length\"] > 500 && gs.sample.properties[\"Length\"] < 4000\n    #         iso_volumes[idx] = 0\n    #     end\n    # end\n    # tubes_in_two = gel_slices.select.with_index { |gs, idx| total_volumes[idx] >= 2000 }.map { |gs| \"#{gs.id}\" }\n    \n    \n    \n    show do\n      title \"Move gel slices to new tubes\"\n      note \"Please carefully transfer the gel slices in the following tubes each to a new 2.0 mL tube using a pipette tip:\"\n      table operations.select{|op| op.temporary[:total_volume].between?(1500, 2000)}.start_table\n      .input_item(\"Gel\")\n      .end_table\n      note \"Label the new tubes accordingly, and discard the old 1.5 mL tubes.\"\n    end if operations.any? {|op| op.temporary[:total_volume].between?(1500, 2000)}\n    \n    show do\n      title \"Add the following volumes of QG buffer to the corresponding tube.\"\n      table operations.start_table\n      .input_item(\"Gel\")\n      .custom_column(heading: \"QG Volume in uL\", checkable: true) { |op| op.temporary[:qg_volume]}\n      .end_table\n    end\n    \n    show do\n      title \"Place all tubes in 50 degree heat block\"\n      timer initial: { hours: 0, minutes: 10, seconds: 0}\n      note \"Vortex every few minutes to speed up the process.\"\n      note \"Retrieve after 10 minutes or until the gel slice is competely dissovled.\"\n    end\n    \n    show do\n      title \"Equally distribute melted gel slices between tubes\"\n      note \"Please equally distribute the volume of the following tubes each between two 1.5 mL tubes:\"\n      table operations.select{ |op| op.temporary[:is_divided]}.start_table\n      .input_item(\"Gel\")\n      .end_table\n      note \"Label the new tubes accordingly, and discard the old 1.5 mL tubes.\"\n    end if operations.any? { |op| op.temporary[:is_divided] }\n    \n    show do\n      title \"Add isopropanol\"\n      note \"Add isopropanol according to the following table. Pipette up and down to mix.\"\n      warning \"Divide the isopropanol volume evenly between two 1.5 mL tubes #{operations.select{ |op| op.temporary[:is_divided]}.map{ |op| op.input(\"Gel\").item.id}} since you divided one tube\'s volume into two earlier.\" if operations.any?{ |op| op.temporary[:is_divided]}\n      table operations.select{ |op| op.temporary[:iso_volume] > 0 }.start_table\n      .input_item(\"Gel\")\n      .custom_column(heading: \"Isopropanol (uL)\", checkable: true) { |op| op.temporary[:iso_volume]}\n      .end_table\n    end if operations.any? { |op| op.temporary[:iso_volume] > 0}\n    \n    show do\n      title \"Prepare the centrifuge\"\n      check \"Grab #{operations.length} of pink Qiagen columns, label with 1 to #{operations.length} on the top.\"\n      check \"Add tube contents to LABELED pink Qiagen columns using the following table.\"\n      check \"Be sure not to add more than 750 uL to each pink column.\"\n      warning \"Vortex QG mixture thoroughly before adding to pink column!\".upcase\n      table operations.start_table\n      .input_item(\"Gel\")\n      .custom_column(heading: \"Qiagen column\") { |op| operations.index(op) + 1}\n      .end_table\n    end\n    \n    show do\n      title \"Centrifuge\"\n      check \"Spin at 17.0 xg for 1 minute to bind DNA to columns\"\n      check \"Empty collection columns by pouring liquid waste into liquid waste container.\"\n      warning \"Add the remaining QG mixtures to their corresponding columns, and repeat these first two steps for all tubes with remaining mixture!\"\n      check \"Add 750 uL PE buffer to columns and wait five minutes\"\n      check \"Spin at 17.0 xg for 30 seconds to wash columns.\"\n      check \"Empty collection tubes.\"\n      check \"Add 500 uL PE buffer to columns and wait five minutes\"\n      check \"Spin at 17.0 xg for 30 seconds to wash columns\"\n      check \"Empty collection tubes.\"\n      check \"Spin at 17.0 xg for 1 minute to remove all PE buffer from columns\"\n    end\n    \n    show do\n      title \"Use label printer to label new 1.5 mL tubes\"\n      check \"Ensure that the B33-143-492 labels are loaded in the printer. This number should be displayed on the printer. If not, check with a lab manager.\"\n      check \"Open the LabelMark 6 software.\"\n      check \"Select \\\"Open\\\" --> \\\"File\\\" --> \\\"Serialized data top labels\\\"\"\n      note \"If an error about the printer appears, press \\\"Okay\\\"\"\n      check \"Select the first label graphic, and click on the number in the middle of the label graphic.\"\n      check \"On the toolbar on the left, select \\\"Edit serialized data\\\"\"\n      check \"Enter #{operations.first.output(\"Fragment\").item.id} for the Start number and #{operations.length} for the Total number, and select \\\"Finish\\\"\"\n      check \"Select \\\"File\\\" --> \\\"Print\\\" and select \\\"BBP33\\\" as the printer option.\"\n      check \"Press \\\"Print\\\" and collect the labels.\"\n      image \"purify_gel_edit_serialized_data\"\n      image \"purify_gel_sequential\"\n    end\n    \n    show do\n        title \"Transfer to 1.5 mL tube\"\n        check \"Apply the labels to the tubes.\"\n        check \"Transfer pink columns to the labeled tubes using the following table.\"\n        table operations.start_table\n            .custom_column(heading: \"Qiagen column\") { |op| operations.index(op) + 1 }\n            .output_item(\"Fragment\", heading: \"1.5 mL tube\", checkable: true)\n        .end_table\n        check \"Add 30 uL molecular grade water or EB elution buffer to center of the column.\"\n        warning \"Be very careful to not pipette on the wall of the tube.\"\n    end\n    \n    show do\n      title \"Measure DNA Concentration\"\n      check \"Elute DNA into 1.5 mL tubes by spinning at 17.0 xg for one minute, keep the columns.\"\n      check \"Pipette the flow through (30 uL) onto the center of the column, spin again at 17.0 xg for one minute. Discard the columns this time.\"\n      check \"Go to B9 and nanodrop all of 1.5 mL tubes, enter DNA concentrations for all tubes in the following:\"\n      table operations.start_table\n      .output_item(\"Fragment\")\n      .get(:conc, type: \'number\', heading: \"Concentration (ng/uL)\", default: 7)\n      .get(:note, type: \'text\', heading: \"Notes\")\n      .end_table\n    end\n    \n    operations.each do |op|\n      op.set_output_data(\"Fragment\", :concentration, op.temporary[:conc])\n      op.output(\"Fragment\").item.notes =  op.temporary[:note]\n    end\n    \n    choices = {}\n    \n    choices = show do\n      title \"Decide whether to keep dilute stocks\"\n      note \"The below stocks have a concentration of less than 10 ng/uL.\"\n      note \"Talk to a lab manager to decide whether or not to discard the following stocks.\"\n      operations.select{ |op| op.output_data(\"Fragment\", :concentration) < 10}.each do |op|\n        select [\"Yes\", \"No\"], var: \"d#{op.output(\"Fragment\").item.id}\", label: \"Discard Fragment Stock #{op.output(\"Fragment\").item.id}\", default: 1\n      end\n    end if operations.any?{ |op| op.output_data(\"Fragment\", :concentration) < 10}\n    \n    show do\n      title \"Discard fragment stocks\"\n      note \"Discard the following fragment stocks:\"\n      note operations.select{ |op| choices[\"d#{op.output(\"Fragment\").item.id}\".to_sym] == \"Yes\"}\n        .map{ |op| op.output(\"Fragment\").item.id}\n        .join(\", \")\n    end if choices.any? { |key, val| val == \"Yes\"}\n    \n    operations.select { |op| choices[\"d#{op.output(\"Fragment\").item.id}\".to_sym] == \"Yes\" }.each do |op|\n        frag = op.output(\"Fragment\").item\n        op.error :low_concentration, \"The concentration of #{frag} was too low to continue\"\n        frag.mark_as_deleted\n    end\n    \n    operations.each do |op|\n      op.input(\"Gel\").item.mark_as_deleted\n    end\n    \n    operations.store\n    \n    return {}\n    \n  end\n  \nend\n\n',188,'OperationType','2017-10-27 04:25:42','2017-10-27 04:25:42',NULL),(1016,'protocol','# Author: Ayesha Saleem\n# December 20, 2016\n\nrequire \'matrix\'\nneeds \"Cloning Libs/Cloning\"\n# For calculating equimolar concentrations, Yaoyu has written up a great explanation: \n\n    # math behind the equimolar volume calculation\n    # Assume that there are n fragment stocks, each with concentrations c1,..., cn, and lengths l1,...,ln. The volumes of each fragment stocks to add in the Gibson reaction is denoted as v1,...,vn. Assuming that the molecular weight (g/mol) of the fragment is proportional to the lenght of the fragment, to ensure equimolar of these n fragment stocks, the following must satisfy:\n    # v1 + ... + vn = 5 (the total gibson reaction volume)\n    # v1 * c1 / l1 = ... = vn * cn / ln (they\'re equimolar)\n    # unit of v is uL, unit of c is g/uL, unit of l1 (molecular weight) is g/mol\n    # thus v * c / l represent the moles of the fragment stock, and esuring v1 * c1 / l1 = ... = vn * cn / ln lead to equimolar fragment stocks.\n    # These mathmatical constraints can be reformated as:\n    # v1 + ... + vn = 5\n    # v1 * c1 / l1 - v2 * c2 / l2 = 0\n    # v1 * c1 / l1 - v3 * c3 / l3 = 0\n    #          ...\n    # v1 * c1 / l1 - vn * cn / ln = 0\n    # The following matrix equations hold:\n    # coefficient_matrix * fragment_volumes = total_vector,\n    # where \n    # coefficient_matrix = [\n    # [1, 1, ..., 1]\n    # [c1 / l1, -c2 / l2, ..., 0]\n    # [c1 / l1, 0, - c3 / l3 ..., 0]\n    # ...\n    # [c1 / l1, 0, ..., - vn * cn / ln]\n    # ]  (n x n matrix)\n    # fragment_volumes = [[v1], [v2], ..., [vn]] (n x 1 matrix)\n    # total_vector = [[5], [0], ..., [0]] (n x 1 matrix)\n    # matrix multiplication\n    # coefficient_matrix.inv * coefficient_matrix * fragment_volumes = coefficient_matrix.inv * total_vector\n    # Therefore we have\n    # fragment_volumes = coefficient_matrix.inv * total_vector\n\n# NEED TO TEST: \n    # ensuring volume\n    # replacing fragment stock\n\nclass Protocol\n    \n    include Cloning\n    debug = false\n    \n    # this builds a matrix with 1\'s in the first row\n    # the concentration over length (c / l) of the fragment when row = column\n    # (with alternating sign) and 0\'s everywhere else\n    def gibson_coefficients row, col, conc_over_length\n        # TODO fix this commented out section (only causes error when not debugging)\n        # if !debug\n            if row == 0\n                return 1\n            elsif col == 0\n                return conc_over_length[0]\n            elsif row == col\n                return -conc_over_length[row]\n            else\n                return 0\n            end\n        # end\n        \n        # return Random.rand(30)\n    end\n    \n    # this creates the \"total_volume\" row vector\n    def gibson_vector row\n        if row == 0\n            return 5.0\n        else\n            return 0\n        end\n    end\n    \n    def calc_gibson_volumes op\n        tot_f_vol = Hash.new(0)\n            \n        conc_over_length = op.input_array(\"Fragment\").items.collect { |f| f.get(:concentration).to_f  / f.sample.properties[\"Length\"]}\n        \n        \n        n = conc_over_length.length\n        total_vec = Matrix.build(n, 1) { |r, c| gibson_vector r }\n        coef_m = Matrix.build(n, n) { |r, c| gibson_coefficients r, c, conc_over_length }\n        vol_vec = (coef_m.inv * total_vec).each.to_a.collect! { |x| x.round(2) }\n        f_vol = vol_vec.each.to_a.collect! { |x| x < 0.20 ? 0.20 : x }\n        \n        # this is to ensure that the rxn isn\'t > 5uL\n        max = f_vol.max\n        total = f_vol.reduce(:+)\n        f_vol[f_vol.index(max)] = (max - (total - 5)).round(2) if total > 5\n        \n        # collect all volumes to ask tech if enough stock is present \n        op.input_array(\"Fragment\").items.each_with_index do |f, i|\n            tot_f_vol[f.id] = f_vol[i]\n        end\n        \n        return tot_f_vol, f_vol\n    end\n\n\n    def main\n    # Take fragments\n        operations.retrieve.make\n\n        check_concentration operations, \"Fragment\"\n        \n        #TODO: refactor gibson batch finding algorithm, gib_batch instantiation is uneccessarily long\n        # determine which batches to grab gibson aliquots from\n        gib_batch = Collection.where(\"data IS NOT NULL\").where(object_type_id: ObjectType.find_by_name(\"Gibson Aliquot Batch\").id).where(\'location != ?\', \"deleted\").to_a.keep_if { |b| b.data[12,13][0,5] == Sample.find_by_name(\"Gibson Aliquot\").id.to_s}[0]\n        if gib_batch.nil?\n            operations.each { |op| op.error :not_enough_gibson, \"There were not enough gibson aliquots to complete the operation.\" }\n            raise \"not enough gibson\"\n        end\n        batch_id_array = [gib_batch.id]\n        total_aliquots = gib_batch.num_samples\n        aliquots_needed = operations.length\n        i = 0\n        while total_aliquots < aliquots_needed\n            i += 1\n            gib_batch = Collection.where(\"data IS NOT NULL\").where(object_type_id: ObjectType.find_by_name(\"Gibson Aliquot Batch\").id).where(\'location != ?\', \"deleted\").to_a.keep_if { |b| b.data[12,13][0,5] == Sample.find_by_name(\"Gibson Aliquot\").id.to_s}[0]\n            if gib_batch.nil?\n                operations.each { |op| op.error :not_enough_gibson, \"There were not enough gibson aliquots to complete the operation.\" }\n            end\n            batch_id_array.push(gib_batch.id)\n            total_aliquots += gib_batch.num_samples\n        end\n    \n    #fetch gibson aliquots\n        show do\n            title \"Grab Gibson aliquots\"\n            note \"Grab an ice block and aluminum tray from the fridge\"\n            note \"Grab #{operations.length} Gibson aliquots from batch#{\"es\" if batch_id_array.length > 1} #{batch_id_array}, located in the M20\"\n        end\n        \n    # Go through and pipette fragments into aliquots\n        operations.each do |op|# calculate how much of each fragment is needed in aliquot\n            tot_f_vol, f_vol = calc_gibson_volumes op\n            vol_table = [[\"Fragment Stock IDs\", \"Volume\"]].concat(op.input_array(\"Fragment\").items.collect { |f| f.id}.zip f_vol.map { |v| { content: v, check: true }})\n            \n            # ask tech if there is enough volume\n            vol_checking = show do \n              title \"Checking Volumes\"\n              tot_f_vol.each do |id, v|\n                  select [\"Yes\", \"No\"], var: \"v#{id}\", label: \"Does #{id} have at least #{v} uL?\", default: 0\n              end\n            end\n            \n            # find replacements\n            replacement = {}\n            to_discard = []\n            tot_f_vol.each do |id, v|\n                if vol_checking[\"v#{id}\".to_sym] == \"No\"\n                    f = Item.find(id)\n                    to_discard.push f\n                    f.mark_as_deleted\n                    f.save\n                    replacement[f.id] = Item.where(sample_id: f.sample_id).where(object_type_id: f.object_type_id).where(\"location != ?\", \"deleted\").to_a.first\n                end\n            end\n            \n            show do\n                title \"Discard depleted stocks\"\n                \n                note \"Discard the following stocks: #{to_discard.map { |s| s.id }}\"\n            end if to_discard.any?\n            \n            # associate replacements with operation inputs\n            find_replacement = []\n            replacement.each do |id, item|\n                if item\n                    op.input_array(\"Fragment\").find { |fv| fv.item.id == id }.set item: item\n                    find_replacement.push(item)\n                else\n                    op.error :volume, \"Insufficient fragment stock volume for Gibson reaction.\" \n                    break\n                end\n            end\n            \n            if op.status != \"error\"\n                take find_replacement, interactive: true if find_replacement.any?\n                check_concentration [op], \"Fragment\"\n                \n                #feature addition: make an extra column for this table to show whether a p2 pipette is required depending on if vol < 0.5\n                if find_replacement.any?\n                    tot_f_vol, f_vol = calc_gibson_volumes op\n                    vol_table = [[\"Fragment Stock IDs\", \"Volume\"]].concat(op.input_array(\"Fragment\").items.collect { |f| f.id}.zip f_vol.map { |v| { content: v, check: true }})\n                end\n                \n                \n                show do\n                    title \"Load Gibson Reaction #{op.output(\"Assembled Plasmid\").item.id}\"\n                    note \"Label an unused aliquot with #{op.output(\"Assembled Plasmid\").item.id}\"\n                    note \"Make sure the Gibson aliquot is thawed before pipetting\"\n                    warning \"Please use the P2 for any volumes below 0.5 uL\"\n                    table vol_table\n                end\n            else\n                show do\n                    title \"Gibson canceled\"\n                    \n                    note \"Sorry it had to be this way. :/\"\n                end\n            end\n        end\n        \n    # put on heat block\n        show do \n            title \"Put Reactions on Heat Block\"\n            note \"Put all #{operations.length} on the 50 C heat block\"\n            note\"<a href=\'https://www.google.com/search?q=1+hr+timer&oq=1+hr+timer&aqs=chrome..69i57j0l5.1684j0j7&sourceid=chrome&es_sm=122&ie=UTF-8#q=1+hour+timer\' target=\'_blank\'>\n                Set a 1 hr timer on Google</a> to set a reminder to start the ecoli_transformation protocol and retrieve the Gibson Reactions.\"\n        end\n        \n    #return gibson aliquots\n        data = show do\n            title \"Return unused gibson aliquots\"\n            note \"#{aliquots_needed} aliquots were needed for this protocol, but you might have not used all of them.\"\n            note \"Return any unused aliquots to batch #{\"es\" if batch_id_array.length > 1} #{batch_id_array.reverse} in the M20\"\n            get \"number\", var: \"n\", label: \"How many gibson aliquots will be returned?\", default: \"0\"\n            note \"If you used more aliquots than predicted, indicate with a negative value.\"\n        end\n        aliquots_returned = data[:n]\n        \n    #updating gibson batches\n        gibsons_used = aliquots_needed - aliquots_returned.to_i\n        i = 0\n        gib_batch = Collection.find batch_id_array[i]\n        while gibsons_used > 0\n            if gib_batch.empty?\n                gib_batch.mark_as_deleted\n                i += 1\n                gib_batch = Collection.find batch_id_array[i]\n            end\n            \n            gibsons_used -= 1\n            gib_batch.remove_one\n        end\n    \n        \n    # return aluminum tube rack, ice block\n        show do\n            title \"Return ice block and aluminum tube rack\"\n            \n            check \"Return the ice block and aluminum tube rack.\"\n            check \"discard the used up gibson aliquot batch.\"\n        end\n        \n\n    # return fragments\n        operations.store(io: \"input\", interactive: true, method: \"boxes\")\n    \n    return {}\n  end\nend',189,'OperationType','2017-10-27 04:25:50','2017-10-27 04:25:50',NULL),(1017,'protocol','# Author: Ayesha Saleem\n# November 5, 2016\n# Revision: Justin Vrana, 2017-07-21 (corrected index error, refactored collection removal proceedure, added batch replacement, added plasimd stock dilution)\n# Revision: Orlando do Lange, 2017-09-12 (Added precondition that if the input is a Ligation product that item must be at least 2 hours old)\n\nneeds \"Cloning Libs/Special Days\"\nneeds \"Standard Libs/Debug\"\n\nclass Protocol\n    \n    include SpecialDays\n    include Debug\n    \n    # io\n    CELLS = \"Comp Cells\"\n    INPUT = \"Plasmid\"\n    OUTPUT = \"Transformed E Coli\"\n    \n    # debug\n    DEBUG_WITH_REPLACEMENT = true\n    \n    # specs\n    RESUSPENSION_VOL = 900 # how much to resuspend transformed cells in\n    \n  def main\n    # Detract comp cells from batches, store how many of each type of comp cell there are, and figure out how many Amp vs Kan plates will be needed \n    \n    # Determine replacements of e coli comp cell batch\n        operations.running.each do |op|\n            # If current batch is empty\n            if op.input(CELLS).collection.empty? || (debug and DEBUG_WITH_REPLACEMENT)\n                old_batch = op.input(CELLS).collection\n                \n                # Find replacement batches\n                all_batches = Collection.where(object_type_id: old_batch.object_type.id).select { |b| !b.empty? && !b.deleted? && (b.matrix[0].include? op.input(CELLS).sample.id) }\n                # batches_of_cells = all_batches.select { |b| b.include? op.input(CELLS).sample && !b.deleted? }.sort { |x| x.num_samples }\n                batches_of_cells = all_batches.reject { |b| b == old_batch }.sort { |x| x.num_samples } # debug specific rejection to force replacement\n                \n                # Error if not enough\n                if batches_of_cells.empty?\n                    op.error :not_enough_comp_cells, \"There were not enough comp cells of #{op.input(CELLS).sample.name} to complete the operation.\"\n                else\n                    # Set input to new batch\n                    \n                    op.input(CELLS).set collection: batches_of_cells.last\n                    # Display warning\n                    op.associate :comp_cell_batch_replaced, \"There were not enough comp cells for this operation. Replaced batch #{old_batch.id} with batch #{op.input(CELLS).collection.id}\"\n                end\n            end\n        end\n    \n    # Detract from running batches\n        operations.running.each { |op| op.input(CELLS).collection.remove_one op.input(CELLS).sample }\n    \n    # Exit early if there are no more running operations\n        if operations.empty?\n            show do\n                title \"All operations have errored\"\n                \n                note \"All operations have errored out.\"\n            end\n            return {}\n        end\n    \n    # Make \n        operations.running.retrieve(only: [\"Plasmid\"]).make\n     \n    # Prepare electroporator \n        show do\n            title \"Prepare bench\"\n            note \"If the electroporator is off (no numbers displayed), turn it on using the ON/STDBY button.\"\n            note \"Set the voltage to 1250V by clicking the up and down buttons.\"\n            note \" Click the time constant button to show 0.0.\"\n            image \"Actions/Transformation/initialize_electroporator.jpg\"\n            \n            check \"Retrieve and label #{operations.running.length} 1.5 mL tubes with the following ids: #{operations.running.collect { |op| \"#{op.output(OUTPUT).item.id}\"}.join(\",\")} \"\n            check \"Set your 3 pipettors to be 2 uL, 42 uL, and 900 uL.\"\n            check \"Prepare 10 uL, 100 uL, and 1000 uL pipette tips.\"      \n            check \"Grab a Bench SOC liquid aliquot (sterile) and loosen the cap.\"\n        end\n        \n        \n    # Measure plasmid stock concentrations\n        ops_for_dilution = operations.running.select { |op| op.input(INPUT).object_type.name == \"Plasmid Stock\" }\n        ops_for_measurement = ops_for_dilution.select { |op| op.input(INPUT).item.get(:concentration).to_f == 0.0 }\n        if ops_for_measurement.any?\n                conc_table = Proc.new { |ops|\n                    ops.start_table\n                        .input_item(INPUT)\n                        .custom_input(:concentration, heading: \"Concentration (ng/ul)\", type: \"number\") { |op| \n                            x = op.temporary[:concentration] || -1\n                            x = rand(10..100) if debug\n                            x\n                        }\n                        .validate(:concentration) { |op, v| v.between?(0,10000) }\n                        .validation_message(:concentration) { |op, k, v| \"Concentration must be non-zero!\" }\n                        .end_table.all\n                }\n                \n                show_with_input_table(ops_for_measurement, conc_table) do\n                    title \"Measure concentrations\"\n                    note \"The concentrations of some plasmid stocks are unknown.\"\n                    check \"Go to the nanodrop and measure the concentrations for the following items.\"\n                    check \"Write the concentration on the side of each tube\"\n                end\n                \n                ops_for_measurement.each do |op|\n                    op.input(INPUT).item.associate :concentration, op.temporary[:concentration]\n                end\n        end\n        \n    # Dilute plasmid stocks\n        if ops_for_dilution.any?\n                show do\n                    title \"Prepare plasmid stocks\"\n                    \n                    ops_for_dilution.each do |op|\n                        i = produce new_sample op.input(INPUT).sample.name, of: op.input(INPUT).sample_type, as: \"1 ng/µL Plasmid Stock\"\n                        \n                        op.temporary[:old_stock] = op.input(INPUT).item\n                        op.input(INPUT).item.associate :from, op.temporary[:old_stock].id\n                        vol = 0.5\n                        c = op.temporary[:old_stock].get(:concentration).to_f\n                        op.temporary[:water_vol] = (vol * c).round(1)\n                        op.temporary[:vol] = vol\n                        op.input(INPUT).set item: i\n                        op.associate :plasmid_stock_diluted, \"Plasmid stock #{op.temporary[:old_stock].id} was diluted and a 1 ng/ul Plasmid Stock was created: #{op.input(INPUT).item.id}\"\n                    end\n                    \n                    check \"Grab <b>#{ops_for_dilution.size}</b> 1.5 mL tubes and place in rack\"\n                    note \"According to the table below:\"\n                    check \"Label all tubes with the corresponding Tube id\"\n                    check \"Pipette MG H20\"\n                    check \"Pipette DNA\"\n                    table ops_for_dilution.start_table\n                        .input_item(INPUT, heading: \"Tube id\", checkable: true)\n                        .custom_column(heading: \"MG H20\", checkable: true) { |op| \"#{op.temporary[:water_vol]} ul\" }\n                        .custom_column(heading: \"Plasmid Stock (ul)\", checkable: true) { |op| \"#{op.temporary[:vol]} ul of #{op.temporary[:old_stock].id}\" }\n                        .end_table\n                end\n                \n                show do\n                    title \"Set aside old plasmid stocks\"\n                    \n                    note \"The following plasmid stocks will no longer be needed for this protocol.\"\n                    check \"Set aside the old plasmid stocks:\"\n                    ops_for_dilution.each do |op|\n                        check \"#{op.temporary[:old_stock]}\"\n                    end\n                end\n        end\n    \n    # Get comp cells and cuvettes \n        show do \n            title \"Get cold items\"\n            note \"Retrieve a styrofoam ice block and an aluminum tube rack. Put the aluminum tube rack on top of the ice block.\"\n            image \"arrange_cold_block\"\n            check \"Retrieve #{operations.length} cuvettes and put inside the styrofoam touching ice block.\"\n            note \"Retrieve the following electrocompetent aliquots from the M80 and place them on an aluminum tube rack: \"\n            operations.group_by { |op| op.input(CELLS).item }.each do |batch, grouped_ops|\n                check \"#{grouped_ops.size} aliquot(s) of #{grouped_ops.first.input(CELLS).sample.name} from batch #{batch.id}\"\n            end\n            image \"Actions/Transformation/handle_electrocompetent_cells.jpg\"\n        end\n        \n    # Label comp cells \n        show do \n            title \"Label aliquots\"\n            aliquotsLabeled = 0\n            operations.group_by { |op| op.input(CELLS).item }.each do |batch, grouped_ops|\n                if grouped_ops.size == 1\n                    check \"Label the electrocompetent aliquot of #{grouped_ops.first.input(CELLS).sample.name} as #{aliquotsLabeled + 1}.\"\n                else\n                    check \"Label each electrocompetent aliquot of #{grouped_ops.first.input(CELLS).sample.name} from #{aliquotsLabeled + 1}-#{grouped_ops.size + aliquotsLabeled}.\"\n                end\n                aliquotsLabeled += grouped_ops.size\n            end\n            note \"If still frozen, wait till the cells have thawed to a slushy consistency.\"\n            warning \"Transformation efficiency depends on keeping electrocompetent cells ice-cold until electroporation.\"\n            warning \"Do not wait too long\"\n            image \"Actions/Transformation/thawed_electrocompotent_cells.jpg\"\n        end\n        \n    index = 0\n    \n    # Display table to tech\n        show do\n            title \"Add plasmid to electrocompetent aliquot, electroporate and rescue \"\n            note \"Repeat for each row in the table:\"\n            check \"Pipette 2 uL plasmid/gibson result into labeled electrocompetent aliquot, swirl the tip to mix and place back on the aluminum rack after mixing.\"\n            check \"Transfer 42 uL of e-comp cells to electrocuvette with P100\"\n            check \"Slide into electroporator, press PULSE button twice, and QUICKLY add #{RESUSPENSION_VOL} uL of SOC\"\n            check \"pipette cells up and down 3 times, then transfer #{RESUSPENSION_VOL} uL to appropriate 1.5 mL tube with P1000\"\n            table operations.running.start_table \n                .input_item(\"Plasmid\")\n                .custom_column(heading: \"Electrocompetent Aliquot\") { index = index + 1 }\n                .output_item(\"Transformed E Coli\", checkable: true)\n                .end_table\n        end\n        \n    # Incubate transformants\n        show do \n            title \"Incubate transformants\"\n            check \"Grab a glass flask\"\n            check \"Place E. coli transformants inside flask laying sideways and place flask into shaking 37 C incubator.\"\n            #Open google timer in new window\n            note \"<a href=\\\'https://www.google.com/search?q=30%20minute%20timer\\\' target=\\\'_blank\\\'>Use a 30 minute Google timer</a> to set a reminder to retrieve the transformants, at which point you will start the \\\'Plate Transformed Cells\\\' protocol.\"\n            image \"Actions/Transformation/37_c_shaker_incubator.jpg\"\n            note \"While the transformants incubate, finish this protocol by completing the remaining tasks.\"\n        end\n           \n    #plate pre heating\n        show do \n            title \"Pre-heat plates\"\n            note \"Retrieve the following plates, and place into still 37C incubator.\"    \n            grouped_by_marker = operations.running.group_by { |op|\n                op.input(INPUT).sample.properties[\"Bacterial Marker\"].upcase\n            }\n            grouped_by_marker.each do |marker, ops|\n                check \"#{ops.size} LB + #{marker} plates\"\n            end\n            image \"Actions/Plating/put_plate_incubator.JPG\"\n        end\n        \n    # Clean up\n        show do\n            title \"Clean up\"\n            check \"Put all cuvettes into biohazardous waste.\"\n            check \"Discard empty electrocompetent aliquot tubes into waste bin.\"\n            check \"Return the styrofoam ice block and the aluminum tube rack.\"\n            image \"Actions/Transformation/dump_dirty_cuvettes.jpg\"\n        end\n        \n    # Move items\n        operations.running.each do |op|\n            op.output(OUTPUT).item.move \"37C shaker\"\n        end\n        \n        give_happy_birthday\n        \n    # Store dna stocks\n        all_stocks = operations.running.map { |op| [op.input(INPUT).item, op.temporary[:old_stock]] }.flatten.uniq\n        all_stocks.compact!\n        release all_stocks, interactive: true, method: \"boxes\"\n        \n    return {}\n  end\nend ',190,'OperationType','2017-10-27 04:25:58','2017-10-27 05:43:25',NULL),(1018,'protocol','# Author: Ayesha Saleem\n# December 23, 2016\n\n# TO DO \n    # Fire different antibiotic plate depending on which antibiotic it is (e.g., Amp: 30 min, Kan: 1 hr, etc.)\n\nclass Protocol\n    \n    def name_initials str\n        full_name = str.split\n        \n        begin\n          cap_initials = full_name[0][0].upcase + full_name[1][0].upcase\n        rescue\n          cap_initials = \"\"\n        end\n        \n        return cap_initials\n    end\n\n  def main\n\n    operations.retrieve.make\n    \n    markers = Hash.new { | h, k | h[k] = {} } \n    \n    # group plates + transformed aliquots \n        operations.each do | op | \n            p = op.input(\"Plasmid\").item\n            marker_key = \"LB\"\n            p.sample.properties[\"Bacterial Marker\"].split(/[+,]/).each do |marker|\n                marker_key = marker_key + \" + \" + marker.strip[0, 3].capitalize\n            end\n            \n            if Sample.find_by_name(marker_key)\n                markers[marker_key][p] = op.output(\"Plate\").item\n            else\n                show do \n                    note \"#{marker_key}\"\n                end\n                op.error :no_marker, \"There is no marker associated with this sample, so we can\'t plate it. Please input a marker.\"\n            end\n        end\n        \n        \n    # tell tech to grab x amount of plates and plate the aliquots\n    # also detract from plate batches\n        markers.each do | k, v| \n            aliquots = []\n            plates = []\n            ids = []\n            \n            v.each do | al, pl|\n                ids.push(\"#{pl.id} \" + name_initials(pl.sample.user.name))\n                aliquots.push(al.id)\n                al.mark_as_deleted\n                plates.push(pl.id)\n                pl.location = \"37 C incubator\"\n            end\n            \n            b = Collection.where(\"data IS NOT NULL\").where(object_type_id: 493).to_a\n                          .keep_if { |b| b.data[12,13][0,5] == \"#{Sample.find_by_name(k).id}\"}[0]\n            \n            batch_num = [b.id]\n            n = b.num_samples\n            num_p = plates.length\n            if n < num_p\n                num_p = num_p - n\n                b.apportion 10, 10\n                b = Collection.where(\"data IS NOT NULL\").where(object_type_id: 493).to_a\n                              .keep_if { |b| b.data[12,13][0,5] ==\"#{Sample.find_by_name(k).id}\"}[0]\n                n = b.num_samples\n                batch_num.push(b.id)\n            end\n              \n            m = b.matrix\n            x = 0\n        \n            (0..m.length-1).reverse_each do |i|\n              (0..m[i].length-1).reverse_each do |j|\n                if m[i][j] != -1 && x < num_p\n                  m[i][j] = -1\n                  x += 1\n                end\n              end\n            end\n            \n            show do\n                title \"Grab #{plates.length} of #{k} plates\"\n                note \"Grab #{plates.length} plates from batch #{batch_num.join(\"and\")}\"\n                check \"Label the top of the plates with your intials, the date, and the following ids: #{ids.join(\", \")}\"\n            end\n            \n            show do\n                title \"Spin down tubes and resuspend\"\n                check \"Remove the transformed cells in 1.5 mL tubes from the 250 mL flask.\"\n                check \"Centrifuge for 4,000 x g for 1 minute.\"\n                check \"Carefully remove most of the supernatant using a P1000 pipette. Leave 100-200uL of supernatant in each tube.\"\n                check \" Resuspend the cells in the remaining supernatant by vortexing.\"\n            end\n            \n            show do \n                title \"Plate transformed E coli aliquots\"\n                check \"Use sterile beads to plate THE ENTIRE VOLUME (~200 uL) from the transformed aliquots (1.5 mL tubes) onto the plates, following the table below.\"\n                warning \"Note the change in plating volume!\"\n                check \"Discard used transformed aliquots after plating.\"\n                table [[\"1.5 mL tube\", \"#{k} Plate\"]].concat(aliquots.zip plates)\n            end\n            \n        end\n    \n        operations.store(io: \"output\", interactive: true)\n    \n    return {}\n    \n  end\n\nend\n',191,'OperationType','2017-10-27 04:26:08','2017-10-27 05:58:39',NULL),(1019,'protocol','# Author: Ayesha Saleem\n# December 20, 2016\n\n# TO DO: \n    # Create option for \"there are baby colonies but they\'re not big enough for protocols\" case--put back in incubator\n    # Re-streak the plate if there\'s too much contamination--fire check plate again in 24 hrs, probably collection\n\nclass Protocol\n\n  def main\n    # Take plates  \n    operations.retrieve\n    \n    # Count the number of colonies\n    info = get_colony_numbers\n    \n    # Update plate data\n    update_item_data info\n    \n    # Delete and discard any plates that have 0 colonies\n    discard_bad_plates if operations.any? { |op| op.temporary[:delete] }\n    \n    # Parafilm and label plates \n    parafilm_plates\n    \n    # Return plates\n    operations.store\n    \n    return {}\n  end\n  \n  \n  \n  # Count the number of colonies and select whether the growth is normal, contaminated, or a lawn\n  def get_colony_numbers\n    show do\n      title \"Estimate colony numbers\"\n      \n      operations.each do |op|\n        plate = op.input(\"Plate\").item\n        get \"number\", var: \"n#{plate.id}\", label: \"Estimate how many colonies are on #{plate}\", default: 5\n        select [\"normal\", \"contamination\", \"lawn\"], var: \"s#{plate}\", label: \"Choose whether there is contamination, a lawn, or whether it\'s normal.\"\n      end\n    end    \n  end\n  \n  # Alter data of the virtual item to represent its actual state\n  def update_item_data info\n    operations.each do |op|\n      plate = op.input(\"Plate\").item\n      if info[\"n#{plate.id}\".to_sym] == 0\n        plate.mark_as_deleted\n        plate.save\n        op.temporary[:delete] = true\n        op.error :no_colonies, \"There are no colonies for plate #{plate.id}\"\n      else\n        plate.associate :num_colonies, info[\"n#{plate.id}\".to_sym]\n        plate.associate :status, info[\"s#{plate.id}\".to_sym]\n        \n        checked_ot = ObjectType.find_by_name(\"Checked E coli Plate of Plasmid\")\n        plate.store if plate.object_type_id != checked_ot.id\n        plate.object_type_id = checked_ot.id\n        plate.save\n        op.output(\"Plate\").set item: plate\n        \n        op.plan.associate \"plate_#{op.input(\"Plate\").sample.id}\", plate.id\n      end\n    end\n  end\n  \n  # discard any plates that have 0 colonies\n  def discard_bad_plates\n      show do \n        title \"Discard Plates\"\n        \n        discard_plate_ids = operations.select { |op| op.temporary[:delete] }.map { |op| op.input(\"Plate\").item.id }\n        note \"Discard the following plates with 0 colonies: #{discard_plate_ids}\"\n    end\n  end\n  \n  # Parafilm and label any plates that have suitable growth\n  def parafilm_plates\n    show do \n      title \"Label and Parafilm\"\n      \n      plates_to_parafilm = operations.reject { |op| op.temporary[:delete] }.map { |op| op.input(\"Plate\").item.id }\n      note \"Perform the steps with the following plates: #{plates_to_parafilm}\"\n      note \"Label the plates with their item ID numbers on the side, and parafilm each one.\"\n      note \"Labelling the plates on the side makes it easier to retrieve them from the fridge.\"\n    end\n  end\nend',192,'OperationType','2017-10-27 04:26:16','2017-10-27 04:26:16',NULL),(1020,'protocol','needs \"Cloning Libs/Cloning\"\nneeds \"Standard Libs/Debug\"\n\nclass Protocol\n    \n    include Cloning\n    include Debug\n\n    def overnight_steps(op, ot)\n        op.retrieve \n        \n        show do\n            title \"Label and load overnight tubes\"\n            note \"In the Media Bay, collect #{op.length} 14mL tubes\"\n            note \"Write the overnight id on the corresponding tube and load with the correct media type.\"\n            table op.start_table\n              .output_item(\"Overnight\", checkable: true)\n              .custom_column(heading: \"Media\") { |op| \"TB+\" + op.input(\"Plasmid\").child_sample.properties[\"Bacterial Marker\"].upcase }\n              .custom_column(heading: \"Quantity\") { |op| \"3 mL\" }\n              .end_table\n        end\n    \n        show {\n            title \"Inoculation from #{ot}\"\n            note \"Use 10 L sterile tips to inoculate colonies from plate into 14 mL tubes according to the following table.\" if ot == \"Checked E coli Plate of Plasmid\"\n            check \"Mark each colony on the plate with corresponding overnight id. If the same plate id appears more than once in the table, inoculate different isolated colonies on that plate.\" if ot == \"Checked E coli Plate of Plasmid\"\n            note \"Use 100 uL pipette to inoculate cells from glycerol stock into the 14 mL tube according to the following table.\" if ot == \"Plasmid Glycerol Stock\"\n            table op.start_table\n              .input_item(\"Plasmid\", heading: ot)\n              .custom_column(heading: \"#{ot} Location\") { |op| op.input(\"Plasmid\").item.location }\n              .output_item(\"Overnight\", checkable: true)\n              .end_table      \n        } \n    end\n\n  def main\n      \n    operations.retrieve(interactive: false)\n    \n    # Increase the number of colonies picked the plate. If no picked number is present,\n    # set it equal to one. Note that setting the status to \"error\" will remove the operation\n    # from operations.running, so it will not be listed in tables, etc.\n    operations.select { |op| op.input(\"Plasmid\").item.object_type_id == ObjectType.where(name: \"Checked E coli Plate of Plasmid\").first.id }.each do |op|\n       nc = (op.input_data \"Plasmid\", :num_colonies).to_i\n       np = (op.input_data \"Plasmid\", :num_picked).to_i\n       if debug && !nc && rand(2) == 1\n          op.set_input_data \"Plasmid\", :num_colonies, 1\n          op.set_input_data \"Plasmid\", :num_picked, 1\n       elsif !nc || nc == 0 || ( np && np >= nc )\n           op.error :missing_data, \"No colonies left on plate or colony number not defined\"\n       else\n           op.set_input_data \"Plasmid\", :num_picked, (np || 0) + 1\n       end\n    end\n    \n    # Error out operations whose samples don\'t have bacterial marker data. Tell technician\n    # which ones are not being used. Quit if there are no samples left.\n    operations.each do |op|\n        unless op.input(\"Plasmid\").child_sample.properties[\"Bacterial Marker\"]\n            if debug && rand(2) == 1\n              op.input(\"Plasmid\").child_sample.set_property \"Bacterial Marker\", \"Amp\"\n            else\n              op.set_status \"error\"\n              op.associate :missing_marker, \"No bacterial marker associated with plasmid\"\n            end\n        end\n    end\n    \n    operations.make\n    \n    p_ot = ObjectType.where(name: \"Checked E coli Plate of Plasmid\").first \n    \n    raise \"Could not find object type \'Checked E coli Plate of Plasmid\'\" unless p_ot\n    \n    plate_inputs = operations.running.select { |op| op.input(\"Plasmid\").item.object_type_id == p_ot.id }\n    \n    g_ot = ObjectType.where(name: \"Plasmid Glycerol Stock\").first \n    \n    raise \"Could not find object type \'Plasmid Glycerol Stock\'\" unless g_ot \n    \n    glycerol_stock_inputs = operations.running.select { |op| op.input(\"Plasmid\").item.object_type_id == g_ot.id }\n    \n    overnight_steps plate_inputs, \"Checked E coli Plate of Plasmid\" if plate_inputs.any?\n    overnight_steps glycerol_stock_inputs, \"Plasmid Glycerol Stock\" if glycerol_stock_inputs.any?\n    \n    # Associate input id with from data for overnight.\n    operations.running.each do |op|\n        gs = op.input(\"Plasmid\").item\n        on = op.output(\"Overnight\").item\n        \n        on.associate :from, gs.id\n        pass_data \"sequencing results\", \"sequence_verified\", from: gs, to: on\n    end\n    \n    operations.running.each do |op|\n        op.output(\"Overnight\").child_item.move \"37 C shaker incubator\"\n    end\n    \n    operations.store\n    \n    return {}\n\n  end \n  \nend ',194,'OperationType','2017-10-27 04:26:26','2017-10-27 04:26:26',NULL),(1021,'protocol','needs \"Cloning Libs/Cloning\"\n\nclass Protocol\n\n  include Cloning\n\n  def main\n    # Find all overnights and take them\n        operations.retrieve\n\n    # Verify whether each overnight has growth\n        verify_growth = show do\n            title \"Check if overnights have growth\"\n            note \"Choose No for the overnight that does not have growth and throw them away or put in the clean station.\"\n            operations.each do |op|\n                item_id = op.input(\"Plasmid\").child_item.id\n                select [\"Yes\", \"No\"], var: \"#{item_id}\", label: \"Does tube #{item_id} have growth?\"\n            end\n        end\n        \n    # if no growth, delete the overnight    \n        operations.each do |op|\n            item = op.input(\"Plasmid\").child_item\n            if verify_growth[\"#{item.id}\".to_sym] == \"No\"\n                item.mark_as_deleted\n                op.error :no_growth, \"The overnight has no growth.\" \n            end\n        end\n        \n    operations.running.make\n    \n    #transfer each overnight into 1.5 mL tube\n        show do \n            title \"Transfer Overnights into 1.5 mL Tubes\"\n            note \"Grab #{operations.length} 1.5 mL tubes and label from 1 to #{operations.length}\"\n            note \"Transfer 1.5 mL of the overnight into the corresponding 1.5 mL tube.\"\n            index = 0\n            table operations.start_table\n                .input_item(\"Plasmid\")\n                .custom_column(heading: \"Tube Number\") { index = index + 1 }\n            .end_table\n        end\n        \n    #Spin down cells and remove supernatant\n        show do \n           title \"Spin down the cells\"\n           check \"Spin at 5,800 xg for 2 minutes, make sure to balance.\"\n           check \"Remove the supernatant. Pour off the supernatant into liquid waste, being sure not to upset the pellet. Pipette out the residual supernatant.\"\n        end\n        \n    # Resuspend in P1, P2, N3\n        show do\n          title \"Resuspend in P1, P2, N3\"\n          check \"Add 250 uL of P1 into each tube and vortex strongly to resuspend.\"\n          check \"Add 250 uL of P2 and gently invert 5-10 times to mix, tube contents should turn blue.\"\n          check \"Pipette 350 uL of N3 into each tube and gently invert 5-10 times to mix. Tube contents should turn colorless.\"\n          warning \"Time between adding P2 and N3 should be minimized. Cells should not be exposed to active P2 for more than 5 minutes\"\n        end\n\n    # Centrifuge and add to miniprep columns        \n        show do\n            title \"Centrifuge and add to columns\"\n            check \"Spin tubes at 17,000 xg for 10 minutes\"\n            warning \"Make sure to balance the centrifuge.\"\n            check \"Grab #{operations.running.length} blue miniprep spin columns and label with 1 to #{operations.running.length}.\"\n            check \"Remove the tubes from centrifuge and carefully pipette the supernatant (up to 750 uL) into the same labeled columns.\"\n            warning \"Be careful not to disturb the pellet.\"\n            check \"Discard the used 1.5 mL tubes into waste bin.\"\n        end\n        \n    # Spin and wash        \n        show do \n            title \"Spin and Wash\"\n            check \"Spin all columns at 17,000 xg for 1 minute. Make sure to balance.\"\n            check \"Remove the columns from the centrifuge and discard the flow through into a liquid waste container\"\n            check \"Add 750 uL of PE buffer to each column. Make sure the PE bottle that you are using has ethanol added!\"\n            check \"Spin the columns at 17,000 xg for 1 minute\"\n            check \"Remove the columns from the centrifuge and discard the flow through into a liquid waste container.\"\n            check \"Perform a final spin: spin all columns at 17,000 xg for 1 minute.\"\n        end\n\n    #Elute w water\n        show do \n            title \"Elute with water\"\n            check \"Grab  #{operations.length} new 1.5 mL tubes and label top of the tube with 1 to  #{operations.length}.\"\n            check \"Remove the columns from the centrifuge\"\n            check \"Inidividually take each column out of the flowthrough collector and put it into the labeled 1.5 mL tube with the same number, discard the flowthrough collector.\"\n            warning \"For this step, use a new pipette tip for each sample to avoid cross contamination\"\n            check \"Pipette 50 uL of water into the CENTER of each column\"\n            check \"Let the tubes sit on the bench for 2 minutes\"\n            check \"Spin the columns at 17,000 xg for 1 minute\"\n            check \"Remove the tubes and discard the columns\"    \n        end \n        \n    # Relabel tubes w output ids\n        show do \n            title \"Relabel Tubes\"\n            note \"Relabel each tube with the corresponding item ID\"\n            index = 0\n            table operations.start_table \n                .custom_column(heading: \"Tube Number\") { index = index + 1 }\n                .output_item(\"Plasmid\")\n            .end_table\n        end\n    \n    # nanodrop and get concentration\n        show do \n            title \"Nanodrop and Enter Concentration\"\n            note \"Nanodrop each plasmid and enter the concentration below\"\n            table operations.start_table\n                .output_item(\"Plasmid\")\n                .get(:concentration, type: \"number\", heading: \"Concentration\", default: 200)\n            .end_table\n        end\n        \n    # set concentration of plasmid stock and change location of overnights\n        operations.running.each do | op |\n            op.set_output_data \"Plasmid\", :concentration, op.temporary[:concentration]\n            op.set_output_data \"Plasmid\", :from, op.input(\"Plasmid\").item.id\n            op.plan.associate \"overnight_#{op.input(\"Plasmid\").sample.id}\", op.input(\"Plasmid\").item.id\n            op.plan.associate :plasmid, op.output(\"Plasmid\").item.id\n            op.input(\"Plasmid\").child_item.store\n                    \n            pass_data \"sequencing results\", \"sequence_verified\", from: op.input(\"Plasmid\").item, to: op.output(\"Plasmid\").item\n        end\n         \n        operations.running.store\n        return {}\n    \n  end\n\nend\n',195,'OperationType','2017-10-27 04:26:36','2017-10-27 04:26:36',NULL),(1022,'protocol','needs \"Cloning Libs/Cloning\"\n\nclass Protocol\n  include Cloning\n  \n\n  PLASMID = \"Plasmid\"\n  PRIMER = \"Sequencing Primer\"\n  SEQ_RESULT = \"Plasmid for Sequencing\"\n\n  def main\n      \n    operations.retrieve\n\n    check_concentration operations, PLASMID\n    \n    # calculate required input volumes based on Genewiz guide, store in values of op.temporary[<input>_vol]\n    calculate_volumes\n\n    # volume check using the volumes calculated in the previously called \'calculate_volumes\' method\n    check_volumes [PLASMID], :stock_vol, :your_plasmid_sucks, check_contam: true\n    check_volumes [PRIMER], :primer_vol, :make_aliquots_from_stock, check_contam: true\n\n    if operations.running.empty?\n        show do\n            title \"It\'s your lucky day!\"\n            \n            note \"There\'s no sequencing to do. :)\"\n        end\n        operations.store\n        return {}\n    end\n    \n    operations.make\n    \n    stripwells = operations.output_collections[\"Plasmid for Sequencing\"]\n    \n    # label sequencing stripwell(s)\n    prepare_stripwells stripwells\n    \n    # load stripwells with molecular grade water\n    load_water stripwells\n    \n    # load stripwells with stock\n    load_stock stripwells\n    \n    # load stripwells with primer\n    load_primer stripwells\n    \n    # delete stripwells\n    stripwells.each { |sw| sw.mark_as_deleted }\n    \n    operations.store\n    \n    # create Genewiz order\n    genewiz = genewiz_order\n    \n    # store stripwells in dropbox\n    store_stripwells\n    \n    # save order data in stripwells\n    save_order_data genewiz\n    \n    operations.store(interactive: false)\n    return {}\n  end\n  \n\n\n  def calculate_volumes\n    ng_by_length_plas = [500.0, 800.0, 1000.0].zip [6000, 10000]\n    ng_by_length_frag = [10.0, 20.0, 40.0, 60.0, 80.0].zip [500, 1000, 2000, 4000]\n    samples_list = []\n    \n    operations.each do |op|\n      stock = op.input(PLASMID).item\n      length = stock.sample.properties[\"Length\"]\n      conc = stock.get(:concentration).to_f || rand(300) / 300\n      conc = rand(4000..6000) / 10.0 if debug\n      samples_list.push(op.input(\"Plasmid\").sample)\n      \n      ng_by_length = stock.sample.sample_type.name == \"Plasmid\" ? ng_by_length_plas : ng_by_length_frag\n      plas_vol = ng_by_length.find { |ng_l| ng_l[1].nil? ? true : length < ng_l[1] }[0] / conc\n      plas_vol = plas_vol < 0.5 ? 0.5 : plas_vol > 12.5 ? 12.5 : plas_vol\n      \n      water_vol_rounded = (((12.5 - plas_vol) / 0.2).floor * 0.2).round(1)\n      plas_vol_rounded = ((plas_vol / 0.2).ceil * 0.2).round(1)\n      primer_vol_rounded = 2.5\n      \n      op.temporary[:water_vol] = water_vol_rounded\n      op.temporary[:stock_vol] = plas_vol_rounded\n      op.temporary[:primer_vol] = primer_vol_rounded\n    end\n  end\n\n  def prepare_stripwells stripwells\n    show do\n      title \"Prepare stripwells for sequencing reaction\"\n      \n      stripwells.each_with_index do |sw, idx|\n        if idx < stripwells.length - 1\n          check \"Label the first well of an unused stripwell with MP#{idx * 12 + 1} and last\n                 well with MP#{idx * 12 + 12}\"\n        else\n          number_of_wells = operations.running.length - idx * 12\n          check \"Prepare a #{number_of_wells}-well stripwell, and label the first well with \n                 UB#{idx * 12 + 1} and the last well with UB#{operations.running.length}\"\n        end\n      end\n    end\n  end\n\n  def load_water stripwells\n    show do\n      title \"Load stripwells #{stripwells.map { |sw| sw.id }.join(\", \")} with molecular grade water\"\n      \n      stripwells.each_with_index do |sw, idx|\n        note \"Stripwell #{idx + 1}\"\n        table operations.running.select { |op| op.output(\"Plasmid for Sequencing\").collection == sw }.start_table\n          .custom_column(heading: \"Well\") { |op| op.output(\"Plasmid for Sequencing\").column + 1 }\n          .custom_column(heading: \"Molecular Grade Water (uL)\", checkable: true) { |op| op.temporary[:water_vol] }\n          .end_table\n      end\n    end\n  end\n\n  def load_stock stripwells\n    show do\n      title \"Load stripwells #{stripwells.map { |sw| sw.id }.join(\", \")} with plasmid stock\"\n      \n      stripwells.each_with_index do |sw, idx|\n        note \"Stripwell #{idx + 1}\"\n        table operations.running.select { |op| op.output(\"Plasmid for Sequencing\").collection == sw }.start_table\n          .custom_column(heading: \"Well\") { |op| op.output(\"Plasmid for Sequencing\").column + 1 }\n          .input_item(PLASMID, heading: \"Stock\")\n          .custom_column(heading: \"Volume (uL)\", checkable: true) { |op| op.temporary[:stock_vol] }\n          .end_table\n      end\n    end\n  end\n\n  def load_primer stripwells\n    show do\n      title \"Load stripwells #{stripwells.map { |sw| sw.id }.join(\", \")} with Primer\"\n      \n      stripwells.each_with_index do |sw, idx|\n        note \"Stripwell #{idx + 1}\"\n        table operations.running.select { |op| op.output(\"Plasmid for Sequencing\").collection == sw }.start_table\n          .custom_column(heading: \"Well\") { |op| op.output(\"Plasmid for Sequencing\").column + 1 }\n          .input_item(PRIMER, heading: \"Primer Aliquot\")\n          .custom_column(heading: \"Volume (uL)\", checkable: true) { |op| op.temporary[:primer_vol] }\n          .end_table\n      end\n    end\n  end\n\n  def genewiz_order\n    operations.running.each do |op|\n        stock = op.input(PLASMID).item\n        primer = op.input(PRIMER).sample\n        order_name_base = \"#{stock.id}-#{stock.sample.user.name.gsub(\' \', \'_\')}\"\n        \n        op.temporary[:seq_order_name_wo_primer] = order_name_base\n        op.output(SEQ_RESULT).item.associate \"seq_order_name_#{op.output(SEQ_RESULT).column}\".to_sym, (order_name_base + \"-#{primer.id}\")\n    end\n    \n    show do\n      title \"Create a Genewiz order\"\n      \n      check \"Go the <a href=\'https://clims3.genewiz.com/default.aspx\' target=\'_blank\'>GENEWIZ website</a>, log in with lab account (Username: biofab@uw.edu, password is glauber1).\"\n      check \"Click Create Sequencing Order, choose Same Day, Online Form, Pre-Mixed, #{operations.running.length} samples, then Create New Form\"\n      check \"Enter DNA Name and My Primer Name according to the following table, choose DNA Type to be Plasmid\"\n      \n      table operations.start_table\n        .custom_column(heading: \"DNA Name\") { |op| op.temporary[:seq_order_name_wo_primer] }\n        .custom_column(heading: \"DNA Type\") { |op| op.input(PLASMID).sample.sample_type.name == \"Plasmid\" ? \"Plasmid\" : \"Purified PCR\" }\n        .custom_column(heading: \"DNA Length\") { |op| op.input(PLASMID).sample.properties[\"Length\"] }\n        .custom_column(heading: \"My Primer Name\") { |op| op.input(PRIMER).sample.id }\n        .end_table\n      \n      check \"Click Save & Next, Review the form and click Next Step\"\n      check \"Enter Quotation Number MS0721101, click Next Step\"\n      check \"Print out the form and enter the Genewiz tracking number below.\"\n      get \"text\", var: \"tracking_num\", label: \"Enter the Genewiz tracking number\", default: \"Replace-Me\"\n    end\n  end  \n\n  def store_stripwells\n    show do\n      title \"Put all stripwells in the Genewiz dropbox\"\n      check \"Cap all of the stripwells.\"\n      check \"Wrap the stripwells in parafilm.\"\n      check \"Put the stripwells into a zip-lock bag along with the printed Genewiz order form.\"\n      check \"Ensure that the bag is sealed, and put it into the Genewiz dropbox.\"\n    end\n  end\n\n  def save_order_data genewiz\n    order_date = Time.now.strftime(\"%-m/%-d/%y %I:%M:%S %p\")\n    operations.each do |op|\n      op.set_output_data SEQ_RESULT, :tracking_num, genewiz[:tracking_num]\n      op.set_output_data SEQ_RESULT, :order_date, order_date\n    end\n  end\n\n  def your_plasmid_sucks bad_ops_by_item, inputs\n    show do\n      title \"discard contaminated DNA\"\n      \n      note \"discard the following contaminated DNA stock items: #{bad_ops_by_item.keys.select {|item| item.get(:contaminated) == \"Yes\" }.map { |item| item.id}.to_sentence }\"\n    end if bad_ops_by_item.keys.select {|item| item.get(:contaminated) == \"Yes\" }.any?\n    \n    bad_ops_by_item.each do |item, ops| \n      bad_ops_by_item[item].each { |op| op.error :not_enough_volume, \"Plasmid stock  #{item.id} did not have enough volume, or was contaminated. Please make another!\" }\n      bad_ops_by_item.except! item\n      if item.get(:contaminated) == \"Yes\"\n        item.mark_as_deleted\n      end\n    end\n  end\nend',196,'OperationType','2017-10-27 04:27:25','2017-10-27 04:27:25',NULL),(1023,'protocol','needs \"Cloning Libs/Cloning\"\n\nclass Protocol\n\n  include Cloning\n    \n  def main\n\n    operations.retrieve.make\n    \n    show do\n        title \"Print out labels\"\n        \n        note \"On the computer near the label printer, open Excel document titled \'Glycerol stock label template\'.\" \n        note \"Copy and paste the table below to the document and save.\"\n        \n        table operations.start_table \n            .output_item(\"Stock\") \n            .custom_column(heading: \"Sample ID\") { |op| op.output(\"Stock\").sample.id } \n            .custom_column(heading: \"Sample Name\") { |op| op.output(\"Stock\").sample.name[0,16] }\n        .end_table\n\n        note \"Ensure that the correct label type is loaded in the printer: B33-181-492 should show up on the display. \n          If not, get help from a lab manager to load the correct label type.\"\n        note \"Open the LabelMark 6 software and select \'Open\' --> \'File\' --> \'Glycerol stocks.l6f\'\"\n        note \"A window should pop up. Under  \'Start\' enter #{operations.first.output(\"Stock\").item.id} and set \'Total\' to #{operations.length}. Select \'Finish.\'\"\n        note \"Click on the number in the top row of the horizontal side label and select \'Edit External Data\'. A window should pop up. Select \'Finish\'.\"\n        note \"Select \'File\' --> \'Print\' and set the printer to \'BBP33\'.\"\n        note \"Collect labels.\"\n    end\n    \n    show do \n        title \"Pipette Glycerol into Cryo Tubes\"\n        \n        check \"Take #{operations.length} Cryo #{\"tube\".pluralize(operations.length)}\"\n        check \"Label each tube with the printed out labels\"\n        check \"Pipette 900 uL of 50 percent Glycerol into each tube.\"\n        warning \"Make sure not to touch the inner side of the Glycerol bottle with the pipetter.\"\n    end\n    \n    show do \n        title \"Transfer Into Cryo Tubes\"\n        \n        note \"Transfer <b>900 uL</b> of culture according to the following table:\"\n        \n        table operations.start_table\n            .custom_column(heading: \"Overnight\") { |op| op.input(\"Overnight\").item.id } \n            .custom_column(heading: \"Glycerol Stock ID\", checkable: true) { |op| op.output(\"Stock\").item.id }  \n        .end_table\n        \n        note \"Cap the Cryo tube and then vortex on a table top vortexer for about 20 seconds.\"\n    end\n    \n    operations.each do |op|\n        on = op.input(\"Overnight\").item\n        gs = op.output(\"Stock\").item\n        \n        pass_data \"sequencing results\", \"sequence_verified\", from: on, to: gs\n        \n        on.mark_as_deleted\n        on.save\n    end\n    \n    show do \n        title \"Discard overnights\"\n        \n        note \"Please discard all of the following overnights in the dishwashing area:\"\n        note operations.map { |op| op.input(\"Overnight\").item.id }.to_sentence\n    end\n    \n    operations.store\n    \n    return {}\n    \n  end\n\nend',197,'OperationType','2017-10-27 04:27:37','2017-10-27 04:27:37',NULL),(1024,'protocol','needs \"Standard Libs/Debug\"\n\nclass Protocol\n\n  include Debug\n\n  ORDER = \"Plasmid\"\n\n  def add_debug_defaults\n    if debug\n      operations.each do |op|\n        sw = op.input(ORDER).item\n        sw.associate :tracking_num, [12345, 23523].sample if !sw.get(:tracking_num)\n        \n        key = \"seq_order_name_#{op.input(ORDER).column}\"\n        if !sw.associations.any? { |k, v| k == key }\n          stock = Item.where(object_type_id: ObjectType.find_by_name(\"Plasmid Stock\")).all.sample\n          primer = Item.where(object_type_id: ObjectType.find_by_name(\"Primer Stock\")).all.sample.sample\n          \n          sw.associate key.to_sym, \"#{stock.id}-#{stock.sample.user.name}-#{primer.id}\"\n        end\n      end\n    end\n  end\n  \n  def ensure_same_tracking_number\n    ops_by_num = Hash.new { |h, k| h[k] = [] }\n    operations.each { |op| ops_by_num[op.input(ORDER).item.get(:tracking_num)].push op }\n    \n    if ops_by_num.keys.one?\n      return operations.first.input(ORDER).item.get :tracking_num\n    else\n      show do\n        title \"Not all tracking numbers match\"\n        \n        note \"All operations have been set to pending. Please consider the suggested batching option.\"\n        \n        ops_by_num.each do |num, ops|\n          note \"Tracking number: #{num}\"\n          \n          table ops.extend(OperationList).start_table\n            .custom_column(heading: \"Operation ID\") { |op| op.id }\n            .custom_column(heading: \"Plan ID\") { |op| op.plan.id }\n          .end_table\n        end\n      end\n      \n      operations.each { |op| op.change_status \"pending\" }\n      \n      return nil\n    end\n  end\n\n  def check_if_results_arrived tracking_num\n    results_info = show do\n      title \"Check if Sequencing results arrived?\"\n      \n      check \"Go the Genewiz website, log in with lab account (Username: biofab@uw.edu, password is glabuer1).\"\n      note \"In Recent Results table, click Tracking Number #{tracking_num}, and check if the sequencing results have shown up yet.\"\n      \n      select [\"Yes\", \"No\"], var: \"results_back_or_not\", label: \"Do the sequencing results show up?\", default: 0\n    end\n    \n    if results_info[:results_back_or_not] == \"No\"\n        show do \n            title \"No Results\"\n            note \"Sequencing results are not yet available, wait a while and then run this job again.\"\n        end\n        operations.each do |op| \n            op.change_status \"pending\"\n        end\n        return false\n    end\n    \n    return true\n  end\n\n    #we actually don\'t want to associate the zip file with the plan and items, as it contains sequencing results from other users\' items\n  def upload_batched_results tracking_num\n    # sequencing_uploads_zip = \n    show do\n      title \"Download Genewiz Sequencing Results zip file\"\n      \n      note \"Click the button \'Download All Selected Trace Files\' (Not Download All Sequence Files), which should download a zip file named #{tracking_num}-some-random-number.zip.\"\n    #   note \"Upload the #{tracking_num}_ab1.zip file here.\"\n      \n    #   upload var: \"sequencing_results\"\n    end\n    \n    # uploads = sequencing_uploads_zip[:sequencing_results]\n    # if uploads\n    #   u = Upload.find(uploads.first[:id])\n    #   operations.each do |op|\n    #       op.plan.associate \"Order #{tracking_num} batched sequencing results\", \"Fresh out of the oven!\", u\n    #       op.input(\"Plasmid\").item.associate \"Order #{tracking_num} batched sequencing results\", \"Fresh out of the oven!\", u\n    #   end\n    # end\n  end  \n  \n  def upload_individual_results tracking_num\n    operations.each { |op| op.temporary[:upload_confirmed] = false }\n    \n    5.times do\n      ops = operations.select { |op| !op.temporary[:upload_confirmed] }\n      break if ops.empty?\n      \n      ops.each { |op| op.temporary[:seq_name] = op.input(ORDER).item.get \"seq_order_name_#{op.input(ORDER).column}\".to_sym }\n      \n      sequencing_uploads = show do\n        title \"Upload individual sequencing results\"\n        \n        note \"Unzip the downloaded zip file named #{tracking_num}_ab1.zip.\"\n        note \"If you are on a Windows machine, right click the #{tracking_num}-some-random-number.zip file, click Extract All, then click Extract.\"\n        note \"Upload all the unzipped ab1 file below by navigating to the upzipped folder.\"\n        note \"You can click Command + A on Mac or Ctrl + A on Windows to select all files.\"\n        note \"Wait until all the uploads finished (a number appears at the end of file name).\"\n        \n        upload var: \"sequencing_results\"\n        \n        table ops.start_table\n          .custom_column(heading: \"Expected Filenames\") { |op| op.temporary[:seq_name] + \".ab1\" }\n        .end_table\n      end\n      \n      # TODO remove hacky way and replace with correct way\n      op_to_file_hash = match_upload_to_operations ops, :seq_name, job_id=self.jid\n      op_to_file_hash.each do |op, u|\n          op.plan.associate \"#{op.input(ORDER).sample.name} in Item #{op.temporary[:seq_name]} sequencing results\", \"How do they look?\", u\n          stock = Item.find(op.temporary[:seq_name].split(\'-\')[0].to_i)\n          stock.associate \"Item #{op.temporary[:seq_name]} sequencing results\", \"How do they look?\", u\n          if stock.get(:from)\n              overnight = Item.find(stock.get(:from))\n              overnight.associate \"Item #{op.temporary[:seq_name]} sequencing results\", \"How do they look?\", u\n              if overnight.get(:from)\n                  gs = Item.find(overnight.get(:from))\n                  gs.associate \"Item #{op.temporary[:seq_name]} sequencing results\", \"How do they look?\", u if gs.object_type.name.include? \"Glycerol Stock\"\n              end\n          end\n          \n          op.temporary[:upload_confirmed] = u.present?\n      end\n    end\n  end\n\n  # method that matches uploads to operations with a temporary[filename_key]\n  def match_upload_to_operations ops, filename_key, job_id=nil, uploads=nil\n      def extract_basename filename\n          ext = File.extname(filename)\n          basename = File.basename(filename, ext)\n      end\n      \n      op_to_upload_hash = Hash.new\n      uploads ||= Upload.where(\"job_id\"=>job_id).to_a if job_id\n          if uploads\n              ops.each do |op|\n                  upload = uploads.select do |u|\n                      basename = extract_basename(u[:upload_file_name])\n                      basename.strip.include? op.temporary[filename_key].strip\n                  end.first || nil\n                  op_to_upload_hash[op] = upload\n              end\n          end\n      op_to_upload_hash\n  end\n  \n  # resolve plasmid stock and associated plate based on user feedback\n  def add_clean_up_sequencings\n      operations.each do |op|\n          if op.plan\n              stock = Item.find(op.temporary[:seq_name].split(\'-\')[0].to_i)\n              overnight = Item.find(stock.get(:from)) if stock.get(:from)\n              plate = Item.find(overnight.get(:from)) if overnight && overnight.get(:from)\n              \n              # Ensure no Clean Up Sequencing operation exists for this plasmid stock\n              cus_ops = op.plan.operations.select { |op| op.name == \"Clean Up Sequencing\" }\n              if cus_ops.map { |op| op.input(\"Stock\").item }.exclude?(stock)\n                  # Make new Clean Up Sequencing for this stock and associated plate\n                  ot = OperationType.find_by_name(\"Clean Up Sequencing\")\n                  new_op = ot.operations.create(\n                      status: \"waiting\",\n                      user_id: op.user_id\n                  )\n                  op.plan.plan_associations.create operation_id: new_op.id\n              \n                  aft = ot.field_types.find { |ft| ft.name == \"Stock\" }.allowable_field_types[0]\n                  new_op.set_property \"Stock\", stock.sample, \"input\", false, aft\n                  new_op.input(\"Stock\").set item: stock\n                  \n                  aft = ot.field_types.find { |ft| ft.name == \"Plate\" }.allowable_field_types[0]\n                  new_op.set_property \"Plate\", stock.sample, \"input\", false, aft\n                  new_op.input(\"Plate\").set item: plate\n                  \n                  op.plan.reload\n                  new_op.reload\n              end\n          end\n      end\n  end\n\n  def main\n\n    add_debug_defaults\n    tracking_num = ensure_same_tracking_number\n    return {} if tracking_num.nil?\n    \n    operations.retrieve interactive: false\n    \n    return {} if !check_if_results_arrived(tracking_num)\n    upload_batched_results tracking_num\n    upload_individual_results tracking_num\n    \n    operations.each do |op|\n      # Query user for next step\n      op.plan.associate \"Item #{op.temporary[:seq_name].split(\'-\')[0]} sequencing ok?\", \"yes - discard plate, and mark plasmid stock as sequence verified; resequence - keep plate and plasmid stock; no - discard plasmid stock\"\n    end\n    add_clean_up_sequencings\n\n    return {}\n    \n  end\n\nend',198,'OperationType','2017-10-27 04:27:44','2017-10-27 04:27:44',NULL),(1025,'protocol','class Protocol\n\n  def main\n\n    # debuggin\'\n    if debug\n        operations.each do |op| \n            op.plan.associate \"Item #{op.input(\"Stock\").item.id} sequencing ok?\", [\"yes somestuff\", \"no foo\", \"resequence bar\"].sample\n        end\n    end\n\n    operations.retrieve interactive: false \n    \n    # Gather user responses\n    operations.select { |op| op.plan.get(\"Item #{op.input(\"Stock\").item.id} sequencing ok?\") }.each do |op|\n        ans = op.plan.get(\"Item #{op.input(\"Stock\").item.id} sequencing ok?\").downcase\n        if ans.include? \"yes\"\n            op.plan.associate :seq_notice, \"Plate #{op.input(\"Plate\").item.id} has been discarded.\"\n            \n            op.temporary[:yes] = true\n        elsif ans.include? \"resequence\"\n            op.plan.associate :seq_notice, \"Plasmid stock not verified; please resubmit this stock for sequencing.\"\n            \n            op.temporary[:resequence] = true\n        else\n            op.plan.associate :seq_notice, \"Plasmid stock #{op.input(\"Stock\").item.id} has been discarded.\"\n            \n            op.temporary[:no] = true\n        end\n    end\n    \n    # Discard plates for yes\n    show do \n        title \"Discard plates from good sequencing results\"\n        \n        note \"Please discard the following plates: \"\n        operations.select { |op| op.temporary[:yes] }.each do |op|\n            pl = op.input(\"Plate\").item\n            note \"Plate #{pl.id} at #{pl.location}\"\n            pl.mark_as_deleted\n            pl.save\n        end\n    end if operations.any? { |op| op.temporary[:yes] }\n    \n    # Discard plasmid stocks for no\n    show do\n        title \"Discard Plasmid Stocks from bad sequencing results\"\n        \n        note \"Please discard the following Plasmid Stocks:\"\n        operations.select { |op| op.temporary[:no] }.each do |op|\n            stock = op.input(\"Stock\").item\n            note \"Plasmid Stock #{stock.id} at #{stock.location}\"\n            stock.mark_as_deleted\n            stock.save\n        end\n    end if operations.any? { |op| op.temporary[:no] }\n    \n    return {}\n    \n  end\n\nend\n',199,'OperationType','2017-10-27 04:27:51','2017-10-27 04:27:51',NULL),(1026,'cost_model','def cost(op)\n    {\n        materials: 1.04,\n        labor: 6.45\n    }      \nend',183,'OperationType','2017-10-27 04:28:15','2017-10-27 04:28:15',NULL),(1027,'cost_model','def cost(op)\n    \n  props = op.output(\"Primer\").sample.properties\n  seq = props[\"Overhang Sequence\"] + props[\"Anneal Sequence\"]\n  n = seq.length\n  \n  if n <= 60\n    c = n * Parameter.get_float(\'short primer cost\')\n  elsif n <= 90\n    c = n * Parameter.get_float(\'medium primer cost\')\n  else\n    c = n * Parameter.get_float(\'long primer cost\')\n  end\n  \n  { labor: 1.8, materials: c }\n  \nend',184,'OperationType','2017-10-27 04:28:21','2017-10-27 04:28:21',NULL),(1028,'cost_model','# Run Gel Cost Model\n\ndef cost(op)\n    {\n        materials: 0.26,\n        labor: 2.03\n    }      \nend',186,'OperationType','2017-10-27 04:28:40','2017-10-27 04:28:40',NULL),(1029,'cost_model','# Pour Gel Cost Model\n# On the fly protocol, and only evaluated when the gel is cut so no cost is accrued\n\ndef cost(op)\n    { materials: 0.80, labor: 0.84 }\nend',187,'OperationType','2017-10-27 04:28:51','2017-10-27 04:28:51',NULL),(1030,'cost_model','# Purify Gel Slice Cost Model\n\ndef cost(op)\n    {\n        materials: 1.79,\n        labor: 7.43\n    }      \nend',188,'OperationType','2017-10-27 04:29:01','2017-10-27 04:29:01',NULL),(1031,'cost_model','# Assemble Plasmid/Gibson Cost Model\n\ndef cost(op)\n    {\n        materials: 3.78,\n        labor: 6.16 \n    }      \nend',189,'OperationType','2017-10-27 04:29:10','2017-10-27 04:29:10',NULL),(1032,'cost_model','# Transform Ecoli Cells Cost Model\n\ndef cost(op)\n    {\n        materials: 3.37,\n        labor: 6.68 \n    }      \nend',190,'OperationType','2017-10-27 04:29:25','2017-10-27 04:29:25',NULL),(1033,'cost_model','def cost(op)\n    {\n        materials: 0.85,\n        labor: 2.27 \n    }      \nend',191,'OperationType','2017-10-27 04:29:42','2017-10-27 04:29:42',NULL),(1034,'cost_model','# Check Plate/Imaging Cost Model\n\ndef cost(op)\n    {\n        materials: 0.02,\n        labor: 0.68 \n    }      \nend',192,'OperationType','2017-10-27 04:29:51','2017-10-27 04:29:51',NULL),(1035,'cost_model','#TODO: Multiple overnight suspension/plate protocols\n#Specific to Miniprep(?)\ndef cost(op)\n  { labor: 3.88, materials: 0.75 }\nend',194,'OperationType','2017-10-27 04:30:04','2017-10-27 04:30:04',NULL),(1036,'cost_model','def cost(op)\n  { labor: 11.65, materials: 1.28  }\nend',195,'OperationType','2017-10-27 04:30:13','2017-10-27 04:30:13',NULL),(1037,'cost_model','#Send to Sequencing Cost Model\n\ndef cost(op)\n  { labor: 8.43, materials: 5.22 }\nend',196,'OperationType','2017-10-27 04:30:27','2017-10-27 04:30:27',NULL),(1038,'cost_model','def cost(op)\n  { labor: 2.51, materials: 0.66 }\nend',197,'OperationType','2017-10-27 04:30:39','2017-10-27 04:30:39',NULL),(1039,'cost_model','def cost(op)\n  { labor: 0.2, materials: 0 }\nend',198,'OperationType','2017-10-27 04:30:48','2017-10-27 04:30:48',NULL),(1040,'documentation','*Pour Gel* => **Run Gel** => *Extract Fragment*\n\n1. Load a 50 mL 1% Agarose Gel with the input samples\n2. Run the gel at 100 V for 40 m',186,'OperationType','2017-10-27 04:31:16','2017-10-27 04:31:16',NULL),(1041,'documentation','**Pour Gel** => *Run Gel* \n\n1. Melt 50 mL of 1% agarose in the microwave\n2. Add fluroescent dye to the gel\n3. Pour the melted agarose in a gel casting tray\n4. Add combs and allow the gel to solidify',187,'OperationType','2017-10-27 04:31:24','2017-10-27 04:31:24',NULL),(1042,'documentation','*Extract Fragment* => **Purify Gel Slice** => *Make PCR Fragment*\n\n1. Dissolve extracted gel slice in QG Buffer\n2. Purify fragment on spin column\n3. Determine the concentration using a Nanodrop and record ',188,'OperationType','2017-10-27 04:31:43','2017-10-27 04:31:43',NULL),(1043,'documentation','*Make PCR Fragment* => **Assemble Plasmid** => *Transform Cells*\n\n1. Combine fragments with Gibson master mix according to calculated concentrations\n2. Place mixture in a 42 °C heat block for one hour',189,'OperationType','2017-10-27 04:31:53','2017-10-27 04:31:53',NULL),(1044,'documentation','*Assemble Plasmid* => **Transform Cells** => *Plate Transformed Cells*\n\n1. Combine assembled plasmid with DH5a *E. coli* competent cells\n2. Electroporate competent cell mixture\n3. Recover electroporated cells in LB for an hour at 37 °C with shaking',190,'OperationType','2017-10-27 04:32:02','2017-10-27 04:32:02',NULL),(1045,'documentation','*Transform Cells* => **Plate Transformed Cells** => *Check Plate*\n\n1. Plate transformed *E. coli* cells on LB + Amp or LB + Kan as appropriate\n2. Incubate plate overnight at 37 °F',191,'OperationType','2017-10-27 04:32:09','2017-10-27 04:32:09',NULL),(1046,'documentation','*Plate Transformed Cells* => **Check Plate** => *Make Overnight Suspension*\n\n1. Remove plate from the 37 C incubator\n2. Check plate for growth and contamination\n    - If there is no growth, the plate is thrown out and the user is notified',192,'OperationType','2017-10-27 04:32:19','2017-10-27 04:32:19',NULL),(1047,'documentation','*Check Plate* => **Make Overnight Suspension** => *Make Miniprep*\n\n1. Pick one or more colonies from a plate and suspend in either TB + Amp or TB + Kan\n2. Incubate culture overnight in the 37 F shaker',194,'OperationType','2017-10-27 04:32:28','2017-10-27 04:32:28',NULL),(1048,'documentation','*Make Overnight Suspension* => **Make Miniprep** => *Send to Sequencing*\n\n1. Purify plasmid from overnight suspension using a miniprep kit\n2. Store overnight suspension at 4 °C for later use in *Make Glycerol Stock*',195,'OperationType','2017-10-27 04:32:36','2017-10-27 04:32:36',NULL),(1049,'documentation','*Make Miniprep* => **Send to Sequencing** => *Upload Sequencing Results*\n\n1. Mix the sequencing primer and plasmid stock in a stripwell\n2. Fill out the form on the Genewiz website\n3. Place the stripwell in the Genewiz dropbox',196,'OperationType','2017-10-27 04:32:46','2017-10-27 04:32:46',NULL),(1050,'documentation','*Upload Sequencing Results* => **Make Glycerol Stock**\n\n1. Print label for glycerol stock\n2. Mix overnight culture with glycerol and freeze',197,'OperationType','2017-10-27 04:32:55','2017-10-27 04:32:55',NULL),(1051,'documentation','This is run after **Send to Sequencing** and is a precursor to **Make Glycerol Stock**. The technician uploads the sequencing results, and the user is prompted to verify whether the sequence is correct. If the sequence is correct, the overnight that holds the plasmid cells is automatically submitted to **Make Glycerol Stock**; if the results are incorrect, the plate and overnight associated with the plasmid stock are thrown out. ',198,'OperationType','2017-10-27 04:33:04','2017-10-27 04:33:04',NULL),(1052,'documentation','&#x1F499;&#x1F499;&#x1F499;**If you are not a lab manager, please DO NOT submit this!**&#x1F499;&#x1F499;&#x1F499;\n\nDoes one of three things, depending on user response to sequencing results:\n- \"Yes\": Discard plate.\n- \"Resequence\": Do nothing.\n- \"No\": Discard plasmid stock.',199,'OperationType','2017-10-27 04:33:12','2017-10-27 04:33:12',NULL),(1053,'protocol','# This is a default, one-size-fits all protocol that shows how you can \n# access the inputs and outputs of the operations associated with a job.\n# Add specific instructions for this protocol!\n\nclass Protocol\n\n  def main\n\n    operations.retrieve.make\n    \n    tin  = operations.io_table \"input\"\n    tout = operations.io_table \"output\"\n    \n    show do \n      title \"Input Table\"\n      table tin.all.render\n    end\n    \n    show do \n      title \"Output Table\"\n      table tout.all.render\n    end\n    \n    operations.store\n    \n    return {}\n    \n  end\n\nend\n',200,'OperationType','2017-10-27 04:43:00','2017-10-27 04:43:07',NULL),(1054,'precondition','def precondition(op)\n  true\nend',200,'OperationType','2017-10-27 04:43:00','2017-10-27 04:43:00',NULL),(1055,'cost_model','def cost(op)\n  { labor: 0, materials: 0 }\nend',200,'OperationType','2017-10-27 04:43:00','2017-10-27 04:43:00',NULL),(1056,'documentation','Documentation here. Start with a paragraph, not a heading or title, as in most views, the title will be supplied by the view.',200,'OperationType','2017-10-27 04:43:00','2017-10-27 04:43:00',NULL),(1057,'protocol','class Protocol\n\n  def main\n      \n    op = operations.first\n    operations.make    \n    op.output(\"Batch\").item.mark_as_deleted\n    \n    item_info = show do\n        title \"What type of Collection do you want to create?\"\n        note \"object type name must be exactly correct\"\n        \n        get \"text\", var: \"object_type\", label: \"Object type\", default: \"Stripwell\"\n        get \"text\", var: \"location\", label: \"Location\", default: \"Bench\"\n    end\n     \n    object_type = ObjectType.find_by_name(item_info[:object_type])\n    new_item = produce new_collection object_type.name\n    new_item.matrix = Array.new(object_type.rows) { Array.new(object_type.columns) { -1 } }\n    new_item.save\n    \n    op.output(\"Batch\").set item: new_item\n\n    show do\n        title \"Collection Created!\"\n        \n        note \"Made new #{op.output(\"Batch\").item.object_type.name}\"\n        note \"Collection link #{op.output(\"Batch\").item}\"\n        note \"Now we will populate the collection with samples of your choice\"\n    end\n    \n    \n    coll = op.output(\"Batch\").collection\n    coll.location = item_info[:location]\n    continue = true\n    while continue\n        add = show do \n            title \"how many samples to add to #{coll.id}\"\n            \n            get \"number\", var: \"sample\", label: \"Sample id to add\", default: 7\n            get \"number\", var: \"add\", label: \"how many to add\", default: 0\n            select [\"Yes\", \"No\"], var: \"continue\", label: \"I want to add a different sample as well\", default: 1\n            table coll.matrix\n        end        \n        \n        sample = Sample.find(add[:sample])\n        \n        add[:add].times do\n            coll.add_one sample\n        end\n        continue = add[:continue] == \"Yes\"\n    end\n    \n    show do \n        title \"Collection finsished and ready to use\"\n        \n        note \"Use the \\\'edit collection\\\' protocol to add or remove samples\"\n        table coll.matrix\n    end\n    \n    \n    \n    operations.store\n    \n    return {}\n    \n  end\n\nend\n',200,'OperationType','2017-10-27 04:43:07','2017-10-27 04:43:07',NULL),(1058,'protocol','# This is a default, one-size-fits all protocol that shows how you can \n# access the inputs and outputs of the operations associated with a job.\n# Add specific instructions for this protocol!\n\nclass Protocol\n\n  def main\n\n    operations.retrieve.make\n    \n    tin  = operations.io_table \"input\"\n    tout = operations.io_table \"output\"\n    \n    show do \n      title \"Input Table\"\n      table tin.all.render\n    end\n    \n    show do \n      title \"Output Table\"\n      table tout.all.render\n    end\n    \n    operations.store\n    \n    return {}\n    \n  end\n\nend\n',201,'OperationType','2017-10-27 04:56:56','2017-10-27 04:57:06',NULL),(1059,'precondition','def precondition(op)\n  true\nend',201,'OperationType','2017-10-27 04:56:56','2017-10-27 04:56:56',NULL),(1060,'cost_model','def cost(op)\n  { labor: 0, materials: 0 }\nend',201,'OperationType','2017-10-27 04:56:56','2017-10-27 04:57:18',NULL),(1061,'documentation','Documentation here. Start with a paragraph, not a heading or title, as in most views, the title will be supplied by the view.',201,'OperationType','2017-10-27 04:56:56','2017-10-27 04:57:24',NULL),(1062,'protocol','# Extract Fragment Protocol\n# V1.0.2; 2017-07-17 JV\n# Written by Ayesha Saleem\n# Revised by Justin Vrana 2017-07-13; corrected upload issue\n# Revised by Justin Vrana 2017-07-17; unique upload table\nclass Protocol\n\n    def main\n        \n        # Debuggin\'\n        if debug\n            # Set outputs to Fragments (sometimes generate as Plasmids, which is wrong)\n            operations.select { |op| op.input(\"Fragment\").sample_type.name != \"Fragment\" }.each do |op|\n                fragment_sample = Sample.where(sample_type_id: SampleType.find_by_name(\"Fragment\")).sample\n                op.output(\"Fragment\").set item: (produce new_sample fragment_sample.name, of: \"Fragment\", as: \"Gel Slice\")\n            end\n        end\n        \n        operations.retrieve(interactive: false)\n        \n        # Sort operations by gels and columns (these can get out of order from PCR)\n        operations.sort! do |op1, op2| \n            fv1 = op1.input(\"Fragment\")\n            fv2 = op2.input(\"Fragment\")\n            [fv1.item.id, fv1.row, fv1.column] <=> [fv2.item.id, fv2.row, fv2.column]\n        end\n\n        gels = operations.collect{ |op| op.input(\"Fragment\").item }.uniq\n        \n        # Get gel image names\n        operations.running.each do |op|\n            gel = op.input(\"Fragment\").item\n            op.temporary[:image_name] = \"gel_#{gel.id}\"\n        end\n        \n        grouped_by_gel = operations.group_by { |op| op.input(\"Fragment\").item }\n        \n        grouped_by_gel.each do |gel, grouped_ops|\n            grouped_ops.each do |op|\n                op.temporary[:image_name] = \"gel_#{gel.id}\"\n            end\n            \n            show do\n                title \"Image gel #{gel.id}\"\n                check \"Clean the transilluminator with ethanol.\"\n                check \"Put the gel #{gel} on the transilluminator.\"\n                check \"Turn off the room lights before turning on the transilluminator.\"\n                check \"Put the camera hood on, turn on the transilluminator and take a picture using the camera control interface on computer.\"\n                check \"Check to see if the picture matches the gel before uploading.\"\n                check \"Rename the picture you just took exactly as <b>#{grouped_ops.first.temporary[:image_name]}</b>.\"\n            end\n            \n            create_expected_length_table = Proc.new { |ops|\n                t = ops.start_table\n                    .custom_column(heading: \"Gel ID\") { |op| op.input(\"Fragment\").item.id }\n                    .custom_column(heading: \"Row\") { |op| op.input(\"Fragment\").row + 1 }\n                    .custom_column(heading: \"Column\", checkable: true) { |op| op.input(\"Fragment\").column + 1 }\n                    .custom_column(heading: \"Expected Length\") { |op| op.output(\"Fragment\").sample.properties[\"Length\"] }\n                    .custom_input(:correct, heading: \"Does the band match the expected length (y/n)\", type: \"string\") { |op| \n                        d = op.temporary[:correct] || \"y\"\n                        # d = [\"y\",\"n\"].sample if debug\n                        d\n                    }\n                    .validate(:correct) { |op, val| [\"y\",\"n\"].include? val.downcase.strip[0] }\n                    .validation_message(:correct) { |op, k, v| \"Please include a choice (y/n) for fragment #{op.input(\"Fragment\").item}. \\\"#{op.temporary[:correct]}\\\" is invalid.\" }\n                    .end_table\n                t.all  \n            }\n            \n            show_with_input_table(grouped_ops, create_expected_length_table) do\n                title \"Verify Fragment Lengths for gel #{gel.id}\"\n            end\n        end\n        \n        ask_for_uploads\n        \n        # Whether fragment matched length\n        operations.each do |op|\n            if op.temporary[:correct].upcase.start_with?(\"N\")\n                op.error :incorrect_length, \"The fragment did not match the expected length.\"\n            end\n        end\n        \n        if operations.running.none?\n            show do\n                title \"Happy day!\"\n                \n                note \"Since there are no more running protocols, your work is done here. Thanks!\"\n            end\n            \n            return {}\n        end\n        \n        operations.make\n        \n        show do\n            title \"Cut Out Fragments\"\n            note \"Take out #{operations.running.length} 1.5 mL tubes and label accordingly: #{operations.running.collect { |op| op.output(\"Fragment\").item.id }}\"\n            note \"Now, cut out the bands and place them into the 1.5 mL tubes according to the following table:\"\n            table operations.start_table \n            .custom_column(heading: \"Gel ID\") { |op| op.input(\"Fragment\").item.id }\n            .custom_column(heading: \"Row\") { |op| op.input(\"Fragment\").row + 1 }\n            .custom_column(heading: \"Column\", checkable: true) { |op| op.input(\"Fragment\").column + 1 }\n            .custom_column(heading: \"1.5 mL Tube ID\") { |op| op.output(\"Fragment\").item.id }\n            .end_table\n        end\n        \n        min_weight = 0.0\n        max_weight = 10.0\n        \n        create_gel_slice_table = Proc.new { |ops|\n            ops.start_table\n            .custom_column(heading: \"1.5 mL Tube ID\") { |op| op.output(\"Fragment\").item.id }\n            .custom_input(:weight, type: \'number\', heading: \"Weight (g)\") { |op|\n                w = -1.00\n                w = rand(0.1..3.0) if debug\n                w\n            } \n            .validate(:weight) { |op, v| v.between?(min_weight, max_weight) }\n            .validation_message(:weight) { |op, k, v| \n                \"Weight of #{op.output(\"Fragment\").item} needs to be between #{min_weight} and #{max_weight}. Please re-enter weight.\" }\n            .end_table.all\n        }\n        \n        show_with_input_table(operations.running, create_gel_slice_table) do\n            title \"Weight Gel Slices\"\n            note \"Perform this step using the scale inside the gel room.\"\n            check \"Zero the scale with an empty 1.5 mL tube.\"\n            check \"Weigh each slice and enter the weights in the following table:\"\n        end\n        \n        choice = show do\n            title \"Clean Up\"\n            check \"Turn off the transilluminator.\"\n            check \"Dispose of the gel and any gel parts by placing it in the waste container. Spray the surface of the transilluminator with ethanol and wipe until dry using a paper towel.\"\n            check \"Remove the blue light goggles, clean them, and put them back where you found them.\"\n            check \"Clean up the gel box and casting tray by rinsing with water. Return them to the gel station.\"\n            check \"Dispose gloves after leaving the room.\"\n            gels.each do |g|\n                g.mark_as_deleted\n            end\n            select [\"Yes\", \"No\"], var: \"choice\", label: \"Would you like to purify the gel slices immediately?\"\n        end\n        \n        if choice[:choice] == \"Yes\"\n            show do \n                title \"Keep Gel Slices\"\n                note \"Keep the gel slices on your bench to use in the next protocol.\"\n            end\n        else\n            operations.store\n        end\n        \n        #associate gel image, fragment lane with fragment and weight with the gel slices\n        \n        operations.each do |op|\n            i = op.input(\"Fragment\")\n            o = op.output(\"Fragment\").item\n            o.associate(:gel_image, \"Your fragment is in row #{i.row + 1} and column #{i.column + 1}\", op.temporary[:upload]) if o\n            o.associate(:weight, op.temporary[:weight]) if o\n            op.associate(:gel_image, \"Your fragment is in row #{i.row + 1} and column #{i.column + 1}\", op.temporary[:upload])\n            op.plan.associate :choice, choice[:choice]\n        end\n    \n        return {}\n        \n    end\n    \n    def ask_for_uploads\n        # Request technician for uploads\n        # TODO: Ugly. Re-write this as some kind of \"Upload Manager\" convention?\n        counter = 0\n        ready = false\n        msgs = []\n        while counter < 5 and not ready\n            counter += 1\n            msgs.uniq!\n            show do\n                title \"Upload all gel images\"\n                if msgs.any?\n                    warning \"Some images are missing. Make sure the images are named correctly and you\'ve uploaded all of the images\"\n                    msgs.each do |msg|\n                        warning msg if msg\n                    end\n                end\n                upload var: \"my_gel_pic\"\n                \n                t = Table.new\n                t.add_column(\"Gel Row/Col\", operations.map { |op| \n                    f = op.input(\"Fragment\")\n                    \"#{f.row} #{f.column}\"\n                })\n                t.add_column(\"Image name\", operations.map { |op| op.temporary[:image_name] } )\n                t.add_column(\"Uploaded?\", operations.map { |op| \n                    x = \"No\"\n                    x = \"Yes (\\\"#{op.temporary[:image_name]}\\\")\" if op.temporary[:uploaded]\n                    x\n                    } )\n                table t\n            end\n            \n            op_to_file_hash = match_upload_to_operations operations, :image_name, job_id=self.jid\n            op_to_file_hash.each do |op, u|\n                op.temporary[:upload] = u \n            end\n            \n            ready = true\n            operations.each do |op|\n                if op.temporary[:upload].nil?\n                    msgs << \"    Gel image <b>\\\"#{op.temporary[:image_name]}\\\"</b> not uploaded!\"\n                    ready = false\n                end\n            end\n            \n            if counter > 5\n                ready = true\n            end\n            \n            if debug and counter > 1\n                ready = true\n            end\n        end\n    end\n    \n    # method that matches uploads to operations with a temporary[filename_key]\n    def match_upload_to_operations ops, filename_key, job_id=nil, uploads=nil\n        def extract_basename filename\n            ext = File.extname(filename)\n            basename = File.basename(filename, ext)\n        end\n        \n        op_to_upload_hash = Hash.new\n        uploads ||= Upload.where(\"job_id\"=>job_id).to_a if job_id\n            if uploads\n                ops.each do |op|\n                    upload = uploads.select do |u|\n                        basename = extract_basename(u[:upload_file_name])\n                        op.temporary[filename_key].strip == basename.strip\n                    end.first || nil\n                    op_to_upload_hash[op] = upload\n                end\n            end\n        op_to_upload_hash\n    end\nend\n',201,'OperationType','2017-10-27 04:57:06','2017-10-27 04:57:06',NULL),(1063,'cost_model','# Extract Fragment from Gel Cost Model\n\ndef cost(op)\n    {\n        materials: 0.19,\n        labor: 3.02 \n    }      \nend',201,'OperationType','2017-10-27 04:57:18','2017-10-27 04:57:18',NULL),(1064,'documentation','*Run Gel* &#00BB; **Extract Gel Slice** => *Make PCR Fragment*\n\n1. Image the gel\n2. Upload the image\n3. Verify the size of the fragment\n    - If the correct length is verified, the fragment is extracted and proceeds to *Make PCR Fragment*\n    - Otherwise the the fragment is thrown out and operation terminates',201,'OperationType','2017-10-27 04:57:24','2017-10-27 04:57:24',NULL),(1065,'source','module Cloning\n  \n  def check_concentration operations, input_name\n    items = operations.collect { |op| op.input_array(input_name).items.select { |i| i.get(:concentration).nil? } }.flatten.uniq\n    \n    cc = show do \n      title \"Please nanodrop the following #{items.first.object_type.name.pluralize}\"\n      note \"Please nanodrop the following #{items.first.object_type.name.pluralize}:\"\n      items.each do |i|\n        get \"number\", var: \"c#{i.id}\", label: \"#{i} item\", default: 42\n      end\n    end if items.any?\n    \n    items.each do |i|\n      i.associate :concentration, cc[\"c#{i.id}\".to_sym]\n    end\n  end\n  \n    \n # The check_volumes method will have the lab tech ensure that the given input item volumes are above a certain minimum amount, \n  # for each operation. The inputs to check are specified in an array parameter. \n  # The minimum volume is specified in mL on a per-operation basis using the the value stored in op.temporary[<vol_sym>],\n  # where vol_sym is a symbol name of your choice. \n  # Contamination can be checked for too, with the additional option parameter check_contam: true\n  # After determining which inputs for which ops are low volume, this method passes off a hash of \'items -> lists of ops\' to your rebuilder function specified by name as string or symbol in the callback argument.\n  # when the callback method returns, check_volumes loops back and checks the volumes again of the newly assigned unverified input items, and repeats this loop until all given inputs for all ops are verified for their volume.\n  # for a detailed example of how this method can be used, look at the method call in make PCR fragment, and the callback function make_aliquots_from_stock\n  def check_volumes inputs, vol_sym, callback, options = {}  \n    \n    ops_by_item = Hash.new(0)\n    operations.running.each do |op|\n      inputs.each do |input|\n        if ops_by_item.keys.include? op.input(input).item\n          ops_by_item[op.input(input).item].push op\n        else\n          ops_by_item[op.input(input).item] = [op] \n        end\n      end\n    end\n      \n    # while any operations for any of the specified inputs are unverified, check the volumes again and send any bad op/input combos to rebuilder function\n    while ops_by_item.keys.any?\n      verify_data = show do\n        title \"Verify enough volume of each #{inputs.to_sentence(last_word_connector: \", or\")} exists#{options[:check_contam] ? \", or note if contamination is present\" : \"\"}\"\n        \n        ops_by_item.each do |item, ops| \n          volume = 0.0\n          ops.each { |op| volume += op.temporary[vol_sym] }\n          volume = (volume*100).round / 100.0\n          choices = options[:check_contam] ? [\"Yes\", \"No\", \"Contamination is present\"] : [\"Yes\", \"No\"]\n          select choices, var: \"#{item.id}\", label: \"Is there at least #{volume} µL of #{item.id}?\", default: 0\n        end\n      end\n      ops_by_item.each do |item, ops|\n        if verify_data[\"#{item.id}\".to_sym] == \"Yes\"\n          ops_by_item.except! item\n        elsif verify_data[\"#{item.id}\".to_sym] == \"Contamination is present\"\n          item.associate(:contaminated, \"Yes\")\n        end\n      end\n      method(callback.to_sym).call(ops_by_item, inputs) if ops_by_item.keys.any?\n    end\n  end\n  \n  # a common callback for check_volume.\n  # takes in lists of all ops that have input aliquots with insufficient volume, sorted by item,\n  # and takes in the inputs which were checked for those ops.\n  # Deletes bad items and remakes each primer aliquots from primer stock\n  def make_aliquots_from_stock bad_ops_by_item, inputs\n    # bad_ops_by_item is accessible by bad_ops_by_item[item] = [op1, op2, op3...]\n    # where each op has a bad volume reading for the given item\n    \n    # Construct list of all stocks needed for making aliquots. Error ops for which no primer stock is available\n    # for every non-errored op that has low item volume,\n    # replace the old aliquot item with a new one. \n    aliquots_to_make = 0\n    stocks = []\n    ops_by_fresh_item = Hash.new(0)\n    found_items = []\n    stock_table = [[\"Primer Stock ID\", \"Primer Aliquot ID\"]]\n    transfer_table = [[\"Old Aliquot ID\", \"New Aliquot ID\"]]\n    bad_ops_by_item.each do |item, ops|\n        \n      #first, check to see if there is a replacement aliquot availalbe in the inventory\n      fresh_item = item.sample.in(\"Primer Aliquot\").reject {|i| i == item }.first\n      \n      if fresh_item\n        #if a replacement item was found in the inventory, snag it\n        found_items.push fresh_item\n      else\n        # no replacement, found, lets try making one.\n        stock = item.sample.in(\"Primer Stock\").first\n        if stock.nil?\n          # no stock found, replacement could not be made or found: erroring operation\n          ops.each { |op| op.error :no_primer_stock, \"aliquot #{item.id} was bad and a replacement could not be made. You need to order a primer stock for primer sample #{item.sample.id}.\" }\n          bad_ops_by_item.except! item\n        else\n          stocks.push stock\n          aliquots_to_make += 1\n          fresh_item = produce new_sample item.sample.name, of: item.sample.sample_type.name, as: item.object_type.name\n          stock_table.push [stock.id, {content: fresh_item.id, check: true}]\n        end\n      end\n      \n      if fresh_item\n        # for the items where a replacement is able to be found or made, update op item info\n        item.mark_as_deleted\n        bad_ops_by_item.except! item\n        ops_by_fresh_item[fresh_item] = ops\n        ops.each do |op| \n          input = inputs.find { |input| op.input(input).item == item }\n          op.input(input).set item: fresh_item\n        end\n        if item.get(:contaminated) != \"Yes\"\n          transfer_table.push [item.id, {content: fresh_item.id, check: true}]    \n        end\n      end\n    end\n    \n    take found_items, interactive: true if found_items.any?\n    #items are guilty untill proven innocent. all the fresh items will be put back into the list of items to check for volume\n    bad_ops_by_item.merge! ops_by_fresh_item\n    take stocks, interactive: true if stocks.any?\n    \n    # label new aliquot tubes and dilute\n    show do \n      title \"Grab 1.5 mL tubes\"\n      \n      note \"Grab #{aliquots_to_make} 1.5 mL tubes\"\n      note \"Label each tube with the following ids: #{bad_ops_by_item.keys.reject { |item| found_items.include? item }.map { |item| item.id }.sort.to_sentence}\"\n      note \"Using the 100 uL pipette, pipette 90uL of water into each tube\"\n    end if bad_ops_by_item.keys.reject { |item| found_items.include? item }.any?\n  \n    # make new aliquots\n    show do \n      title \"Transfer primer stock into primer aliquot\"\n      \n      note \"Pipette 10 uL of the primer stock into the primer aliquot according to the following table:\"\n      table stock_table\n    end if stocks.any?\n    \n    \n    if transfer_table.length > 1\n      show do\n        title \"Transfer Residual Primer\"\n        \n        note \"Transfer primer residue from the low volume aliquots into the fresh aliquots according to the following table:\"\n        table transfer_table\n      end\n    end\n    \n    release stocks, interactive: true if stocks.any?\n  end\n\n  \n  \n  \n  # Associates specified associations + uploads from :from to :to. This is used primarily to pass sequencing results through items in a plasmid\'s lineage\n  #   e.g., pass_data \"sequence_verified\", \"sequencing results\", from: overnight, to: glycerol_stock\n  #   This will copy all sequencing results and the sequence_verified associations from the overnight to the glycerol stock\n  def pass_data *names, **kwargs\n    from = kwargs[:from]\n    to = kwargs[:to]\n    names.each do |name|\n      keys = from.associations.keys.select { |k| k.include? name }\n      keys.each do |k|\n        to.associate k, from.get(k), from.upload(k)\n      end\n    end\n  end\n  \nend\n\n   ',12,'Library','2017-10-27 05:07:08','2017-10-27 05:07:08',NULL),(1066,'source','module GradientPCR\n  def distribute_pcrs operations, num_therm\n    frags_by_bins = sort_fragments_into_bins operations, num_therm\n    frags_by_bins.reject { |frag_hash| frag_hash[:rows].empty? }.map do |frag_hash|\n      { \n        ops_by_bin: Hash[frag_hash[:rows].sort], bins: frag_hash[:bins], mm: 0, ss: 0, fragments: [], templates: [], forward_primers: [],\n        reverse_primers: [], forward_primer_ids: [], reverse_primer_ids: [], stripwells: [], tanneals: [] \n      }\n    end\n  end\n\n  def sort_fragments_into_bins operations, num_therm\n    operations.each do |op|\n        t1 = op.input(\"Forward Primer\").sample.properties[\"T Anneal\"]\n        t2 = op.input(\"Reverse Primer\").sample.properties[\"T Anneal\"]\n        op.temporary[:tanneal] = [t1, t2].min\n    end\n    \n    temps_by_bins = sort_temperatures_into_bins operations.map { |op| op.temporary[:tanneal] }, num_therm\n\n    operations_copy = Array.new(operations)\n    temps_by_bins.map do |grad_hash|\n      frag_hash = { bins: grad_hash[:bins], rows: Hash.new { |h, k| h[k] = [] } }\n      grad_hash[:rows].each do |b, ts|\n        frag_hash[:rows][b] += ts.map do |t|\n          op = operations_copy.find { |op| op.temporary[:tanneal] == t }\n          operations_copy.delete_at(operations_copy.index(op))\n          op\n        end\n      end\n      \n      frag_hash[:rows].each { |b, ops| ops.extend(OperationList) }\n      frag_hash\n    end\n  end\n\n  def sort_temperatures_into_bins an_temps, num_therm\n    bins = [0.0, 0.75, 2.0, 3.7, 6.1, 7.9, 9.3, 10.0]\n    puts \"\\n#{\"Annealing temperatures:\"} #{an_temps.to_s}\"\n\n    best_bin_set = find_best_bin_set an_temps, bins, (44..62).map { |t| t / 1 }, Array.new, num_therm\n    best_grad_set = make_grad_hash_set_from_bin_set(an_temps, best_bin_set)\n    puts \"\\n#{\"Best bin set:\"} #{best_bin_set}\"\n    puts \"\\n#{\"Best gradient set score:\"} #{score_set best_grad_set}\"\n    puts \"#{\"Best gradient set: \"} #{therm_format best_grad_set}\"\n\n    opt_best_grad_set = optimize_grad_set best_grad_set\n    puts \"\\n#{\"Best gradient set (optimized) score:\"} #{score_set opt_best_grad_set}\"\n    puts \"#{\"Best gradient set (optimized): \"} #{therm_format opt_best_grad_set}\"\n    puts opt_best_grad_set\n\n    normal_bin_set = [[44],[60],[64],[67]]\n    normal_grad_set = make_grad_hash_set_from_bin_set an_temps, normal_bin_set\n    puts \"\\n#{\"Normal gradient set score:\"} #{score_bin_set an_temps, normal_bin_set}\"\n    puts \"#{\"Normal gradient set:\"} #{therm_format normal_grad_set}\"\n\n    return opt_best_grad_set\n  end\n\n  def find_best_bin_set temps, bins, transforms, base_bin_set, num_bin_sets\n    return base_bin_set if num_bin_sets == 0\n\n    best_bin_set = nil\n    transforms.each { |trans|\n      t_bins = bins.map { |t| t + trans }\n      next_base_bin_set = [t_bins] + base_bin_set\n      next if (make_grad_hash temps, next_base_bin_set.flatten).nil?\n\n      bin_set = (find_best_bin_set temps, bins, transforms[1..-1], next_base_bin_set, num_bin_sets - 1)\n      best_bin_set ||= bin_set\n      best_bin_set = bin_set if score_bin_set(temps, bin_set) < score_bin_set(temps, best_bin_set)\n    }\n    best_bin_set\n  end\n\n  def make_grad_hash temps, bins\n    bin_rev = bins.reverse\n    grad_hash = { bins: bins, rows: Hash.new { |h, k| h[k] = [] } }\n    temps.each { |t|\n      key = \"#{bin_rev.find { |b| b <= t }}\"\n      return nil if key.empty?\n      grad_hash[:rows][key].push t\n    }\n    grad_hash\n  end\n\n  def score grad_hash\n    score = 0.0\n    grad_hash[:rows].each { |b, ts|\n      ts.each { |t| score = score + t - b.to_f }\n    }\n    score\n  end\n\n  def score_temps temps, bin\n    temps.inject(0) { |sum, t| sum + t - bin }\n  end\n\n  def score_set grad_hash_set\n    total = 0.0\n    grad_hash_set.each { |grad_hash| total = total + score(grad_hash) }\n    total.round(2)\n  end\n\n  def score_bin_set temps, bin_set\n    grad_hash = make_grad_hash temps, bin_set.flatten.sort\n    score(grad_hash).round(2)\n  end\n\n  def make_grad_hash_set_from_bin_set temps, bin_set\n    grand_grad_hash = make_grad_hash temps, bin_set.flatten.sort\n    bin_set.map { |bins|\n      row_hash = Hash.new\n      bins.each do |b|\n        if grand_grad_hash[:rows][b.to_s].any?\n          row_hash[b.to_s] = grand_grad_hash[:rows][b.to_s]\n          grand_grad_hash[:rows].delete(b.to_s)\n        end\n      end\n      { bins: bins, rows: row_hash }\n    }\n  end\n\n  def optimize_grad_set grad_set\n    grad_set.each_with_index do |grad_hash, idx|\n      if grad_hash[:rows].length <= 1 # Can take another temperature set\n        high_score_hash_and_bin = find_highest_scoring_hash_and_bin grad_set, grad_hash\n        if !high_score_hash_and_bin[:hash].empty? # Move highest scoring temperature set to this grad_hash\n          hs_bin = high_score_hash_and_bin[:bin]\n          hs_ts = high_score_hash_and_bin[:hash][hs_bin]\n          grad_hash[:rows].merge!({ hs_bin => hs_ts }) { |bin, ts1, ts2| ts1 + ts2 }\n          high_score_hash_and_bin[:hash].delete(hs_bin)\n        end\n        if grad_hash[:rows].length == 1 && grad_set[(idx + 1)..-1].any? { |gh| gh[:rows].length == 1 } # Move isolated temperature set to this grad_hash\n          targ_hash = grad_set[(idx + 1)..-1].find { |gh| gh[:rows].length == 1 }\n          targ_bin = targ_hash[:rows].keys.find { |b| targ_hash[:rows][b].any? }\n          grad_hash[:rows].merge!({ targ_bin => targ_hash[:rows][targ_bin] }) { |bin, ts1, ts2| ts1 + ts2 }\n          targ_hash[:rows].delete(targ_bin)\n          #puts \"HEY\"\n        end\n      end\n\n      update_rows grad_hash\n    end\n    \n    grad_set.each { |grad_hash| update_rows grad_hash }\n  end\n\n  def update_rows grad_hash  \n    if grad_hash[:rows].length == 1 # Set single temperature\n      row = grad_hash[:rows].values.first\n      grad_hash[:rows] = { row.min.to_s => row.sort }\n      grad_hash[:bins] = [row.min]\n    elsif grad_hash[:rows].length == 2 # Set the upper and lower temperature bounds\n      rows = grad_hash[:rows].values\n      grad_hash[:rows] = { rows.first.min.to_s => rows.first.sort, rows.last.min.to_s => rows.last.sort }\n      grad_hash[:bins] = [grad_hash[:rows].keys.min.to_f, grad_hash[:rows].keys.max.to_f].sort\n    end\n  end\n\n  def num_bins_with_any_temps_set grad_set\n    grad_set.map { |gh| gh[:rows].values.inject(0) { |sum, ts| sum + (ts.any? ? 1 : 0) } }\n  end\n\n  def find_highest_scoring_hash_and_bin grad_set, grad_hash\n    high_score_hash_and_bin = nil\n    grad_set.each { |gh|\n      next if gh == grad_hash || gh[:rows].length <= 2\n      gh[:rows].each { |b, ts|\n        high_score_hash_and_bin ||= { hash: gh[:rows], bin: b }\n        hs_bin = high_score_hash_and_bin[:bin]\n        hs_ts = high_score_hash_and_bin[:hash][hs_bin]\n        if score_temps(ts, b.to_f) > score_temps(hs_ts, hs_bin.to_f)\n          high_score_hash_and_bin = { hash: gh[:rows], bin: b }\n        end\n      }\n    }\n    high_score_hash_and_bin || { hash: {}, bin: \"\" }\n  end\n\n  def therm_format grad_set\n    str = \"\"\n    grad_set.each_with_index { |grad_hash, idx|\n      str += \"\\n#{\"Therm #{idx + 1}:\"} Set gradient #{grad_hash[:bins].first}-#{grad_hash[:bins].last}\"\n      grad_hash[:rows].each { |b, ts|\n        str += \"\\n    #{b}: #{ts.to_s}\"\n      }\n    }\n    str\n  end\nend',11,'Library','2017-10-27 05:07:16','2017-10-27 05:07:16',NULL),(1067,'protocol','needs \"Cloning Libs/Cloning\"\r\nneeds \"Cloning Libs/Gradient PCR\"\r\n\r\nclass Protocol\r\n    \r\n  # I/O\r\n  FWD = \"Forward Primer\"\r\n  REV = \"Reverse Primer\"\r\n  TEMPLATE = \"Template\"\r\n  FRAGMENT = \"Fragment\"\r\n  \r\n  # get the gradient PCR magic\r\n  include Cloning\r\n  include GradientPCR\r\n\r\n\r\n\r\n  def main\r\n      \r\n    # grab all necessary items\r\n    dilute_stocks_and_retrieve TEMPLATE\r\n    kapa_stock_item = find(:sample, name: \"Kapa HF Master Mix\")[0].in(\"Enzyme Stock\")[0]\r\n    take [kapa_stock_item], interactive: true,  method: \"boxes\"\r\n    \r\n    #check the volumes of input primers for all operations, and ensure they are sufficient\r\n    operations.each { |op| op.temporary[:primer_vol] = 2.5 }\r\n    check_volumes [FWD, REV], :primer_vol, :make_aliquots_from_stock, check_contam: true\r\n    \r\n    # build a pcrs hash that groups pcr by T Anneal\r\n    pcrs = build_pcrs_hash\r\n\r\n    # generate a table for stripwells\r\n    stripwell_tab = build_stripwell_table pcrs\r\n    \r\n    # prepare and label stripwells for PCR\r\n    prepare_stripwells stripwell_tab\r\n    \r\n    # add templates to stripwells for pcr\r\n    load_templates pcrs\r\n    \r\n    # add primers to stripwells\r\n    load_primers pcrs\r\n\r\n    # add kapa master mix to stripwells\r\n    add_mix stripwell_tab, kapa_stock_item\r\n    \r\n    # run the thermocycler\r\n    start_pcr pcrs\r\n    \r\n    # store \r\n    operations.running.store io: \"input\", interactive: true, method: \"boxes\"\r\n    release [kapa_stock_item], interactive: true\r\n    \r\n    return {}\r\n  end\r\n  \r\n  # dilute to 1ng/uL stocks if necessary\r\n  def dilute_stocks_and_retrieve input\r\n  \r\n    # only use inputs that haven\'t been diluted and that don\'t have diluted stocks already\r\n    ops_w_undiluted_template = operations.reject { true }\r\n    operations.each do |op|\r\n        next if op.input(input).object_type.name.include?(\"1 ng/µL\")\r\n        \r\n        sample = op.input(input).sample\r\n        ot_name = op.input(input).object_type.name.include?(\"Unverified\") ? \"1 ng/µL Plasmid Stock\" : \"1 ng/µL \" + sample.sample_type.name + \" Stock\"\r\n        diluted_stock = sample.in(ot_name).first\r\n        \r\n        if diluted_stock\r\n            op.input(input).set item: diluted_stock\r\n        else\r\n            new_stock = produce new_sample sample.name, of: sample.sample_type.name, as: ot_name\r\n            op.temporary[:diluted_stock] = new_stock\r\n            \r\n            ops_w_undiluted_template.push op\r\n        end\r\n    end\r\n    \r\n    # retrieve operation inputs (doesn\'t include the stocks replaced by diluted stocks above)\r\n    ops_w_undiluted_template.retrieve\r\n    \r\n    # all stocks may be diluted already\r\n    if ops_w_undiluted_template.empty?\r\n        operations.retrieve\r\n        return\r\n    end\r\n    \r\n    # ensure concentrations\r\n    check_concentration ops_w_undiluted_template, input\r\n    \r\n    # dilute stocks\r\n    show do\r\n      title \"Make 1 ng/µL Template Stocks\"\r\n      \r\n      check \"Grab #{ops_w_undiluted_template.length} 1.5 mL tubes, label them with #{ops_w_undiluted_template.map { |op| op.temporary[:diluted_stock].id }.join(\", \")}\"\r\n      check \"Add template stocks and water into newly labeled 1.5 mL tubes following the table below\"\r\n      \r\n      table ops_w_undiluted_template\r\n          .start_table\r\n          .custom_column(heading: \"Newly-labeled tube\") { |op| op.temporary[:diluted_stock].id }\r\n          .input_item(input, heading: \"Template stock, 1 µL\", checkable: true)\r\n          .custom_column(heading: \"Water volume\", checkable: true) { |op| op.input(input).item.get(:concentration).to_f - 1 }\r\n          .end_table\r\n      check \"Vortex and then spin down for a few seconds\"\r\n    end\r\n    \r\n    # return input stocks\r\n    release ops_w_undiluted_template.map { |op| op.input(input).item }, interactive: true, method: \"boxes\"\r\n    \r\n    # retrieve the rest of the inputs\r\n    operations.reject { |op| ops_w_undiluted_template.include? op }.retrieve\r\n    \r\n    # set diluted stocks as inputs\r\n    ops_w_undiluted_template.each { |op| op.input(input).set item: op.temporary[:diluted_stock] }\r\n  end\r\n  \r\n  \r\n  # TODO dilute from stock if item is aliquot\r\n  # Callback for check_volume.\r\n  # takes in lists of all ops that have input aliquots with insufficient volume, sorted by item,\r\n  # and takes in the inputs which were checked for those ops.\r\n  # Deletes bad items and remakes each from primer stock\r\n  def make_aliquots_from_stock bad_ops_by_item, inputs\r\n    # bad_ops_by_item is accessible by bad_ops_by_item[item] = [op1, op2, op3...]\r\n    # where each op has a bad volume reading for the given item\r\n    \r\n    # Construct list of all stocks needed for making aliquots. Error ops for which no primer stock is available\r\n    # for every non-errored op that has low item volume,\r\n    # replace the old aliquot item with a new one. \r\n    aliquots_to_make = 0\r\n    stocks = []\r\n    ops_by_fresh_item = Hash.new(0)\r\n    stock_table = [[\"Primer Stock ID\", \"Primer Aliquot ID\"]]\r\n    transfer_table = [[\"Old Aliquot ID\", \"New Aliquot ID\"]]\r\n    bad_ops_by_item.each do |item, ops|\r\n      stock = item.sample.in(\"Primer Stock\").first ######## items is a string?\r\n      if stock.nil?\r\n        ops.each { |op| op.error :no_primer, \"You need to order a primer stock for primer sample #{item.sample.id}.\" }\r\n        bad_ops_by_item.except! item\r\n      else\r\n        stocks.push stock\r\n        aliquots_to_make += 1\r\n        item.mark_as_deleted\r\n        fresh_item = produce new_sample item.sample.name, of: item.sample.sample_type.name, as: item.object_type.name\r\n        bad_ops_by_item.except! item\r\n        ops_by_fresh_item[fresh_item] = ops\r\n        ops.each do |op| \r\n          input = inputs.find { |input| op.input(input).item == item }\r\n          op.input(input).set item: fresh_item\r\n        end\r\n        stock_table.push [stock.id, {content: fresh_item.id, check: true}]\r\n        if item.get(:contaminated) != \"Yes\"\r\n          transfer_table.push [item.id, {content: fresh_item.id, check: true}]    \r\n        end\r\n      end\r\n    end\r\n    \r\n    bad_ops_by_item.merge! ops_by_fresh_item\r\n    take stocks, interactive: true\r\n    \r\n    # label new aliquot tubes and dilute\r\n    show do \r\n      title \"Grab 1.5 mL tubes\"\r\n      \r\n      note \"Grab #{aliquots_to_make} 1.5 mL tubes\"\r\n      note \"Label each tube with the following ids: #{bad_ops_by_item.keys.map { |item| item.id }.sort.to_sentence}\"\r\n      note \"Using the 100 uL pipette, pipette 90uL of water into each tube\"\r\n    end\r\n  \r\n    # make new aliquots\r\n    show do \r\n      title \"Transfer primer stock into primer aliquot\"\r\n      \r\n      note \"Pipette 10 uL of the primer stock into the primer aliquot according to the following table:\"\r\n      table stock_table\r\n    end\r\n    \r\n    \r\n    if transfer_table.length > 1\r\n      show do\r\n        title \"Transfer Residual Primer\"\r\n        \r\n        note \"Transfer primer residue from the low volume aliquots into the fresh aliquots according to the following table:\"\r\n        table transfer_table\r\n      end\r\n    end\r\n    \r\n    release stocks, interactive: true\r\n  end\r\n  \r\n  # build a pcrs hash that groups pcr by T Anneal\r\n  def build_pcrs_hash\r\n    pcrs = distribute_pcrs operations.running, 4\r\n    pcrs.each do |pcr|\r\n      lengths = pcr[:ops_by_bin].values.flatten.collect { |op| op.input(TEMPLATE).sample.properties[\"Length\"] }\r\n      extension_time = (lengths.max)/1000.0*30\r\n      # adding more extension time for longer size PCR.\r\n      if lengths.max < 2000\r\n        extension_time += 30\r\n      elsif lengths.max < 3000\r\n        extension_time += 60\r\n      else\r\n        extension_time += 90\r\n      end\r\n      extension_time = 3 * 60 if extension_time < 3 * 60\r\n      pcr[:mm], pcr[:ss] = (extension_time.to_i).divmod(60)\r\n      pcr[:mm] = \"0#{pcr[:mm]}\" if pcr[:mm].between?(0, 9)\r\n      pcr[:ss] = \"0#{pcr[:ss]}\" if pcr[:ss].between?(0, 9)\r\n\r\n      # set up stripwells (one for each temperature bin)\r\n      pcr[:ops_by_bin].each do |bin, ops|\r\n          ops.make\r\n          pcr[:stripwells] += ops.output_collections[FRAGMENT]\r\n      end\r\n    end\r\n    pcrs\r\n  end\r\n  \r\n  # generate a table for stripwells\r\n  def build_stripwell_table pcrs\r\n    stripwells = pcrs.collect { |pcr| pcr[:stripwells] }.flatten\r\n    stripwell_tab = [[\"Stripwell\", \"Wells to pipette\"]] + stripwells.map { |sw| [\"#{sw.id} (#{sw.num_samples <= 6 ? 6 : 12} wells)\", { content: sw.non_empty_string, check: true }] }\r\n  end\r\n  \r\n  # prepare and label stripwells for PCR\r\n    def prepare_stripwells stripwell_tab\r\n    show do\r\n      title \"Label and prepare stripwells\"\r\n      \r\n      note \"Label stripwells, and pipette 19 µL of molecular grade water into each based on the following table:\"\r\n      table stripwell_tab\r\n      stripwell_tab\r\n    end\r\n  end\r\n  \r\n  # add templates to stripwells for pcr\r\n  def load_templates pcrs\r\n    pcrs.each_with_index do |pcr, idx|\r\n      show do\r\n        title \"Load templates for PCR ##{idx + 1}\"\r\n        \r\n        pcr[:ops_by_bin].each do |bin, ops|\r\n          table ops\r\n              .start_table\r\n              .output_collection(FRAGMENT, heading: \"Stripwell\")\r\n              .custom_column(heading: \"Well\") { |op| op.output(FRAGMENT).column + 1 }\r\n              .input_item(TEMPLATE, heading: \"Template, 1 µL\", checkable: true)\r\n              .end_table\r\n        end\r\n        warning \"Use a fresh pipette tip for each transfer.\".upcase\r\n      end\r\n    end\r\n  end\r\n  \r\n  # add primers to stripwells\r\n  def load_primers pcrs\r\n    pcrs.each_with_index do |pcr, idx|\r\n      show do\r\n        title \"Load primers for PCR ##{idx + 1}\"\r\n        \r\n        pcr[:ops_by_bin].each do |bin, ops|\r\n          table ops.start_table\r\n              .output_collection(FRAGMENT, heading: \"Stripwell\")\r\n              .custom_column(heading: \"Well\") { |op| op.output(FRAGMENT).column + 1 }\r\n              .input_item(FWD, heading: \"Forward Primer, 2.5 µL\", checkable: true)\r\n              .input_item(REV, heading: \"Reverse Primer, 2.5 µL\", checkable: true)\r\n              .end_table\r\n        end\r\n        warning \"Use a fresh pipette tip for each transfer.\".upcase\r\n      end\r\n    end\r\n  end\r\n  \r\n  # add kapa master mix to stripwells\r\n  def add_mix stripwell_tab, kapa_stock_item\r\n      show do\r\n          title \"Add Master Mix\"\r\n          \r\n          note \"Pipette 25 µL of master mix (#{kapa_stock_item}) into stripwells based on the following table:\"\r\n          table stripwell_tab\r\n          warning \"USE A NEW PIPETTE TIP FOR EACH WELL AND PIPETTE UP AND DOWN TO MIX.\"\r\n          check \"Cap each stripwell. Press each one very hard to make sure it is sealed.\"\r\n      end\r\n  end\r\n  \r\n  # run the thermocycler and update the positions of the stripwells\r\n  def start_pcr pcrs\r\n      pcrs.each_with_index do |pcr, idx|\r\n        is_gradient = pcr[:bins].length > 1\r\n        \r\n        thermocycler = show do\r\n          if !is_gradient\r\n            title \"Start PCR ##{idx + 1} at #{pcr[:bins].first} C\"\r\n            \r\n            check \"Place the stripwell(s) #{pcr[:stripwells].collect { |sw| \"#{sw}\" }.join(\", \")} into an available thermal cycler and close the lid.\"\r\n            get \"text\", var: \"name\", label: \"Enter the name of the thermocycler used\", default: \"TC1\"\r\n            check \"Click \'Home\' then click \'Saved Protocol\'. Choose \'YY\' and then \'CLONEPCR\'.\"\r\n            check \"Set the anneal temperature to #{pcr[:bins].first}. This is the 3rd temperature.\"\r\n          else\r\n            title \"Start PCR ##{idx + 1} (gradient) over range #{pcr[:bins].first}-#{pcr[:bins].last} C\"\r\n            check \"Click \'Home\' then click \'Saved Protocol\'. Choose \'YY\' and then \'CLONEPCR\'.\"\r\n            check \"Click on annealing temperature -> options, and check the gradient checkbox.\"\r\n            check \"Set the annealing temperature range to be #{pcr[:bins].first}-#{pcr[:bins].last} C.\"\r\n            note \"The following stripwells are ordered front to back.\"\r\n            pcr[:stripwells].map.with_index do |sw, idx|\r\n              temp = pcr[:ops_by_bin].keys[idx].to_f\r\n              row_num = pcr[:bins].index temp\r\n              row_letter = (\'H\'.ord - row_num).chr\r\n              row_letter = \'A\' if pcr[:bins].length == 2 && idx == 1\r\n              check \"Place the stripwell #{sw} into Row #{row_letter} (#{temp} C) of an available thermal cycler.\"\r\n            end\r\n            get \"text\", var: \"name\", label: \"Enter the name of the thermocycler used\", default: \"TC1\"\r\n          end\r\n          check \"Set the 4th time (extension time) to be #{pcr[:mm]}:#{pcr[:ss]}.\"\r\n          check \"Press \'Run\' and select 50 µL.\"\r\n        end\r\n        \r\n        # set the location of the stripwell\r\n        pcr[:stripwells].flatten.each do |sw|\r\n          sw.move thermocycler[:name]\r\n        end\r\n      end\r\n  end\r\nend',183,'OperationType','2017-10-27 05:09:15','2017-10-27 05:09:15',NULL),(1068,'protocol','\n#TO DO: 100 BP LADDER ONLY WHEN A FRAGMENT LESS THAN 500 BP ONLY \n\nclass Protocol\n    \n    # PCR puts stripwells out of operations order. This sorts gel lanes by stripwell to make tables nicer\n    def arrange_gels_by_stripwells ops\n        # get stripwell vals\n        stripwells = ops.map { |op| op.input(\"Fragment\").collection }.uniq.sort { |sw1, sw2| sw1.id <=> sw2.id }\n        sw_size = stripwells.first.object_type.columns\n        wells = ops.map do |op|\n            sw_offset = stripwells.index(op.input(\"Fragment\").collection) * sw_size\n            op.temporary[:sw_val] = sw_offset + op.input(\"Fragment\").column\n            op.temporary[:sw_val]\n        end\n        # show { note \"wells #{wells}\" }\n        \n        # get lane vals\n        gels = ops.map { |op| op.input(\"Gel\").collection }.uniq.sort { |g1, g2| g1.id <=> g2.id }\n        gel_size = gels.first.object_type.rows * gels.first.object_type.columns\n        gel_columns = gels.first.object_type.columns\n        lanes = ops.map do |op| \n            gel_offset = gels.index(op.input(\"Gel\").collection) * gel_size\n            row_offset = op.input(\"Gel\").row * gel_columns\n            gel_offset + row_offset + op.input(\"Gel\").column\n        end\n        # show { note \"lanes #{lanes}\" }\n        \n        # sort lanes by stripwells\n        wells_sorted = wells.sort\n        lanes_sorted = lanes.sort\n        well_to_lane = lanes_sorted.each_with_index.each_with_object({}) do |(l, i), hsh|\n          hsh[wells_sorted[i]] = l\n        end\n        # show { note \"well_to_lane #{well_to_lane.to_s}\" }\n        \n        lanes_ordered_by_well = wells.map { |well| well_to_lane[well] }\n        # show { note \"lanes_ordered_by_well #{lanes_ordered_by_well}\" }\n        \n        # associate operations with new gel, rows & columns\n        ops.each_with_index do |op, idx|\n            gel_idx = lanes_ordered_by_well[idx] / gel_size\n            lane = lanes_ordered_by_well[idx] - gel_idx * gel_size\n            row = lane / gel_columns\n            column = lane % gel_columns\n            \n            gel_fv = op.input(\"Gel\")\n            gel_fv.set collection: gels[gel_idx]\n            gel_fv.row = row\n            gel_fv.column = column\n            gel_fv.save\n            \n            # show { note \"op #{idx}: col: #{op.input(\"Gel\").collection.id}, row: #{op.input(\"Gel\").row}, column: #{op.input(\"Gel\").column}\" }\n        end\n    end\n    \n  def main\n      \n      debug = false\n\n    operations.retrieve interactive: false\n\n    arrange_gels_by_stripwells operations.reject { |op| op.virtual? }\n\n    # Don\'t use generic operations.make\n    operations.each do |op|\n        op.output(\"Fragment\").make_part(\n            op.input(\"Gel\").collection,\n            op.input(\"Gel\").row,\n            op.input(\"Gel\").column\n        )\n    end\n    \n    gels = operations.map { |op| op.input(\"Gel\").collection }.uniq\n    stripwells = operations.map { |op| op.input(\"Fragment\").collection }.uniq.sort { |sw1, sw2| sw1.id <=> sw2.id }\n    \n    # Find a ladder\n    ladder_100 = Sample.find_by_name(\"100 bp Ladder\")\n    ladder_1k = Sample.find_by_name(\"1 kb Ladder\")\n    dye = Sample.find_by_name(\"6X Loading Dye\")\n    items = [ladder_100.in(\"Ladder Aliquot\").first,\n             ladder_1k.in(\"Ladder Aliquot\").first,\n             dye.in(\"Screw Cap Tube\").first]\n    \n    take items + gels.collect { |i| Item.find_by_id(i.id) } + stripwells.collect { |i| Item.find_by_id(i.id) }, interactive: true\n    \n    show do\n        title \"Set up the power supply\"\n        \n        note  \"In the gel room, obtain a power supply and set it to 80 V and with a 40 minute timer.\"\n        note  \"Attach the electrodes of an appropriate gel box lid from A7.525 to the power supply.\"\n        \n        image \"Items/gel_power_settings.JPG\" \n    end\n    \n     show do\n        title \"Set up the gel box(s).\"\n        \n        check \"Remove the casting tray(s) (with gel(s)) and place it(them) on the bench.\"\n        check \"Using the graduated cylinder at A5.305, fill the gel box(s) with 200 mL of 1X TAE from J2 at A5.500. TAE should just cover the center of the gel box(s).\"\n        check \"With the gel box(s) electrodes facing away from you, place the casting tray(s) (with gel(s)) back in the gel box(s). The top lane(s) should be on your left, as the DNA will move to the right.\"\n        check \"Using the graduated cylinder, add 50 mL of 1X TAE from J2 at A5.500 so that the surface of the gel is covered.\"\n        check \"Remove the comb(s) and place them in the appropriate box(s) in A7.325.\"\n        check \"Put the graduated cylinder back at A5.305.\"\n        \n        image \"Items/gel_fill_TAE_to_line.JPG\"\n    end\n    \n    #ONLY DO 100 BP IF THERE IS FRAGMENT W LENGTH < 500 BP\n    gels.each do |gel|\n        gel.set 0,0,ladder_1k.id\n        gel.set 0,1, ladder_100.id\n        gel.set 1,0, ladder_1k.id\n        gel.set 1,1, ladder_100.id\n        show do\n            title \"Add Ladders to Gel\"\n            note \"Pipette 10 uL of the 1 kb ladder to positions (1,1) and (2,1) of gel #{gel.id}\"\n            note \"Pipette 10 uL of the 100bp ladder to positions (1,2) and (2,2) of gel #{gel.id}\"\n        end\n    end\n    \n    show do \n        title \"Add Dye to Each Well\"\n        stripwells.each do |s|\n            note \"Add 10 uL dye to stripwell #{s.id} from wells #{s.non_empty_string}\"\n        end\n    end\n   \n#   operations.each_with_index do |op, i|\n#       f = op.input(\"Fragment\")\n       \n#       unless op.input(\"Fragment\").column\n#          f.column = i % 6\n#       end\n   \n#       unless op.input(\"Fragment\").row \n#          f.row = (i / 6).ceil\n#       end\n       \n#       f.save\n#   end\n   \n   \n    # TO DO: Fix loading if ladders exist\n    show do \n        title \"Transfer 50 uL of each PCR result into indicated gel lane\"\n        note \"Transfer samples from each stripwell to the gel(s) according to the following table:\"\n        table operations.reject { |op| op.virtual? }.sort { |op1, op2| op1.input(\"Fragment\").item.id <=> op2.input(\"Fragment\").item.id }.extend(OperationList).start_table\n            .input_collection(\"Fragment\", heading: \"Stripwell\")\n            .custom_column(heading: \"Well Number\") { |op| (op.input(\"Fragment\").column + 1)  }\n            .input_collection(\"Gel\", heading: \"Gel\")\n            .custom_column(heading: \"Gel Row\") { |op| (op.input(\"Gel\").row + 1) }\n            .custom_column(heading: \"Gel Column\", checkable: true) { |op| (op.input(\"Gel\").column + 1) }\n        .end_table\n    end\n    \n    show do\n        title \"Start Electrophoresis\"\n        note \"Carefully attach the gel box lid(s) to the gel box(es), being careful not to bump the samples out of the wells. Attach the red electrode to the red terminal of the power supply, and the black electrode to the neighboring black terminal. Hit the start button on the gel boxes - usually a small running person icon.\"\n        note \"Make sure the power supply is not erroring (no E* messages) and that there are bubbles emerging from the platinum wires in the bottom corners of the gel box.\"\n        image \"gel_check_for_bubbles\"\n    end\n    \n    show do \n        title \"Discard Stripwells\"\n        note \"Discard all the empty stripwells\"\n        operations.each do |op|\n            op.input(\"Fragment\").item.mark_as_deleted\n        end\n    end\n    \n    show do\n        title \"Set a timer\"\n        \n        check \"When you get back to your bench, set a 40 minute timer.\" \n        check \"When the 40 minute timer is up, grab a lab manager to check on the gel. The lab manager may have you set another timer after checking the gel.\"\n    end\n    \n    release items, interactive: true\n    \n    return {}\n    \n  end\n\nend\n',186,'OperationType','2017-10-27 05:25:09','2017-10-27 05:28:57',NULL),(1069,'protocol','\n#TO DO: 100 BP LADDER ONLY WHEN A FRAGMENT LESS THAN 500 BP ONLY \n\nclass Protocol\n    \n    # PCR puts stripwells out of operations order. This sorts gel lanes by stripwell to make tables nicer\n    def arrange_gels_by_stripwells ops\n        # get stripwell vals\n        stripwells = ops.map { |op| op.input(\"Fragment\").collection }.uniq.sort { |sw1, sw2| sw1.id <=> sw2.id }\n        sw_size = stripwells.first.object_type.columns\n        wells = ops.map do |op|\n            sw_offset = stripwells.index(op.input(\"Fragment\").collection) * sw_size\n            op.temporary[:sw_val] = sw_offset + op.input(\"Fragment\").column\n            op.temporary[:sw_val]\n        end\n        # show { note \"wells #{wells}\" }\n        \n        # get lane vals\n        gels = ops.map { |op| op.input(\"Gel\").collection }.uniq.sort { |g1, g2| g1.id <=> g2.id }\n        gel_size = gels.first.object_type.rows * gels.first.object_type.columns\n        gel_columns = gels.first.object_type.columns\n        lanes = ops.map do |op| \n            gel_offset = gels.index(op.input(\"Gel\").collection) * gel_size\n            row_offset = op.input(\"Gel\").row * gel_columns\n            gel_offset + row_offset + op.input(\"Gel\").column\n        end\n        # show { note \"lanes #{lanes}\" }\n        \n        # sort lanes by stripwells\n        wells_sorted = wells.sort\n        lanes_sorted = lanes.sort\n        well_to_lane = lanes_sorted.each_with_index.each_with_object({}) do |(l, i), hsh|\n          hsh[wells_sorted[i]] = l\n        end\n        # show { note \"well_to_lane #{well_to_lane.to_s}\" }\n        \n        lanes_ordered_by_well = wells.map { |well| well_to_lane[well] }\n        # show { note \"lanes_ordered_by_well #{lanes_ordered_by_well}\" }\n        \n        # associate operations with new gel, rows & columns\n        ops.each_with_index do |op, idx|\n            gel_idx = lanes_ordered_by_well[idx] / gel_size\n            lane = lanes_ordered_by_well[idx] - gel_idx * gel_size\n            row = lane / gel_columns\n            column = lane % gel_columns\n            \n            gel_fv = op.input(\"Gel\")\n            gel_fv.set collection: gels[gel_idx]\n            gel_fv.row = row\n            gel_fv.column = column\n            gel_fv.save\n            \n            # show { note \"op #{idx}: col: #{op.input(\"Gel\").collection.id}, row: #{op.input(\"Gel\").row}, column: #{op.input(\"Gel\").column}\" }\n        end\n    end\n    \n  def main\n      \n      debug = false\n\n    operations.retrieve interactive: false\n\n    arrange_gels_by_stripwells operations.reject { |op| op.virtual? }\n\n    # Don\'t use generic operations.make\n    operations.each do |op|\n        op.output(\"Fragment\").make_part(\n            op.input(\"Gel\").collection,\n            op.input(\"Gel\").row,\n            op.input(\"Gel\").column\n        )\n    end\n    \n    gels = operations.map { |op| op.input(\"Gel\").collection }.uniq\n    stripwells = operations.map { |op| op.input(\"Fragment\").collection }.uniq.sort { |sw1, sw2| sw1.id <=> sw2.id }\n    \n    # Find a ladder\n    ladder_100 = Sample.find_by_name(\"100 bp Ladder\")\n    ladder_1k = Sample.find_by_name(\"1 kb Ladder\")\n    dye = Sample.find_by_name(\"6X Loading Dye\")\n    items = [ladder_100.in(\"Ladder Aliquot\").first,\n             ladder_1k.in(\"Ladder Aliquot\").first,\n             dye.in(\"Screw Cap Tube\").first]\n    show { note gels.to_s; note stripwells.to_s }\n    take items + gels.collect { |i| Item.find_by_id(i.id) } + stripwells.collect { |i| Item.find_by_id(i.id) }, interactive: true\n    \n    show do\n        title \"Set up the power supply\"\n        \n        note  \"In the gel room, obtain a power supply and set it to 80 V and with a 40 minute timer.\"\n        note  \"Attach the electrodes of an appropriate gel box lid from A7.525 to the power supply.\"\n        \n        image \"Items/gel_power_settings.JPG\" \n    end\n    \n     show do\n        title \"Set up the gel box(s).\"\n        \n        check \"Remove the casting tray(s) (with gel(s)) and place it(them) on the bench.\"\n        check \"Using the graduated cylinder at A5.305, fill the gel box(s) with 200 mL of 1X TAE from J2 at A5.500. TAE should just cover the center of the gel box(s).\"\n        check \"With the gel box(s) electrodes facing away from you, place the casting tray(s) (with gel(s)) back in the gel box(s). The top lane(s) should be on your left, as the DNA will move to the right.\"\n        check \"Using the graduated cylinder, add 50 mL of 1X TAE from J2 at A5.500 so that the surface of the gel is covered.\"\n        check \"Remove the comb(s) and place them in the appropriate box(s) in A7.325.\"\n        check \"Put the graduated cylinder back at A5.305.\"\n        \n        image \"Items/gel_fill_TAE_to_line.JPG\"\n    end\n    \n    #ONLY DO 100 BP IF THERE IS FRAGMENT W LENGTH < 500 BP\n    gels.each do |gel|\n        gel.set 0,0,ladder_1k.id\n        gel.set 0,1, ladder_100.id\n        gel.set 1,0, ladder_1k.id\n        gel.set 1,1, ladder_100.id\n        show do\n            title \"Add Ladders to Gel\"\n            note \"Pipette 10 uL of the 1 kb ladder to positions (1,1) and (2,1) of gel #{gel.id}\"\n            note \"Pipette 10 uL of the 100bp ladder to positions (1,2) and (2,2) of gel #{gel.id}\"\n        end\n    end\n    \n    show do \n        title \"Add Dye to Each Well\"\n        stripwells.each do |s|\n            note \"Add 10 uL dye to stripwell #{s.id} from wells #{s.non_empty_string}\"\n        end\n    end\n   \n#   operations.each_with_index do |op, i|\n#       f = op.input(\"Fragment\")\n       \n#       unless op.input(\"Fragment\").column\n#          f.column = i % 6\n#       end\n   \n#       unless op.input(\"Fragment\").row \n#          f.row = (i / 6).ceil\n#       end\n       \n#       f.save\n#   end\n   \n   \n    # TO DO: Fix loading if ladders exist\n    show do \n        title \"Transfer 50 uL of each PCR result into indicated gel lane\"\n        note \"Transfer samples from each stripwell to the gel(s) according to the following table:\"\n        table operations.reject { |op| op.virtual? }.sort { |op1, op2| op1.input(\"Fragment\").item.id <=> op2.input(\"Fragment\").item.id }.extend(OperationList).start_table\n            .input_collection(\"Fragment\", heading: \"Stripwell\")\n            .custom_column(heading: \"Well Number\") { |op| (op.input(\"Fragment\").column + 1)  }\n            .input_collection(\"Gel\", heading: \"Gel\")\n            .custom_column(heading: \"Gel Row\") { |op| (op.input(\"Gel\").row + 1) }\n            .custom_column(heading: \"Gel Column\", checkable: true) { |op| (op.input(\"Gel\").column + 1) }\n        .end_table\n    end\n    \n    show do\n        title \"Start Electrophoresis\"\n        note \"Carefully attach the gel box lid(s) to the gel box(es), being careful not to bump the samples out of the wells. Attach the red electrode to the red terminal of the power supply, and the black electrode to the neighboring black terminal. Hit the start button on the gel boxes - usually a small running person icon.\"\n        note \"Make sure the power supply is not erroring (no E* messages) and that there are bubbles emerging from the platinum wires in the bottom corners of the gel box.\"\n        image \"gel_check_for_bubbles\"\n    end\n    \n    show do \n        title \"Discard Stripwells\"\n        note \"Discard all the empty stripwells\"\n        operations.each do |op|\n            op.input(\"Fragment\").item.mark_as_deleted\n        end\n    end\n    \n    show do\n        title \"Set a timer\"\n        \n        check \"When you get back to your bench, set a 40 minute timer.\" \n        check \"When the 40 minute timer is up, grab a lab manager to check on the gel. The lab manager may have you set another timer after checking the gel.\"\n    end\n    \n    release items, interactive: true\n    \n    return {}\n    \n  end\n\nend\n',186,'OperationType','2017-10-27 05:28:57','2017-10-27 05:29:31',NULL),(1070,'protocol','\n#TO DO: 100 BP LADDER ONLY WHEN A FRAGMENT LESS THAN 500 BP ONLY \n\nneeds \"Standard Libs/Debug\"\n\nclass Protocol\n    \n    include Debug\n    \n    # PCR puts stripwells out of operations order. This sorts gel lanes by stripwell to make tables nicer\n    def arrange_gels_by_stripwells ops\n        # get stripwell vals\n        stripwells = ops.map { |op| op.input(\"Fragment\").collection }.uniq.sort { |sw1, sw2| sw1.id <=> sw2.id }\n        sw_size = stripwells.first.object_type.columns\n        wells = ops.map do |op|\n            sw_offset = stripwells.index(op.input(\"Fragment\").collection) * sw_size\n            op.temporary[:sw_val] = sw_offset + op.input(\"Fragment\").column\n            op.temporary[:sw_val]\n        end\n        # show { note \"wells #{wells}\" }\n        \n        # get lane vals\n        gels = ops.map { |op| op.input(\"Gel\").collection }.uniq.sort { |g1, g2| g1.id <=> g2.id }\n        gel_size = gels.first.object_type.rows * gels.first.object_type.columns\n        gel_columns = gels.first.object_type.columns\n        lanes = ops.map do |op| \n            gel_offset = gels.index(op.input(\"Gel\").collection) * gel_size\n            row_offset = op.input(\"Gel\").row * gel_columns\n            gel_offset + row_offset + op.input(\"Gel\").column\n        end\n        # show { note \"lanes #{lanes}\" }\n        \n        # sort lanes by stripwells\n        wells_sorted = wells.sort\n        lanes_sorted = lanes.sort\n        well_to_lane = lanes_sorted.each_with_index.each_with_object({}) do |(l, i), hsh|\n          hsh[wells_sorted[i]] = l\n        end\n        # show { note \"well_to_lane #{well_to_lane.to_s}\" }\n        \n        lanes_ordered_by_well = wells.map { |well| well_to_lane[well] }\n        # show { note \"lanes_ordered_by_well #{lanes_ordered_by_well}\" }\n        \n        # associate operations with new gel, rows & columns\n        ops.each_with_index do |op, idx|\n            gel_idx = lanes_ordered_by_well[idx] / gel_size\n            lane = lanes_ordered_by_well[idx] - gel_idx * gel_size\n            row = lane / gel_columns\n            column = lane % gel_columns\n            \n            gel_fv = op.input(\"Gel\")\n            gel_fv.set collection: gels[gel_idx]\n            gel_fv.row = row\n            gel_fv.column = column\n            gel_fv.save\n            \n            # show { note \"op #{idx}: col: #{op.input(\"Gel\").collection.id}, row: #{op.input(\"Gel\").row}, column: #{op.input(\"Gel\").column}\" }\n        end\n    end\n    \n  def main\n      \n      debug = false\n\n    operations.retrieve interactive: false\n\n    arrange_gels_by_stripwells operations.reject { |op| op.virtual? }\n\n    # Don\'t use generic operations.make\n    operations.each do |op|\n        op.output(\"Fragment\").make_part(\n            op.input(\"Gel\").collection,\n            op.input(\"Gel\").row,\n            op.input(\"Gel\").column\n        )\n    end\n    \n    gels = operations.map { |op| op.input(\"Gel\").collection }.uniq\n    stripwells = operations.map { |op| op.input(\"Fragment\").collection }.uniq.sort { |sw1, sw2| sw1.id <=> sw2.id }\n    \n    # Find a ladder\n    ladder_100 = Sample.find_by_name(\"100 bp Ladder\")\n    ladder_1k = Sample.find_by_name(\"1 kb Ladder\")\n    dye = Sample.find_by_name(\"6X Loading Dye\")\n    items = [ladder_100.in(\"Ladder Aliquot\").first,\n             ladder_1k.in(\"Ladder Aliquot\").first,\n             dye.in(\"Screw Cap Tube\").first]\n    log_info gels, stripwells\n    take items + gels.collect { |i| Item.find_by_id(i.id) } + stripwells.collect { |i| Item.find_by_id(i.id) }, interactive: true\n    \n    show do\n        title \"Set up the power supply\"\n        \n        note  \"In the gel room, obtain a power supply and set it to 80 V and with a 40 minute timer.\"\n        note  \"Attach the electrodes of an appropriate gel box lid from A7.525 to the power supply.\"\n        \n        image \"Items/gel_power_settings.JPG\" \n    end\n    \n     show do\n        title \"Set up the gel box(s).\"\n        \n        check \"Remove the casting tray(s) (with gel(s)) and place it(them) on the bench.\"\n        check \"Using the graduated cylinder at A5.305, fill the gel box(s) with 200 mL of 1X TAE from J2 at A5.500. TAE should just cover the center of the gel box(s).\"\n        check \"With the gel box(s) electrodes facing away from you, place the casting tray(s) (with gel(s)) back in the gel box(s). The top lane(s) should be on your left, as the DNA will move to the right.\"\n        check \"Using the graduated cylinder, add 50 mL of 1X TAE from J2 at A5.500 so that the surface of the gel is covered.\"\n        check \"Remove the comb(s) and place them in the appropriate box(s) in A7.325.\"\n        check \"Put the graduated cylinder back at A5.305.\"\n        \n        image \"Items/gel_fill_TAE_to_line.JPG\"\n    end\n    \n    #ONLY DO 100 BP IF THERE IS FRAGMENT W LENGTH < 500 BP\n    gels.each do |gel|\n        gel.set 0,0,ladder_1k.id\n        gel.set 0,1, ladder_100.id\n        gel.set 1,0, ladder_1k.id\n        gel.set 1,1, ladder_100.id\n        show do\n            title \"Add Ladders to Gel\"\n            note \"Pipette 10 uL of the 1 kb ladder to positions (1,1) and (2,1) of gel #{gel.id}\"\n            note \"Pipette 10 uL of the 100bp ladder to positions (1,2) and (2,2) of gel #{gel.id}\"\n        end\n    end\n    \n    show do \n        title \"Add Dye to Each Well\"\n        stripwells.each do |s|\n            note \"Add 10 uL dye to stripwell #{s.id} from wells #{s.non_empty_string}\"\n        end\n    end\n   \n#   operations.each_with_index do |op, i|\n#       f = op.input(\"Fragment\")\n       \n#       unless op.input(\"Fragment\").column\n#          f.column = i % 6\n#       end\n   \n#       unless op.input(\"Fragment\").row \n#          f.row = (i / 6).ceil\n#       end\n       \n#       f.save\n#   end\n   \n   \n    # TO DO: Fix loading if ladders exist\n    show do \n        title \"Transfer 50 uL of each PCR result into indicated gel lane\"\n        note \"Transfer samples from each stripwell to the gel(s) according to the following table:\"\n        table operations.reject { |op| op.virtual? }.sort { |op1, op2| op1.input(\"Fragment\").item.id <=> op2.input(\"Fragment\").item.id }.extend(OperationList).start_table\n            .input_collection(\"Fragment\", heading: \"Stripwell\")\n            .custom_column(heading: \"Well Number\") { |op| (op.input(\"Fragment\").column + 1)  }\n            .input_collection(\"Gel\", heading: \"Gel\")\n            .custom_column(heading: \"Gel Row\") { |op| (op.input(\"Gel\").row + 1) }\n            .custom_column(heading: \"Gel Column\", checkable: true) { |op| (op.input(\"Gel\").column + 1) }\n        .end_table\n    end\n    \n    show do\n        title \"Start Electrophoresis\"\n        note \"Carefully attach the gel box lid(s) to the gel box(es), being careful not to bump the samples out of the wells. Attach the red electrode to the red terminal of the power supply, and the black electrode to the neighboring black terminal. Hit the start button on the gel boxes - usually a small running person icon.\"\n        note \"Make sure the power supply is not erroring (no E* messages) and that there are bubbles emerging from the platinum wires in the bottom corners of the gel box.\"\n        image \"gel_check_for_bubbles\"\n    end\n    \n    show do \n        title \"Discard Stripwells\"\n        note \"Discard all the empty stripwells\"\n        operations.each do |op|\n            op.input(\"Fragment\").item.mark_as_deleted\n        end\n    end\n    \n    show do\n        title \"Set a timer\"\n        \n        check \"When you get back to your bench, set a 40 minute timer.\" \n        check \"When the 40 minute timer is up, grab a lab manager to check on the gel. The lab manager may have you set another timer after checking the gel.\"\n    end\n    \n    release items, interactive: true\n    \n    return {}\n    \n  end\n\nend\n',186,'OperationType','2017-10-27 05:29:31','2017-10-27 05:29:59',NULL),(1071,'protocol','\n#TO DO: 100 BP LADDER ONLY WHEN A FRAGMENT LESS THAN 500 BP ONLY \n\nneeds \"Standard Libs/Debug\"\n\nclass Protocol\n    \n    include Debug\n    \n    # PCR puts stripwells out of operations order. This sorts gel lanes by stripwell to make tables nicer\n    def arrange_gels_by_stripwells ops\n        # get stripwell vals\n        stripwells = ops.map { |op| op.input(\"Fragment\").collection }.uniq.sort { |sw1, sw2| sw1.id <=> sw2.id }\n        sw_size = stripwells.first.object_type.columns\n        wells = ops.map do |op|\n            sw_offset = stripwells.index(op.input(\"Fragment\").collection) * sw_size\n            op.temporary[:sw_val] = sw_offset + op.input(\"Fragment\").column\n            op.temporary[:sw_val]\n        end\n        # show { note \"wells #{wells}\" }\n        \n        # get lane vals\n        gels = ops.map { |op| op.input(\"Gel\").collection }.uniq.sort { |g1, g2| g1.id <=> g2.id }\n        gel_size = gels.first.object_type.rows * gels.first.object_type.columns\n        gel_columns = gels.first.object_type.columns\n        lanes = ops.map do |op| \n            gel_offset = gels.index(op.input(\"Gel\").collection) * gel_size\n            row_offset = op.input(\"Gel\").row * gel_columns\n            gel_offset + row_offset + op.input(\"Gel\").column\n        end\n        # show { note \"lanes #{lanes}\" }\n        \n        # sort lanes by stripwells\n        wells_sorted = wells.sort\n        lanes_sorted = lanes.sort\n        well_to_lane = lanes_sorted.each_with_index.each_with_object({}) do |(l, i), hsh|\n          hsh[wells_sorted[i]] = l\n        end\n        # show { note \"well_to_lane #{well_to_lane.to_s}\" }\n        \n        lanes_ordered_by_well = wells.map { |well| well_to_lane[well] }\n        # show { note \"lanes_ordered_by_well #{lanes_ordered_by_well}\" }\n        \n        # associate operations with new gel, rows & columns\n        ops.each_with_index do |op, idx|\n            gel_idx = lanes_ordered_by_well[idx] / gel_size\n            lane = lanes_ordered_by_well[idx] - gel_idx * gel_size\n            row = lane / gel_columns\n            column = lane % gel_columns\n            \n            gel_fv = op.input(\"Gel\")\n            gel_fv.set collection: gels[gel_idx]\n            gel_fv.row = row\n            gel_fv.column = column\n            gel_fv.save\n            \n            # show { note \"op #{idx}: col: #{op.input(\"Gel\").collection.id}, row: #{op.input(\"Gel\").row}, column: #{op.input(\"Gel\").column}\" }\n        end\n    end\n    \n  def main\n      \n      debug = false\n\n    operations.retrieve interactive: false\n\n    arrange_gels_by_stripwells operations.reject { |op| op.virtual? }\n\n    # Don\'t use generic operations.make\n    operations.each do |op|\n        op.output(\"Fragment\").make_part(\n            op.input(\"Gel\").collection,\n            op.input(\"Gel\").row,\n            op.input(\"Gel\").column\n        )\n    end\n    \n    gels = operations.map { |op| op.input(\"Gel\").collection }.uniq\n    stripwells = operations.map { |op| op.input(\"Fragment\").collection }.uniq.sort { |sw1, sw2| sw1.id <=> sw2.id }\n    \n    # Find a ladder\n    ladder_100 = Sample.find_by_name(\"100 bp Ladder\")\n    ladder_1k = Sample.find_by_name(\"1 kb Ladder\")\n    dye = Sample.find_by_name(\"6X Loading Dye\")\n    items = [ladder_100.in(\"Ladder Aliquot\").first,\n             ladder_1k.in(\"Ladder Aliquot\").first,\n             dye.in(\"Screw Cap Tube\").first]\n    log_info gels, stripwells, items\n    take items + gels.collect { |i| Item.find_by_id(i.id) } + stripwells.collect { |i| Item.find_by_id(i.id) }, interactive: true\n    \n    show do\n        title \"Set up the power supply\"\n        \n        note  \"In the gel room, obtain a power supply and set it to 80 V and with a 40 minute timer.\"\n        note  \"Attach the electrodes of an appropriate gel box lid from A7.525 to the power supply.\"\n        \n        image \"Items/gel_power_settings.JPG\" \n    end\n    \n     show do\n        title \"Set up the gel box(s).\"\n        \n        check \"Remove the casting tray(s) (with gel(s)) and place it(them) on the bench.\"\n        check \"Using the graduated cylinder at A5.305, fill the gel box(s) with 200 mL of 1X TAE from J2 at A5.500. TAE should just cover the center of the gel box(s).\"\n        check \"With the gel box(s) electrodes facing away from you, place the casting tray(s) (with gel(s)) back in the gel box(s). The top lane(s) should be on your left, as the DNA will move to the right.\"\n        check \"Using the graduated cylinder, add 50 mL of 1X TAE from J2 at A5.500 so that the surface of the gel is covered.\"\n        check \"Remove the comb(s) and place them in the appropriate box(s) in A7.325.\"\n        check \"Put the graduated cylinder back at A5.305.\"\n        \n        image \"Items/gel_fill_TAE_to_line.JPG\"\n    end\n    \n    #ONLY DO 100 BP IF THERE IS FRAGMENT W LENGTH < 500 BP\n    gels.each do |gel|\n        gel.set 0,0,ladder_1k.id\n        gel.set 0,1, ladder_100.id\n        gel.set 1,0, ladder_1k.id\n        gel.set 1,1, ladder_100.id\n        show do\n            title \"Add Ladders to Gel\"\n            note \"Pipette 10 uL of the 1 kb ladder to positions (1,1) and (2,1) of gel #{gel.id}\"\n            note \"Pipette 10 uL of the 100bp ladder to positions (1,2) and (2,2) of gel #{gel.id}\"\n        end\n    end\n    \n    show do \n        title \"Add Dye to Each Well\"\n        stripwells.each do |s|\n            note \"Add 10 uL dye to stripwell #{s.id} from wells #{s.non_empty_string}\"\n        end\n    end\n   \n#   operations.each_with_index do |op, i|\n#       f = op.input(\"Fragment\")\n       \n#       unless op.input(\"Fragment\").column\n#          f.column = i % 6\n#       end\n   \n#       unless op.input(\"Fragment\").row \n#          f.row = (i / 6).ceil\n#       end\n       \n#       f.save\n#   end\n   \n   \n    # TO DO: Fix loading if ladders exist\n    show do \n        title \"Transfer 50 uL of each PCR result into indicated gel lane\"\n        note \"Transfer samples from each stripwell to the gel(s) according to the following table:\"\n        table operations.reject { |op| op.virtual? }.sort { |op1, op2| op1.input(\"Fragment\").item.id <=> op2.input(\"Fragment\").item.id }.extend(OperationList).start_table\n            .input_collection(\"Fragment\", heading: \"Stripwell\")\n            .custom_column(heading: \"Well Number\") { |op| (op.input(\"Fragment\").column + 1)  }\n            .input_collection(\"Gel\", heading: \"Gel\")\n            .custom_column(heading: \"Gel Row\") { |op| (op.input(\"Gel\").row + 1) }\n            .custom_column(heading: \"Gel Column\", checkable: true) { |op| (op.input(\"Gel\").column + 1) }\n        .end_table\n    end\n    \n    show do\n        title \"Start Electrophoresis\"\n        note \"Carefully attach the gel box lid(s) to the gel box(es), being careful not to bump the samples out of the wells. Attach the red electrode to the red terminal of the power supply, and the black electrode to the neighboring black terminal. Hit the start button on the gel boxes - usually a small running person icon.\"\n        note \"Make sure the power supply is not erroring (no E* messages) and that there are bubbles emerging from the platinum wires in the bottom corners of the gel box.\"\n        image \"gel_check_for_bubbles\"\n    end\n    \n    show do \n        title \"Discard Stripwells\"\n        note \"Discard all the empty stripwells\"\n        operations.each do |op|\n            op.input(\"Fragment\").item.mark_as_deleted\n        end\n    end\n    \n    show do\n        title \"Set a timer\"\n        \n        check \"When you get back to your bench, set a 40 minute timer.\" \n        check \"When the 40 minute timer is up, grab a lab manager to check on the gel. The lab manager may have you set another timer after checking the gel.\"\n    end\n    \n    release items, interactive: true\n    \n    return {}\n    \n  end\n\nend\n',186,'OperationType','2017-10-27 05:29:59','2017-10-27 05:29:59',NULL),(1072,'source','# Library code here',14,'Library','2017-10-27 05:41:45','2017-10-27 05:41:57',NULL),(1073,'source','module Preconditions\n  \n  # Returns true if the specified operation input was created more than delta_time in the past\n  #   e.g., time_elapsed op, \"Plasmid\", hours: 1, minutes: 30\n  def time_elapsed op, input, delta_time = {days: 1}\n    t1 = get_t1 op.input(input)\n    t2 = Time.zone.now\n\n    num_seconds = (delta_time[:minutes] || 0) * 60 +\n                  (delta_time[:hours] || 0) * 60 * 60 +\n                  (delta_time[:days] || 0) * 60 * 60 * 24\n    \n    return t2 - t1 > num_seconds\n  end\n  \n  def get_t1 input_fv\n    if input_fv.item\n      return input_fv.item.created_at\n    elsif input_fv.predecessors.any?\n      return input_fv.predecessors.first.updated_at\n    else\n      return Time.zone.now\n    end\n  end\n\nend',14,'Library','2017-10-27 05:41:57','2017-10-27 05:41:57',NULL),(1074,'precondition','def precondition(op) \n    true\nend',190,'OperationType','2017-10-27 05:43:07','2017-10-27 05:43:07',NULL),(1075,'protocol','# Author: Ayesha Saleem\n# November 5, 2016\n# Revision: Justin Vrana, 2017-07-21 (corrected index error, refactored collection removal proceedure, added batch replacement, added plasimd stock dilution)\n# Revision: Orlando do Lange, 2017-09-12 (Added precondition that if the input is a Ligation product that item must be at least 2 hours old)\n\nneeds \"Standard Libs/Debug\"\n\nclass Protocol\n    \n    include Debug\n    \n    # io\n    CELLS = \"Comp Cells\"\n    INPUT = \"Plasmid\"\n    OUTPUT = \"Transformed E Coli\"\n    \n    # debug\n    DEBUG_WITH_REPLACEMENT = true\n    \n    # specs\n    RESUSPENSION_VOL = 900 # how much to resuspend transformed cells in\n    \n  def main\n    # Detract comp cells from batches, store how many of each type of comp cell there are, and figure out how many Amp vs Kan plates will be needed \n    \n    # Determine replacements of e coli comp cell batch\n        operations.running.each do |op|\n            # If current batch is empty\n            if op.input(CELLS).collection.empty? || (debug and DEBUG_WITH_REPLACEMENT)\n                old_batch = op.input(CELLS).collection\n                \n                # Find replacement batches\n                all_batches = Collection.where(object_type_id: old_batch.object_type.id).select { |b| !b.empty? && !b.deleted? && (b.matrix[0].include? op.input(CELLS).sample.id) }\n                # batches_of_cells = all_batches.select { |b| b.include? op.input(CELLS).sample && !b.deleted? }.sort { |x| x.num_samples }\n                batches_of_cells = all_batches.reject { |b| b == old_batch }.sort { |x| x.num_samples } # debug specific rejection to force replacement\n                \n                # Error if not enough\n                if batches_of_cells.empty?\n                    op.error :not_enough_comp_cells, \"There were not enough comp cells of #{op.input(CELLS).sample.name} to complete the operation.\"\n                else\n                    # Set input to new batch\n                    \n                    op.input(CELLS).set collection: batches_of_cells.last\n                    # Display warning\n                    op.associate :comp_cell_batch_replaced, \"There were not enough comp cells for this operation. Replaced batch #{old_batch.id} with batch #{op.input(CELLS).collection.id}\"\n                end\n            end\n        end\n    \n    # Detract from running batches\n        operations.running.each { |op| op.input(CELLS).collection.remove_one op.input(CELLS).sample }\n    \n    # Exit early if there are no more running operations\n        if operations.empty?\n            show do\n                title \"All operations have errored\"\n                \n                note \"All operations have errored out.\"\n            end\n            return {}\n        end\n    \n    # Make \n        operations.running.retrieve(only: [\"Plasmid\"]).make\n     \n    # Prepare electroporator \n        show do\n            title \"Prepare bench\"\n            note \"If the electroporator is off (no numbers displayed), turn it on using the ON/STDBY button.\"\n            note \"Set the voltage to 1250V by clicking the up and down buttons.\"\n            note \" Click the time constant button to show 0.0.\"\n            image \"Actions/Transformation/initialize_electroporator.jpg\"\n            \n            check \"Retrieve and label #{operations.running.length} 1.5 mL tubes with the following ids: #{operations.running.collect { |op| \"#{op.output(OUTPUT).item.id}\"}.join(\",\")} \"\n            check \"Set your 3 pipettors to be 2 uL, 42 uL, and 900 uL.\"\n            check \"Prepare 10 uL, 100 uL, and 1000 uL pipette tips.\"      \n            check \"Grab a Bench SOC liquid aliquot (sterile) and loosen the cap.\"\n        end\n        \n        \n    # Measure plasmid stock concentrations\n        ops_for_dilution = operations.running.select { |op| op.input(INPUT).object_type.name == \"Plasmid Stock\" }\n        ops_for_measurement = ops_for_dilution.select { |op| op.input(INPUT).item.get(:concentration).to_f == 0.0 }\n        if ops_for_measurement.any?\n                conc_table = Proc.new { |ops|\n                    ops.start_table\n                        .input_item(INPUT)\n                        .custom_input(:concentration, heading: \"Concentration (ng/ul)\", type: \"number\") { |op| \n                            x = op.temporary[:concentration] || -1\n                            x = rand(10..100) if debug\n                            x\n                        }\n                        .validate(:concentration) { |op, v| v.between?(0,10000) }\n                        .validation_message(:concentration) { |op, k, v| \"Concentration must be non-zero!\" }\n                        .end_table.all\n                }\n                \n                show_with_input_table(ops_for_measurement, conc_table) do\n                    title \"Measure concentrations\"\n                    note \"The concentrations of some plasmid stocks are unknown.\"\n                    check \"Go to the nanodrop and measure the concentrations for the following items.\"\n                    check \"Write the concentration on the side of each tube\"\n                end\n                \n                ops_for_measurement.each do |op|\n                    op.input(INPUT).item.associate :concentration, op.temporary[:concentration]\n                end\n        end\n        \n    # Dilute plasmid stocks\n        if ops_for_dilution.any?\n                show do\n                    title \"Prepare plasmid stocks\"\n                    \n                    ops_for_dilution.each do |op|\n                        i = produce new_sample op.input(INPUT).sample.name, of: op.input(INPUT).sample_type, as: \"1 ng/µL Plasmid Stock\"\n                        \n                        op.temporary[:old_stock] = op.input(INPUT).item\n                        op.input(INPUT).item.associate :from, op.temporary[:old_stock].id\n                        vol = 0.5\n                        c = op.temporary[:old_stock].get(:concentration).to_f\n                        op.temporary[:water_vol] = (vol * c).round(1)\n                        op.temporary[:vol] = vol\n                        op.input(INPUT).set item: i\n                        op.associate :plasmid_stock_diluted, \"Plasmid stock #{op.temporary[:old_stock].id} was diluted and a 1 ng/ul Plasmid Stock was created: #{op.input(INPUT).item.id}\"\n                    end\n                    \n                    check \"Grab <b>#{ops_for_dilution.size}</b> 1.5 mL tubes and place in rack\"\n                    note \"According to the table below:\"\n                    check \"Label all tubes with the corresponding Tube id\"\n                    check \"Pipette MG H20\"\n                    check \"Pipette DNA\"\n                    table ops_for_dilution.start_table\n                        .input_item(INPUT, heading: \"Tube id\", checkable: true)\n                        .custom_column(heading: \"MG H20\", checkable: true) { |op| \"#{op.temporary[:water_vol]} ul\" }\n                        .custom_column(heading: \"Plasmid Stock (ul)\", checkable: true) { |op| \"#{op.temporary[:vol]} ul of #{op.temporary[:old_stock].id}\" }\n                        .end_table\n                end\n                \n                show do\n                    title \"Set aside old plasmid stocks\"\n                    \n                    note \"The following plasmid stocks will no longer be needed for this protocol.\"\n                    check \"Set aside the old plasmid stocks:\"\n                    ops_for_dilution.each do |op|\n                        check \"#{op.temporary[:old_stock]}\"\n                    end\n                end\n        end\n    \n    # Get comp cells and cuvettes \n        show do \n            title \"Get cold items\"\n            note \"Retrieve a styrofoam ice block and an aluminum tube rack. Put the aluminum tube rack on top of the ice block.\"\n            image \"arrange_cold_block\"\n            check \"Retrieve #{operations.length} cuvettes and put inside the styrofoam touching ice block.\"\n            note \"Retrieve the following electrocompetent aliquots from the M80 and place them on an aluminum tube rack: \"\n            operations.group_by { |op| op.input(CELLS).item }.each do |batch, grouped_ops|\n                check \"#{grouped_ops.size} aliquot(s) of #{grouped_ops.first.input(CELLS).sample.name} from batch #{batch.id}\"\n            end\n            image \"Actions/Transformation/handle_electrocompetent_cells.jpg\"\n        end\n        \n    # Label comp cells \n        show do \n            title \"Label aliquots\"\n            aliquotsLabeled = 0\n            operations.group_by { |op| op.input(CELLS).item }.each do |batch, grouped_ops|\n                if grouped_ops.size == 1\n                    check \"Label the electrocompetent aliquot of #{grouped_ops.first.input(CELLS).sample.name} as #{aliquotsLabeled + 1}.\"\n                else\n                    check \"Label each electrocompetent aliquot of #{grouped_ops.first.input(CELLS).sample.name} from #{aliquotsLabeled + 1}-#{grouped_ops.size + aliquotsLabeled}.\"\n                end\n                aliquotsLabeled += grouped_ops.size\n            end\n            note \"If still frozen, wait till the cells have thawed to a slushy consistency.\"\n            warning \"Transformation efficiency depends on keeping electrocompetent cells ice-cold until electroporation.\"\n            warning \"Do not wait too long\"\n            image \"Actions/Transformation/thawed_electrocompotent_cells.jpg\"\n        end\n        \n    index = 0\n    \n    # Display table to tech\n        show do\n            title \"Add plasmid to electrocompetent aliquot, electroporate and rescue \"\n            note \"Repeat for each row in the table:\"\n            check \"Pipette 2 uL plasmid/gibson result into labeled electrocompetent aliquot, swirl the tip to mix and place back on the aluminum rack after mixing.\"\n            check \"Transfer 42 uL of e-comp cells to electrocuvette with P100\"\n            check \"Slide into electroporator, press PULSE button twice, and QUICKLY add #{RESUSPENSION_VOL} uL of SOC\"\n            check \"pipette cells up and down 3 times, then transfer #{RESUSPENSION_VOL} uL to appropriate 1.5 mL tube with P1000\"\n            table operations.running.start_table \n                .input_item(\"Plasmid\")\n                .custom_column(heading: \"Electrocompetent Aliquot\") { index = index + 1 }\n                .output_item(\"Transformed E Coli\", checkable: true)\n                .end_table\n        end\n        \n    # Incubate transformants\n        show do \n            title \"Incubate transformants\"\n            check \"Grab a glass flask\"\n            check \"Place E. coli transformants inside flask laying sideways and place flask into shaking 37 C incubator.\"\n            #Open google timer in new window\n            note \"<a href=\\\'https://www.google.com/search?q=30%20minute%20timer\\\' target=\\\'_blank\\\'>Use a 30 minute Google timer</a> to set a reminder to retrieve the transformants, at which point you will start the \\\'Plate Transformed Cells\\\' protocol.\"\n            image \"Actions/Transformation/37_c_shaker_incubator.jpg\"\n            note \"While the transformants incubate, finish this protocol by completing the remaining tasks.\"\n        end\n           \n    #plate pre heating\n        show do \n            title \"Pre-heat plates\"\n            note \"Retrieve the following plates, and place into still 37C incubator.\"    \n            grouped_by_marker = operations.running.group_by { |op|\n                op.input(INPUT).sample.properties[\"Bacterial Marker\"].upcase\n            }\n            grouped_by_marker.each do |marker, ops|\n                check \"#{ops.size} LB + #{marker} plates\"\n            end\n            image \"Actions/Plating/put_plate_incubator.JPG\"\n        end\n        \n    # Clean up\n        show do\n            title \"Clean up\"\n            check \"Put all cuvettes into biohazardous waste.\"\n            check \"Discard empty electrocompetent aliquot tubes into waste bin.\"\n            check \"Return the styrofoam ice block and the aluminum tube rack.\"\n            image \"Actions/Transformation/dump_dirty_cuvettes.jpg\"\n        end\n        \n    # Move items\n        operations.running.each do |op|\n            op.output(OUTPUT).item.move \"37C shaker\"\n        end\n        \n        give_happy_birthday\n        \n    # Store dna stocks\n        all_stocks = operations.running.map { |op| [op.input(INPUT).item, op.temporary[:old_stock]] }.flatten.uniq\n        all_stocks.compact!\n        release all_stocks, interactive: true, method: \"boxes\"\n        \n    return {}\n  end\nend ',190,'OperationType','2017-10-27 05:43:25','2017-10-27 05:44:30',NULL),(1076,'protocol','# Author: Ayesha Saleem\n# November 5, 2016\n# Revision: Justin Vrana, 2017-07-21 (corrected index error, refactored collection removal proceedure, added batch replacement, added plasimd stock dilution)\n# Revision: Orlando do Lange, 2017-09-12 (Added precondition that if the input is a Ligation product that item must be at least 2 hours old)\n\nneeds \"Standard Libs/Debug\"\n\nclass Protocol\n    \n    include Debug\n    \n    # io\n    CELLS = \"Comp Cells\"\n    INPUT = \"Plasmid\"\n    OUTPUT = \"Transformed E Coli\"\n    \n    # debug\n    DEBUG_WITH_REPLACEMENT = true\n    \n    # specs\n    RESUSPENSION_VOL = 900 # how much to resuspend transformed cells in\n    \n  def main\n    # Detract comp cells from batches, store how many of each type of comp cell there are, and figure out how many Amp vs Kan plates will be needed \n    \n    # Determine replacements of e coli comp cell batch\n        operations.running.each do |op|\n            # If current batch is empty\n            if op.input(CELLS).collection.empty? || (debug and DEBUG_WITH_REPLACEMENT)\n                old_batch = op.input(CELLS).collection\n                \n                # Find replacement batches\n                all_batches = Collection.where(object_type_id: old_batch.object_type.id).select { |b| !b.empty? && !b.deleted? && (b.matrix[0].include? op.input(CELLS).sample.id) }\n                # batches_of_cells = all_batches.select { |b| b.include? op.input(CELLS).sample && !b.deleted? }.sort { |x| x.num_samples }\n                batches_of_cells = all_batches.reject { |b| b == old_batch }.sort { |x| x.num_samples } # debug specific rejection to force replacement\n                \n                # Error if not enough\n                if batches_of_cells.empty?\n                    op.error :not_enough_comp_cells, \"There were not enough comp cells of #{op.input(CELLS).sample.name} to complete the operation.\"\n                else\n                    # Set input to new batch\n                    \n                    op.input(CELLS).set collection: batches_of_cells.last\n                    # Display warning\n                    op.associate :comp_cell_batch_replaced, \"There were not enough comp cells for this operation. Replaced batch #{old_batch.id} with batch #{op.input(CELLS).collection.id}\"\n                end\n            end\n        end\n    \n    # Detract from running batches\n        operations.running.each { |op| op.input(CELLS).collection.remove_one op.input(CELLS).sample }\n    \n    # Exit early if there are no more running operations\n        if operations.empty?\n            show do\n                title \"All operations have errored\"\n                \n                note \"All operations have errored out.\"\n            end\n            return {}\n        end\n    \n    # Make \n        operations.running.retrieve(only: [\"Plasmid\"]).make\n     \n    # Prepare electroporator \n        show do\n            title \"Prepare bench\"\n            note \"If the electroporator is off (no numbers displayed), turn it on using the ON/STDBY button.\"\n            note \"Set the voltage to 1250V by clicking the up and down buttons.\"\n            note \" Click the time constant button to show 0.0.\"\n            image \"Actions/Transformation/initialize_electroporator.jpg\"\n            \n            check \"Retrieve and label #{operations.running.length} 1.5 mL tubes with the following ids: #{operations.running.collect { |op| \"#{op.output(OUTPUT).item.id}\"}.join(\",\")} \"\n            check \"Set your 3 pipettors to be 2 uL, 42 uL, and 900 uL.\"\n            check \"Prepare 10 uL, 100 uL, and 1000 uL pipette tips.\"      \n            check \"Grab a Bench SOC liquid aliquot (sterile) and loosen the cap.\"\n        end\n        \n        \n    # Measure plasmid stock concentrations\n        ops_for_dilution = operations.running.select { |op| op.input(INPUT).object_type.name == \"Plasmid Stock\" }\n        ops_for_measurement = ops_for_dilution.select { |op| op.input(INPUT).item.get(:concentration).to_f == 0.0 }\n        if ops_for_measurement.any?\n                conc_table = Proc.new { |ops|\n                    ops.start_table\n                        .input_item(INPUT)\n                        .custom_input(:concentration, heading: \"Concentration (ng/ul)\", type: \"number\") { |op| \n                            x = op.temporary[:concentration] || -1\n                            x = rand(10..100) if debug\n                            x\n                        }\n                        .validate(:concentration) { |op, v| v.between?(0,10000) }\n                        .validation_message(:concentration) { |op, k, v| \"Concentration must be non-zero!\" }\n                        .end_table.all\n                }\n                \n                show_with_input_table(ops_for_measurement, conc_table) do\n                    title \"Measure concentrations\"\n                    note \"The concentrations of some plasmid stocks are unknown.\"\n                    check \"Go to the nanodrop and measure the concentrations for the following items.\"\n                    check \"Write the concentration on the side of each tube\"\n                end\n                \n                ops_for_measurement.each do |op|\n                    op.input(INPUT).item.associate :concentration, op.temporary[:concentration]\n                end\n        end\n        \n    # Dilute plasmid stocks\n        if ops_for_dilution.any?\n                show do\n                    title \"Prepare plasmid stocks\"\n                    \n                    ops_for_dilution.each do |op|\n                        i = produce new_sample op.input(INPUT).sample.name, of: op.input(INPUT).sample_type, as: \"1 ng/µL Plasmid Stock\"\n                        \n                        op.temporary[:old_stock] = op.input(INPUT).item\n                        op.input(INPUT).item.associate :from, op.temporary[:old_stock].id\n                        vol = 0.5\n                        c = op.temporary[:old_stock].get(:concentration).to_f\n                        op.temporary[:water_vol] = (vol * c).round(1)\n                        op.temporary[:vol] = vol\n                        op.input(INPUT).set item: i\n                        op.associate :plasmid_stock_diluted, \"Plasmid stock #{op.temporary[:old_stock].id} was diluted and a 1 ng/ul Plasmid Stock was created: #{op.input(INPUT).item.id}\"\n                    end\n                    \n                    check \"Grab <b>#{ops_for_dilution.size}</b> 1.5 mL tubes and place in rack\"\n                    note \"According to the table below:\"\n                    check \"Label all tubes with the corresponding Tube id\"\n                    check \"Pipette MG H20\"\n                    check \"Pipette DNA\"\n                    table ops_for_dilution.start_table\n                        .input_item(INPUT, heading: \"Tube id\", checkable: true)\n                        .custom_column(heading: \"MG H20\", checkable: true) { |op| \"#{op.temporary[:water_vol]} ul\" }\n                        .custom_column(heading: \"Plasmid Stock (ul)\", checkable: true) { |op| \"#{op.temporary[:vol]} ul of #{op.temporary[:old_stock].id}\" }\n                        .end_table\n                end\n                \n                show do\n                    title \"Set aside old plasmid stocks\"\n                    \n                    note \"The following plasmid stocks will no longer be needed for this protocol.\"\n                    check \"Set aside the old plasmid stocks:\"\n                    ops_for_dilution.each do |op|\n                        check \"#{op.temporary[:old_stock]}\"\n                    end\n                end\n        end\n    \n    # Get comp cells and cuvettes \n        show do \n            title \"Get cold items\"\n            note \"Retrieve a styrofoam ice block and an aluminum tube rack. Put the aluminum tube rack on top of the ice block.\"\n            image \"arrange_cold_block\"\n            check \"Retrieve #{operations.length} cuvettes and put inside the styrofoam touching ice block.\"\n            note \"Retrieve the following electrocompetent aliquots from the M80 and place them on an aluminum tube rack: \"\n            operations.group_by { |op| op.input(CELLS).item }.each do |batch, grouped_ops|\n                check \"#{grouped_ops.size} aliquot(s) of #{grouped_ops.first.input(CELLS).sample.name} from batch #{batch.id}\"\n            end\n            image \"Actions/Transformation/handle_electrocompetent_cells.jpg\"\n        end\n        \n    # Label comp cells \n        show do \n            title \"Label aliquots\"\n            aliquotsLabeled = 0\n            operations.group_by { |op| op.input(CELLS).item }.each do |batch, grouped_ops|\n                if grouped_ops.size == 1\n                    check \"Label the electrocompetent aliquot of #{grouped_ops.first.input(CELLS).sample.name} as #{aliquotsLabeled + 1}.\"\n                else\n                    check \"Label each electrocompetent aliquot of #{grouped_ops.first.input(CELLS).sample.name} from #{aliquotsLabeled + 1}-#{grouped_ops.size + aliquotsLabeled}.\"\n                end\n                aliquotsLabeled += grouped_ops.size\n            end\n            note \"If still frozen, wait till the cells have thawed to a slushy consistency.\"\n            warning \"Transformation efficiency depends on keeping electrocompetent cells ice-cold until electroporation.\"\n            warning \"Do not wait too long\"\n            image \"Actions/Transformation/thawed_electrocompotent_cells.jpg\"\n        end\n        \n    index = 0\n    \n    # Display table to tech\n        show do\n            title \"Add plasmid to electrocompetent aliquot, electroporate and rescue \"\n            note \"Repeat for each row in the table:\"\n            check \"Pipette 2 uL plasmid/gibson result into labeled electrocompetent aliquot, swirl the tip to mix and place back on the aluminum rack after mixing.\"\n            check \"Transfer 42 uL of e-comp cells to electrocuvette with P100\"\n            check \"Slide into electroporator, press PULSE button twice, and QUICKLY add #{RESUSPENSION_VOL} uL of SOC\"\n            check \"pipette cells up and down 3 times, then transfer #{RESUSPENSION_VOL} uL to appropriate 1.5 mL tube with P1000\"\n            table operations.running.start_table \n                .input_item(\"Plasmid\")\n                .custom_column(heading: \"Electrocompetent Aliquot\") { index = index + 1 }\n                .output_item(\"Transformed E Coli\", checkable: true)\n                .end_table\n        end\n        \n    # Incubate transformants\n        show do \n            title \"Incubate transformants\"\n            check \"Grab a glass flask\"\n            check \"Place E. coli transformants inside flask laying sideways and place flask into shaking 37 C incubator.\"\n            #Open google timer in new window\n            note \"<a href=\\\'https://www.google.com/search?q=30%20minute%20timer\\\' target=\\\'_blank\\\'>Use a 30 minute Google timer</a> to set a reminder to retrieve the transformants, at which point you will start the \\\'Plate Transformed Cells\\\' protocol.\"\n            image \"Actions/Transformation/37_c_shaker_incubator.jpg\"\n            note \"While the transformants incubate, finish this protocol by completing the remaining tasks.\"\n        end\n           \n    #plate pre heating\n        show do \n            title \"Pre-heat plates\"\n            note \"Retrieve the following plates, and place into still 37C incubator.\"    \n            grouped_by_marker = operations.running.group_by { |op|\n                op.input(INPUT).sample.properties[\"Bacterial Marker\"].upcase\n            }\n            grouped_by_marker.each do |marker, ops|\n                check \"#{ops.size} LB + #{marker} plates\"\n            end\n            image \"Actions/Plating/put_plate_incubator.JPG\"\n        end\n        \n    # Clean up\n        show do\n            title \"Clean up\"\n            check \"Put all cuvettes into biohazardous waste.\"\n            check \"Discard empty electrocompetent aliquot tubes into waste bin.\"\n            check \"Return the styrofoam ice block and the aluminum tube rack.\"\n            image \"Actions/Transformation/dump_dirty_cuvettes.jpg\"\n        end\n        \n    # Move items\n        operations.running.each do |op|\n            op.output(OUTPUT).item.move \"37C shaker\"\n        end\n        \n    # Store dna stocks\n        all_stocks = operations.running.map { |op| [op.input(INPUT).item, op.temporary[:old_stock]] }.flatten.uniq\n        all_stocks.compact!\n        release all_stocks, interactive: true, method: \"boxes\"\n        \n    return {}\n  end\nend ',190,'OperationType','2017-10-27 05:44:30','2017-10-27 05:46:28',NULL),(1077,'protocol','# Author: Ayesha Saleem\n# November 5, 2016\n# Revision: Justin Vrana, 2017-07-21 (corrected index error, refactored collection removal proceedure, added batch replacement, added plasimd stock dilution)\n# Revision: Orlando do Lange, 2017-09-12 (Added precondition that if the input is a Ligation product that item must be at least 2 hours old)\n\nneeds \"Standard Libs/Debug\"\n\nclass Protocol\n    \n    include Debug\n    \n    # io\n    CELLS = \"Comp Cells\"\n    INPUT = \"Plasmid\"\n    OUTPUT = \"Transformed E Coli\"\n    \n    # debug\n    DEBUG_WITH_REPLACEMENT = true\n    \n    # specs\n    RESUSPENSION_VOL = 900 # how much to resuspend transformed cells in\n    \n  def main\n    # Detract comp cells from batches, store how many of each type of comp cell there are, and figure out how many Amp vs Kan plates will be needed \n    \n    # Determine replacements of e coli comp cell batch\n        operations.running.each do |op|\n            # If current batch is empty\n            if op.input(CELLS).collection.empty? || (debug and DEBUG_WITH_REPLACEMENT)\n                old_batch = op.input(CELLS).collection\n                \n                # Find replacement batches\n                all_batches = Collection.where(object_type_id: old_batch.object_type.id).select { |b| !b.empty? && !b.deleted? && (b.matrix[0].include? op.input(CELLS).sample.id) }\n                # batches_of_cells = all_batches.select { |b| b.include? op.input(CELLS).sample && !b.deleted? }.sort { |x| x.num_samples }\n                batches_of_cells = all_batches.reject { |b| b == old_batch }.sort { |x| x.num_samples } # debug specific rejection to force replacement\n                \n                # Error if not enough\n                if batches_of_cells.empty?\n                    # op.error :not_enough_comp_cells, \"There were not enough comp cells of #{op.input(CELLS).sample.name} to complete the operation.\"\n                else\n                    # Set input to new batch\n                    \n                    op.input(CELLS).set collection: batches_of_cells.last\n                    # Display warning\n                    op.associate :comp_cell_batch_replaced, \"There were not enough comp cells for this operation. Replaced batch #{old_batch.id} with batch #{op.input(CELLS).collection.id}\"\n                end\n            end\n        end\n    \n    # Detract from running batches\n        operations.running.each { |op| op.input(CELLS).collection.remove_one op.input(CELLS).sample }\n    \n    # Exit early if there are no more running operations\n        if operations.empty?\n            show do\n                title \"All operations have errored\"\n                \n                note \"All operations have errored out.\"\n            end\n            return {}\n        end\n    \n    # Make \n        operations.running.retrieve(only: [\"Plasmid\"]).make\n     \n    # Prepare electroporator \n        show do\n            title \"Prepare bench\"\n            note \"If the electroporator is off (no numbers displayed), turn it on using the ON/STDBY button.\"\n            note \"Set the voltage to 1250V by clicking the up and down buttons.\"\n            note \" Click the time constant button to show 0.0.\"\n            image \"Actions/Transformation/initialize_electroporator.jpg\"\n            \n            check \"Retrieve and label #{operations.running.length} 1.5 mL tubes with the following ids: #{operations.running.collect { |op| \"#{op.output(OUTPUT).item.id}\"}.join(\",\")} \"\n            check \"Set your 3 pipettors to be 2 uL, 42 uL, and 900 uL.\"\n            check \"Prepare 10 uL, 100 uL, and 1000 uL pipette tips.\"      \n            check \"Grab a Bench SOC liquid aliquot (sterile) and loosen the cap.\"\n        end\n        \n        \n    # Measure plasmid stock concentrations\n        ops_for_dilution = operations.running.select { |op| op.input(INPUT).object_type.name == \"Plasmid Stock\" }\n        ops_for_measurement = ops_for_dilution.select { |op| op.input(INPUT).item.get(:concentration).to_f == 0.0 }\n        if ops_for_measurement.any?\n                conc_table = Proc.new { |ops|\n                    ops.start_table\n                        .input_item(INPUT)\n                        .custom_input(:concentration, heading: \"Concentration (ng/ul)\", type: \"number\") { |op| \n                            x = op.temporary[:concentration] || -1\n                            x = rand(10..100) if debug\n                            x\n                        }\n                        .validate(:concentration) { |op, v| v.between?(0,10000) }\n                        .validation_message(:concentration) { |op, k, v| \"Concentration must be non-zero!\" }\n                        .end_table.all\n                }\n                \n                show_with_input_table(ops_for_measurement, conc_table) do\n                    title \"Measure concentrations\"\n                    note \"The concentrations of some plasmid stocks are unknown.\"\n                    check \"Go to the nanodrop and measure the concentrations for the following items.\"\n                    check \"Write the concentration on the side of each tube\"\n                end\n                \n                ops_for_measurement.each do |op|\n                    op.input(INPUT).item.associate :concentration, op.temporary[:concentration]\n                end\n        end\n        \n    # Dilute plasmid stocks\n        if ops_for_dilution.any?\n                show do\n                    title \"Prepare plasmid stocks\"\n                    \n                    ops_for_dilution.each do |op|\n                        i = produce new_sample op.input(INPUT).sample.name, of: op.input(INPUT).sample_type, as: \"1 ng/µL Plasmid Stock\"\n                        \n                        op.temporary[:old_stock] = op.input(INPUT).item\n                        op.input(INPUT).item.associate :from, op.temporary[:old_stock].id\n                        vol = 0.5\n                        c = op.temporary[:old_stock].get(:concentration).to_f\n                        op.temporary[:water_vol] = (vol * c).round(1)\n                        op.temporary[:vol] = vol\n                        op.input(INPUT).set item: i\n                        op.associate :plasmid_stock_diluted, \"Plasmid stock #{op.temporary[:old_stock].id} was diluted and a 1 ng/ul Plasmid Stock was created: #{op.input(INPUT).item.id}\"\n                    end\n                    \n                    check \"Grab <b>#{ops_for_dilution.size}</b> 1.5 mL tubes and place in rack\"\n                    note \"According to the table below:\"\n                    check \"Label all tubes with the corresponding Tube id\"\n                    check \"Pipette MG H20\"\n                    check \"Pipette DNA\"\n                    table ops_for_dilution.start_table\n                        .input_item(INPUT, heading: \"Tube id\", checkable: true)\n                        .custom_column(heading: \"MG H20\", checkable: true) { |op| \"#{op.temporary[:water_vol]} ul\" }\n                        .custom_column(heading: \"Plasmid Stock (ul)\", checkable: true) { |op| \"#{op.temporary[:vol]} ul of #{op.temporary[:old_stock].id}\" }\n                        .end_table\n                end\n                \n                show do\n                    title \"Set aside old plasmid stocks\"\n                    \n                    note \"The following plasmid stocks will no longer be needed for this protocol.\"\n                    check \"Set aside the old plasmid stocks:\"\n                    ops_for_dilution.each do |op|\n                        check \"#{op.temporary[:old_stock]}\"\n                    end\n                end\n        end\n    \n    # Get comp cells and cuvettes \n        show do \n            title \"Get cold items\"\n            note \"Retrieve a styrofoam ice block and an aluminum tube rack. Put the aluminum tube rack on top of the ice block.\"\n            image \"arrange_cold_block\"\n            check \"Retrieve #{operations.length} cuvettes and put inside the styrofoam touching ice block.\"\n            note \"Retrieve the following electrocompetent aliquots from the M80 and place them on an aluminum tube rack: \"\n            operations.group_by { |op| op.input(CELLS).item }.each do |batch, grouped_ops|\n                check \"#{grouped_ops.size} aliquot(s) of #{grouped_ops.first.input(CELLS).sample.name} from batch #{batch.id}\"\n            end\n            image \"Actions/Transformation/handle_electrocompetent_cells.jpg\"\n        end\n        \n    # Label comp cells \n        show do \n            title \"Label aliquots\"\n            aliquotsLabeled = 0\n            operations.group_by { |op| op.input(CELLS).item }.each do |batch, grouped_ops|\n                if grouped_ops.size == 1\n                    check \"Label the electrocompetent aliquot of #{grouped_ops.first.input(CELLS).sample.name} as #{aliquotsLabeled + 1}.\"\n                else\n                    check \"Label each electrocompetent aliquot of #{grouped_ops.first.input(CELLS).sample.name} from #{aliquotsLabeled + 1}-#{grouped_ops.size + aliquotsLabeled}.\"\n                end\n                aliquotsLabeled += grouped_ops.size\n            end\n            note \"If still frozen, wait till the cells have thawed to a slushy consistency.\"\n            warning \"Transformation efficiency depends on keeping electrocompetent cells ice-cold until electroporation.\"\n            warning \"Do not wait too long\"\n            image \"Actions/Transformation/thawed_electrocompotent_cells.jpg\"\n        end\n        \n    index = 0\n    \n    # Display table to tech\n        show do\n            title \"Add plasmid to electrocompetent aliquot, electroporate and rescue \"\n            note \"Repeat for each row in the table:\"\n            check \"Pipette 2 uL plasmid/gibson result into labeled electrocompetent aliquot, swirl the tip to mix and place back on the aluminum rack after mixing.\"\n            check \"Transfer 42 uL of e-comp cells to electrocuvette with P100\"\n            check \"Slide into electroporator, press PULSE button twice, and QUICKLY add #{RESUSPENSION_VOL} uL of SOC\"\n            check \"pipette cells up and down 3 times, then transfer #{RESUSPENSION_VOL} uL to appropriate 1.5 mL tube with P1000\"\n            table operations.running.start_table \n                .input_item(\"Plasmid\")\n                .custom_column(heading: \"Electrocompetent Aliquot\") { index = index + 1 }\n                .output_item(\"Transformed E Coli\", checkable: true)\n                .end_table\n        end\n        \n    # Incubate transformants\n        show do \n            title \"Incubate transformants\"\n            check \"Grab a glass flask\"\n            check \"Place E. coli transformants inside flask laying sideways and place flask into shaking 37 C incubator.\"\n            #Open google timer in new window\n            note \"<a href=\\\'https://www.google.com/search?q=30%20minute%20timer\\\' target=\\\'_blank\\\'>Use a 30 minute Google timer</a> to set a reminder to retrieve the transformants, at which point you will start the \\\'Plate Transformed Cells\\\' protocol.\"\n            image \"Actions/Transformation/37_c_shaker_incubator.jpg\"\n            note \"While the transformants incubate, finish this protocol by completing the remaining tasks.\"\n        end\n           \n    #plate pre heating\n        show do \n            title \"Pre-heat plates\"\n            note \"Retrieve the following plates, and place into still 37C incubator.\"    \n            grouped_by_marker = operations.running.group_by { |op|\n                op.input(INPUT).sample.properties[\"Bacterial Marker\"].upcase\n            }\n            grouped_by_marker.each do |marker, ops|\n                check \"#{ops.size} LB + #{marker} plates\"\n            end\n            image \"Actions/Plating/put_plate_incubator.JPG\"\n        end\n        \n    # Clean up\n        show do\n            title \"Clean up\"\n            check \"Put all cuvettes into biohazardous waste.\"\n            check \"Discard empty electrocompetent aliquot tubes into waste bin.\"\n            check \"Return the styrofoam ice block and the aluminum tube rack.\"\n            image \"Actions/Transformation/dump_dirty_cuvettes.jpg\"\n        end\n        \n    # Move items\n        operations.running.each do |op|\n            op.output(OUTPUT).item.move \"37C shaker\"\n        end\n        \n    # Store dna stocks\n        all_stocks = operations.running.map { |op| [op.input(INPUT).item, op.temporary[:old_stock]] }.flatten.uniq\n        all_stocks.compact!\n        release all_stocks, interactive: true, method: \"boxes\"\n        \n    return {}\n  end\nend ',190,'OperationType','2017-10-27 05:46:28','2017-10-27 05:46:28',NULL),(1078,'protocol','# Author: Ayesha Saleem\n# December 23, 2016\n\n# TO DO \n    # Fire different antibiotic plate depending on which antibiotic it is (e.g., Amp: 30 min, Kan: 1 hr, etc.)\n\nclass Protocol\n    \n    def name_initials str\n        full_name = str.split\n        \n        begin\n          cap_initials = full_name[0][0].upcase + full_name[1][0].upcase\n        rescue\n          cap_initials = \"\"\n        end\n        \n        return cap_initials\n    end\n\n  def main\n\n    operations.retrieve.make\n    \n    markers = Hash.new { | h, k | h[k] = {} } \n    \n    # group plates + transformed aliquots \n        operations.each do | op | \n            p = op.input(\"Plasmid\").item\n            marker_key = \"LB\"\n            p.sample.properties[\"Bacterial Marker\"].split(/[+,]/).each do |marker|\n                marker_key = marker_key + \" + \" + marker.strip[0, 3].capitalize\n            end\n            \n            if Sample.find_by_name(marker_key)\n                markers[marker_key][p] = op.output(\"Plate\").item\n            else\n                show do \n                    note \"#{marker_key}\"\n                end\n                op.error :no_marker, \"There is no marker associated with this sample, so we can\'t plate it. Please input a marker.\"\n            end\n        end\n        \n        \n    # tell tech to grab x amount of plates and plate the aliquots\n    # also detract from plate batches\n        markers.each do | k, v| \n            aliquots = []\n            plates = []\n            ids = []\n            \n            v.each do | al, pl|\n                ids.push(\"#{pl.id} \" + name_initials(pl.sample.user.name))\n                aliquots.push(al.id)\n                al.mark_as_deleted\n                plates.push(pl.id)\n                pl.location = \"37 C incubator\"\n            end\n            \n            b = Collection.where(object_type_id: ObjectType.find_by_name(\"Agar Plate Batch\").id).all.find { |b| b.include? Sample.find_by_name(k) }\n\n            \n            batch_num = [b.id]\n            n = b.num_samples\n            num_p = plates.length\n            if n < num_p\n                num_p = num_p - n\n                b.apportion 10, 10\n                b = Collection.where(object_type_id: ObjectType.find_by_name(\"Agar Plate Batch\").id).all.find { |b| b.include? Sample.find_by_name(k) }\n                n = b.num_samples\n                batch_num.push(b.id)\n            end\n              \n            m = b.matrix\n            x = 0\n        \n            (0..m.length-1).reverse_each do |i|\n              (0..m[i].length-1).reverse_each do |j|\n                if m[i][j] != -1 && x < num_p\n                  m[i][j] = -1\n                  x += 1\n                end\n              end\n            end\n            \n            show do\n                title \"Grab #{plates.length} of #{k} plates\"\n                note \"Grab #{plates.length} plates from batch #{batch_num.join(\"and\")}\"\n                check \"Label the top of the plates with your intials, the date, and the following ids: #{ids.join(\", \")}\"\n            end\n            \n            show do\n                title \"Spin down tubes and resuspend\"\n                check \"Remove the transformed cells in 1.5 mL tubes from the 250 mL flask.\"\n                check \"Centrifuge for 4,000 x g for 1 minute.\"\n                check \"Carefully remove most of the supernatant using a P1000 pipette. Leave 100-200uL of supernatant in each tube.\"\n                check \" Resuspend the cells in the remaining supernatant by vortexing.\"\n            end\n            \n            show do \n                title \"Plate transformed E coli aliquots\"\n                check \"Use sterile beads to plate THE ENTIRE VOLUME (~200 uL) from the transformed aliquots (1.5 mL tubes) onto the plates, following the table below.\"\n                warning \"Note the change in plating volume!\"\n                check \"Discard used transformed aliquots after plating.\"\n                table [[\"1.5 mL tube\", \"#{k} Plate\"]].concat(aliquots.zip plates)\n            end\n            \n        end\n    \n        operations.store(io: \"output\", interactive: true)\n    \n    return {}\n    \n  end\n\nend\n',191,'OperationType','2017-10-27 05:58:39','2017-10-27 05:58:39',NULL);
/*!40000 ALTER TABLE `codes` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `data_associations`
--

DROP TABLE IF EXISTS `data_associations`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `data_associations` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `parent_id` int(11) DEFAULT NULL,
  `parent_class` varchar(255) DEFAULT NULL,
  `key` varchar(255) DEFAULT NULL,
  `upload_id` int(11) DEFAULT NULL,
  `object` text,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`),
  KEY `index_data_associations_on_upload_id` (`upload_id`)
) ENGINE=InnoDB AUTO_INCREMENT=81547 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `data_associations`
--

LOCK TABLES `data_associations` WRITE;
/*!40000 ALTER TABLE `data_associations` DISABLE KEYS */;
INSERT INTO `data_associations` VALUES (81459,99734,'Item','order_number',NULL,'{\"order_number\":100}','2017-10-02 17:51:12','2017-10-02 17:51:12'),(81460,99735,'Item','order_number',NULL,'{\"order_number\":100}','2017-10-02 17:51:12','2017-10-02 17:51:12'),(81461,2953,'Operation','precondition_warnings',NULL,'{\"precondition_warnings\":\"\"}','2017-10-02 17:51:18','2017-10-02 17:51:18'),(81462,1197,'Plan','precondition_warnings',NULL,'{\"precondition_warnings\":\"\"}','2017-10-02 17:51:18','2017-10-02 17:51:18'),(81463,2953,'Operation','job_start',NULL,'{\"job_start\":\"Could not start job: could not find library \'Cloning Libs/Gradient PCR\'\"}','2017-10-02 17:51:18','2017-10-02 17:51:18'),(81464,1197,'Plan','job_start',NULL,'{\"job_start\":\"Could not start job: could not find library \'Cloning Libs/Gradient PCR\'\"}','2017-10-02 17:51:19','2017-10-02 17:51:19'),(81465,2958,'Operation','precondition_warnings',NULL,'{\"precondition_warnings\":\"\"}','2017-10-02 17:54:38','2017-10-02 17:54:38'),(81466,1198,'Plan','precondition_warnings',NULL,'{\"precondition_warnings\":\"\"}','2017-10-02 17:54:38','2017-10-02 17:54:38'),(81467,2953,'Operation','job_crash',NULL,'{\"job_crash\":\"Operation canceled when job 42595 crashed\"}','2017-10-02 17:56:45','2017-10-02 18:16:12'),(81468,99733,'Item','concentration',NULL,'{\"concentration\":42}','2017-10-02 17:59:39','2017-10-02 17:59:39'),(81469,2958,'Operation','job_crash',NULL,'{\"job_crash\":\"Operation canceled when job 42595 crashed\"}','2017-10-02 18:00:24','2017-10-02 18:16:12'),(81470,2959,'Operation','aborted',NULL,'{\"aborted\":\"Operation was canceled when job 42603 was aborted\"}','2017-10-27 04:48:19','2017-10-27 04:48:19'),(81471,2959,'Operation','job_crash',NULL,'{\"job_crash\":\"Operation canceled when job 42603 crashed\"}','2017-10-27 04:48:19','2017-10-27 04:48:19'),(81472,2981,'Operation','precondition_warnings',NULL,'{\"precondition_warnings\":\"\"}','2017-10-27 05:07:54','2017-10-27 05:07:54'),(81473,1203,'Plan','precondition_warnings',NULL,'{\"precondition_warnings\":\"\"}','2017-10-27 05:07:54','2017-10-27 05:07:54'),(81474,99749,'Item','order_number',NULL,'{\"order_number\":100}','2017-10-27 05:07:54','2017-10-27 05:07:54'),(81475,3006,'Operation','precondition_warnings',NULL,'{\"precondition_warnings\":\"\"}','2017-10-27 05:35:08','2017-10-27 05:35:08'),(81477,99773,'Item','order_number',NULL,'{\"order_number\":100}','2017-10-27 05:35:12','2017-10-27 05:35:12'),(81478,99777,'Item','gel_image',NULL,'{\"gel_image\":\"Your fragment is in row 1 and column 3\"}','2017-10-27 05:35:33','2017-10-27 05:35:33'),(81479,99777,'Item','weight',NULL,'{\"weight\":0.31836691602421674}','2017-10-27 05:35:33','2017-10-27 05:35:38'),(81480,3004,'Operation','gel_image',NULL,'{\"gel_image\":\"Your fragment is in row 1 and column 3\"}','2017-10-27 05:35:33','2017-10-27 05:35:33'),(81482,99778,'Item','concentration',NULL,'{\"concentration\":7}','2017-10-27 05:35:38','2017-10-27 05:35:38'),(81483,99778,'Item','notes',NULL,'{\"notes\":\"0\"}','2017-10-27 05:35:38','2017-10-27 05:35:38'),(81484,3021,'Operation','job_crash',NULL,'{\"job_crash\":\"Operation canceled when job 42655 crashed\"}','2017-10-27 05:40:00','2017-10-27 05:40:00'),(81485,3021,'Operation','aborted',NULL,'{\"aborted\":\"Operation was canceled when job 42655 was aborted\"}','2017-10-27 05:40:00','2017-10-27 05:40:00'),(81487,3008,'Operation','job_start',NULL,'{\"job_start\":\"Could not start job: could not find library \'Cloning Libs/Special Days\'\"}','2017-10-27 05:42:16','2017-10-27 05:42:16'),(81488,3009,'Operation','job_start',NULL,'{\"job_start\":\"Could not start job: could not find library \'Cloning Libs/Special Days\'\"}','2017-10-27 05:42:16','2017-10-27 05:42:16'),(81489,3010,'Operation','job_start',NULL,'{\"job_start\":\"Could not start job: could not find library \'Cloning Libs/Special Days\'\"}','2017-10-27 05:42:16','2017-10-27 05:42:16'),(81490,3011,'Operation','job_start',NULL,'{\"job_start\":\"Could not start job: could not find library \'Cloning Libs/Special Days\'\"}','2017-10-27 05:42:16','2017-10-27 05:42:16'),(81491,3012,'Operation','job_start',NULL,'{\"job_start\":\"Could not start job: could not find library \'Cloning Libs/Special Days\'\"}','2017-10-27 05:42:16','2017-10-27 05:42:16'),(81492,3014,'Operation','job_start',NULL,'{\"job_start\":\"Could not start job: could not find library \'Cloning Libs/Special Days\'\"}','2017-10-27 05:42:16','2017-10-27 05:42:16'),(81493,3015,'Operation','job_start',NULL,'{\"job_start\":\"Could not start job: could not find library \'Cloning Libs/Special Days\'\"}','2017-10-27 05:42:16','2017-10-27 05:42:16'),(81494,3016,'Operation','job_start',NULL,'{\"job_start\":\"Could not start job: could not find library \'Cloning Libs/Special Days\'\"}','2017-10-27 05:42:16','2017-10-27 05:42:16'),(81495,3017,'Operation','job_start',NULL,'{\"job_start\":\"Could not start job: could not find library \'Cloning Libs/Special Days\'\"}','2017-10-27 05:42:16','2017-10-27 05:42:16'),(81496,3018,'Operation','job_start',NULL,'{\"job_start\":\"Could not start job: could not find library \'Cloning Libs/Special Days\'\"}','2017-10-27 05:42:16','2017-10-27 05:42:16'),(81498,3012,'Operation','not_enough_comp_cells',NULL,'{\"not_enough_comp_cells\":\"There were not enough comp cells of DH5alpha to complete the operation.\"}','2017-10-27 05:43:42','2017-10-27 05:43:42'),(81500,3011,'Operation','no_marker',NULL,'{\"no_marker\":\"There is no marker associated with this sample, so we can\'t plate it. Please input a marker.\"}','2017-10-27 05:47:22','2017-10-27 05:47:22'),(81501,2978,'Operation','canceled',NULL,'{\"canceled\":\"Canceled via user interface (user: neptune)\"}','2017-10-27 05:47:50','2017-10-27 05:47:50'),(81502,2979,'Operation','canceled',NULL,'{\"canceled\":\"Canceled via user interface (user: neptune)\"}','2017-10-27 05:47:50','2017-10-27 05:47:50'),(81503,2980,'Operation','canceled',NULL,'{\"canceled\":\"Canceled via user interface (user: neptune)\"}','2017-10-27 05:47:50','2017-10-27 05:47:50'),(81504,2983,'Operation','canceled',NULL,'{\"canceled\":\"Canceled via user interface (user: neptune)\"}','2017-10-27 05:47:50','2017-10-27 05:47:50'),(81505,2984,'Operation','canceled',NULL,'{\"canceled\":\"Canceled via user interface (user: neptune)\"}','2017-10-27 05:47:50','2017-10-27 05:47:50'),(81506,2985,'Operation','canceled',NULL,'{\"canceled\":\"Canceled via user interface (user: neptune)\"}','2017-10-27 05:47:50','2017-10-27 05:47:50'),(81507,2986,'Operation','canceled',NULL,'{\"canceled\":\"Canceled via user interface (user: neptune)\"}','2017-10-27 05:47:50','2017-10-27 05:47:50'),(81508,2987,'Operation','canceled',NULL,'{\"canceled\":\"Canceled via user interface (user: neptune)\"}','2017-10-27 05:47:50','2017-10-27 05:47:50'),(81509,2988,'Operation','canceled',NULL,'{\"canceled\":\"Canceled via user interface (user: neptune)\"}','2017-10-27 05:47:50','2017-10-27 05:47:50'),(81510,2989,'Operation','canceled',NULL,'{\"canceled\":\"Canceled via user interface (user: neptune)\"}','2017-10-27 05:47:50','2017-10-27 05:47:50'),(81511,2990,'Operation','canceled',NULL,'{\"canceled\":\"Canceled via user interface (user: neptune)\"}','2017-10-27 05:47:50','2017-10-27 05:47:50'),(81512,2991,'Operation','canceled',NULL,'{\"canceled\":\"Canceled via user interface (user: neptune)\"}','2017-10-27 05:47:50','2017-10-27 05:47:50'),(81513,2992,'Operation','canceled',NULL,'{\"canceled\":\"Canceled via user interface (user: neptune)\"}','2017-10-27 05:47:50','2017-10-27 05:47:50'),(81514,2993,'Operation','canceled',NULL,'{\"canceled\":\"Canceled via user interface (user: neptune)\"}','2017-10-27 05:47:50','2017-10-27 05:47:50'),(81515,1203,'Plan','canceled',NULL,'{\"canceled\":\"Canceled via user interface (user: neptune)\"}','2017-10-27 05:47:50','2017-10-27 05:47:50'),(81517,99798,'Item','num_colonies',NULL,'{\"num_colonies\":5}','2017-10-27 05:59:47','2017-10-27 05:59:47'),(81518,99798,'Item','status',NULL,'{\"status\":null}','2017-10-27 05:59:47','2017-10-27 05:59:47'),(81519,1210,'Plan','plate_20337',NULL,'{\"plate_20337\":99798}','2017-10-27 05:59:47','2017-10-27 05:59:47'),(81520,99798,'Item','num_picked',NULL,'{\"num_picked\":1}','2017-10-27 06:00:05','2017-10-27 06:00:05'),(81521,99799,'Item','from',NULL,'{\"from\":99798}','2017-10-27 06:00:05','2017-10-27 06:00:05'),(81522,99800,'Item','concentration',NULL,'{\"concentration\":200}','2017-10-27 06:00:33','2017-10-27 06:00:33'),(81523,99800,'Item','from',NULL,'{\"from\":99799}','2017-10-27 06:00:33','2017-10-27 06:00:33'),(81524,1210,'Plan','overnight_20337',NULL,'{\"overnight_20337\":99799}','2017-10-27 06:00:33','2017-10-27 06:00:33'),(81525,1210,'Plan','plasmid',NULL,'{\"plasmid\":99800}','2017-10-27 06:00:33','2017-10-27 06:00:33'),(81526,99801,'Item','seq_order_name_0',NULL,'{\"seq_order_name_0\":\"99800-Joe_Neptune-20339\"}','2017-10-27 06:01:05','2017-10-27 06:01:05'),(81527,99801,'Item','seq_order_name_1',NULL,'{\"seq_order_name_1\":\"99800-Joe_Neptune-20339\"}','2017-10-27 06:01:05','2017-10-27 06:01:05'),(81528,99801,'Item','tracking_num',NULL,'{\"tracking_num\":\"123412-129\"}','2017-10-27 06:01:19','2017-10-27 06:01:19'),(81529,99801,'Item','order_date',NULL,'{\"order_date\":\"10/26/17 11:01:19 PM\"}','2017-10-27 06:01:19','2017-10-27 06:01:19'),(81530,3016,'Operation','job_crash',NULL,'{\"job_crash\":\"Operation canceled when job 42701 crashed\"}','2017-10-27 06:01:33','2017-10-27 06:01:33'),(81531,3018,'Operation','job_crash',NULL,'{\"job_crash\":\"Operation canceled when job 42701 crashed\"}','2017-10-27 06:01:33','2017-10-27 06:01:33'),(81532,99801,'Item','seq_order_name_',NULL,'{\"seq_order_name_\":\"99801_\"}','2017-10-27 06:08:11','2017-10-27 06:08:11'),(81538,1210,'Plan','my first plasmid in Item 99800-Joe_Neptune-20339 sequencing results',NULL,'{\"my first plasmid in Item 99800-Joe_Neptune-20339 sequencing results\":\"How do they look?\"}','2017-10-27 06:13:43','2017-10-27 06:13:43'),(81539,99800,'Item','Item 99800-Joe_Neptune-20339 sequencing results',NULL,'{\"Item 99800-Joe_Neptune-20339 sequencing results\":\"How do they look?\"}','2017-10-27 06:13:43','2017-10-27 06:13:43'),(81540,99799,'Item','Item 99800-Joe_Neptune-20339 sequencing results',NULL,'{\"Item 99800-Joe_Neptune-20339 sequencing results\":\"How do they look?\"}','2017-10-27 06:13:43','2017-10-27 06:13:43'),(81541,1210,'Plan','Item 99800 sequencing ok?',NULL,'{\"Item 99800 sequencing ok?\":\"yes\"}','2017-10-26 16:13:54','2017-10-26 23:17:13'),(81543,99799,'Item','sequence_verified',NULL,'{\"sequence_verified\":\"Yes\"}','2017-10-27 06:16:35','2017-10-27 06:16:35'),(81544,99803,'Item','Item 99800-Joe_Neptune-20339 sequencing results',NULL,'{\"Item 99800-Joe_Neptune-20339 sequencing results\":\"How do they look?\"}','2017-10-27 06:16:43','2017-10-27 06:16:43'),(81545,99803,'Item','sequence_verified',NULL,'{\"sequence_verified\":\"Yes\"}','2017-10-27 06:16:43','2017-10-27 06:16:43'),(81546,99800,'Item','sequence_verified',NULL,'{\"sequence_verified\":\"Yes\"}','2017-10-27 06:17:12','2017-10-27 06:17:12');
/*!40000 ALTER TABLE `data_associations` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `field_types`
--

DROP TABLE IF EXISTS `field_types`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `field_types` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `parent_id` int(11) DEFAULT NULL,
  `name` varchar(255) DEFAULT NULL,
  `ftype` varchar(255) DEFAULT NULL,
  `choices` varchar(255) DEFAULT NULL,
  `array` tinyint(1) DEFAULT NULL,
  `required` tinyint(1) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  `parent_class` varchar(255) DEFAULT NULL,
  `role` varchar(255) DEFAULT NULL,
  `part` tinyint(1) DEFAULT NULL,
  `routing` varchar(255) DEFAULT NULL,
  `preferred_operation_type_id` int(11) DEFAULT NULL,
  `preferred_field_type_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `index_field_types_on_sample_type_id` (`parent_id`)
) ENGINE=InnoDB AUTO_INCREMENT=581 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `field_types`
--

LOCK TABLES `field_types` WRITE;
/*!40000 ALTER TABLE `field_types` DISABLE KEYS */;
INSERT INTO `field_types` VALUES (511,21,'Overhang Sequence','string',NULL,0,0,'2017-10-02 16:27:22','2017-10-02 16:27:22','SampleType',NULL,NULL,NULL,NULL,NULL),(512,21,'Anneal Sequence','string',NULL,0,1,'2017-10-02 16:27:22','2017-10-02 16:27:22','SampleType',NULL,NULL,NULL,NULL,NULL),(513,21,'T Anneal','number',NULL,0,1,'2017-10-02 16:27:22','2017-10-02 16:27:22','SampleType',NULL,NULL,NULL,NULL,NULL),(514,22,'Sequence','url',NULL,0,1,'2017-10-02 16:27:22','2017-10-02 16:27:22','SampleType',NULL,NULL,NULL,NULL,NULL),(515,22,'Sequence Verification','url',NULL,0,0,'2017-10-02 16:27:22','2017-10-02 16:27:22','SampleType',NULL,NULL,NULL,NULL,NULL),(516,22,'Bacterial Marker','string','Amp,Kan,Amp + Kan,Spec,Chlor,NA,Other',0,1,'2017-10-02 16:27:22','2017-10-02 16:27:22','SampleType',NULL,NULL,NULL,NULL,NULL),(517,22,'Yeast Marker','string','HIS,TRP,URA,LEU,NatMX,KanMX,HygMX,BleoMX,5FOA,NA,Other',0,0,'2017-10-02 16:27:22','2017-10-02 16:27:22','SampleType',NULL,NULL,NULL,NULL,NULL),(518,22,'Length','number',NULL,0,1,'2017-10-02 16:27:22','2017-10-02 16:27:22','SampleType',NULL,NULL,NULL,NULL,NULL),(519,22,'Sequencing Primers','sample',NULL,1,0,'2017-10-02 16:27:22','2017-10-02 16:27:22','SampleType',NULL,NULL,NULL,NULL,NULL),(520,23,'Sequence','url',NULL,0,1,'2017-10-02 16:27:22','2017-10-02 16:27:22','SampleType',NULL,NULL,NULL,NULL,NULL),(521,23,'Length','number',NULL,0,1,'2017-10-02 16:27:22','2017-10-02 16:27:22','SampleType',NULL,NULL,NULL,NULL,NULL),(522,23,'Template','sample',NULL,0,0,'2017-10-02 16:27:22','2017-10-02 16:27:22','SampleType',NULL,NULL,NULL,NULL,NULL),(523,23,'Forward Primer','sample',NULL,0,0,'2017-10-02 16:27:22','2017-10-02 16:27:22','SampleType',NULL,NULL,NULL,NULL,NULL),(524,23,'Reverse Primer','sample',NULL,0,0,'2017-10-02 16:27:22','2017-10-02 16:27:22','SampleType',NULL,NULL,NULL,NULL,NULL),(525,23,'Restriction Enzyme(s)','string',NULL,0,0,'2017-10-02 16:27:22','2017-10-02 16:27:22','SampleType',NULL,NULL,NULL,NULL,NULL),(526,23,'Yeast Marker','string',NULL,0,0,'2017-10-02 16:27:22','2017-10-02 16:27:22','SampleType',NULL,NULL,NULL,NULL,NULL),(527,24,'Parent','sample',NULL,NULL,1,'2017-10-02 16:27:22','2017-10-02 16:27:22','SampleType',NULL,NULL,NULL,NULL,NULL),(528,25,'Parent','sample',NULL,0,0,'2017-10-02 16:27:22','2017-10-02 16:27:22','SampleType',NULL,NULL,NULL,NULL,NULL),(529,25,'Integrant','sample',NULL,0,0,'2017-10-02 16:27:22','2017-10-02 16:27:22','SampleType',NULL,NULL,NULL,NULL,NULL),(530,25,'Plasmid','sample',NULL,0,0,'2017-10-02 16:27:22','2017-10-02 16:27:22','SampleType',NULL,NULL,NULL,NULL,NULL),(531,25,'Integrated Marker(s)','string',NULL,0,0,'2017-10-02 16:27:22','2017-10-02 16:27:22','SampleType',NULL,NULL,NULL,NULL,NULL),(532,25,'Plasmid Marker(s)','string',NULL,0,0,'2017-10-02 16:27:22','2017-10-02 16:27:22','SampleType',NULL,NULL,NULL,NULL,NULL),(533,25,'Mating Type','string','MATa,MATalpha,Diploid',0,1,'2017-10-02 16:27:22','2017-10-02 16:27:22','SampleType',NULL,NULL,NULL,NULL,NULL),(534,25,'QC Primer1','sample',NULL,0,0,'2017-10-02 16:27:22','2017-10-02 16:27:22','SampleType',NULL,NULL,NULL,NULL,NULL),(535,25,'QC Primer2','sample',NULL,0,0,'2017-10-02 16:27:22','2017-10-02 16:27:22','SampleType',NULL,NULL,NULL,NULL,NULL),(536,25,'QC_length','number','',0,0,'2017-10-02 16:27:22','2017-10-02 16:27:22','SampleType',NULL,NULL,NULL,NULL,NULL),(537,25,'Comp_cell_limit','string','Yes,No',0,0,'2017-10-02 16:27:22','2017-10-02 16:27:22','SampleType',NULL,NULL,NULL,NULL,NULL),(538,25,'Media','string',NULL,0,0,'2017-10-02 16:27:22','2017-10-02 16:27:22','SampleType',NULL,NULL,NULL,NULL,NULL),(539,25,'Has this strain passed QC?','string','No,Yes',0,1,'2017-10-02 16:27:22','2017-10-02 16:27:22','SampleType',NULL,NULL,NULL,NULL,NULL),(540,183,'Forward Primer','sample',NULL,0,NULL,'2017-10-02 16:27:22','2017-10-02 16:27:22','OperationType','input',0,'FP',329,1813),(541,183,'Reverse Primer','sample',NULL,0,NULL,'2017-10-02 16:27:22','2017-10-02 16:27:22','OperationType','input',0,'RP',329,1813),(542,183,'Template','sample',NULL,0,NULL,'2017-10-02 16:27:22','2017-10-02 16:27:22','OperationType','input',0,'T',NULL,NULL),(543,183,'Fragment','sample',NULL,0,NULL,'2017-10-02 16:27:22','2017-10-02 16:27:22','OperationType','output',1,'F',NULL,NULL),(544,184,'Primer','sample',NULL,0,NULL,'2017-10-02 16:28:05','2017-10-02 16:28:05','OperationType','output',0,'P',NULL,NULL),(545,184,'Urgent?','string','yes,no',0,NULL,'2017-10-02 16:28:05','2017-10-02 17:43:59','OperationType','input',0,NULL,NULL,NULL),(546,185,'Primer','sample',NULL,0,NULL,'2017-10-02 16:29:49','2017-10-02 16:29:49','OperationType','input',0,'P',328,1811),(547,185,'Primer Aliquot','sample',NULL,0,NULL,'2017-10-02 16:29:49','2017-10-02 16:29:49','OperationType','output',0,'P',NULL,NULL),(548,185,'Primer Stock','sample',NULL,0,NULL,'2017-10-02 16:29:49','2017-10-02 16:29:49','OperationType','output',0,'P',NULL,NULL),(549,186,'Fragment','sample',NULL,NULL,NULL,'2017-10-25 18:08:41','2017-10-25 18:08:41','OperationType','input',1,'F',NULL,NULL),(550,186,'Gel','sample',NULL,NULL,NULL,'2017-10-25 18:08:41','2017-10-25 18:08:41','OperationType','input',1,'L',NULL,NULL),(551,186,'Fragment','sample',NULL,NULL,NULL,'2017-10-25 18:08:41','2017-10-25 18:08:41','OperationType','output',1,'F',NULL,NULL),(552,187,'Lane','sample',NULL,NULL,NULL,'2017-10-25 18:09:36','2017-10-25 18:09:36','OperationType','output',1,NULL,NULL,NULL),(553,188,'Gel','sample',NULL,NULL,NULL,'2017-10-25 18:15:48','2017-10-25 18:15:48','OperationType','input',NULL,'F',NULL,NULL),(554,188,'Fragment','sample',NULL,NULL,NULL,'2017-10-25 18:15:48','2017-10-25 18:15:48','OperationType','output',NULL,'F',NULL,NULL),(555,189,'Fragment','sample',NULL,1,NULL,'2017-10-25 18:27:28','2017-10-25 18:27:28','OperationType','input',NULL,'F',NULL,NULL),(556,189,'Assembled Plasmid','sample',NULL,NULL,NULL,'2017-10-25 18:27:28','2017-10-25 18:27:28','OperationType','output',NULL,'P',NULL,NULL),(557,190,'Plasmid','sample',NULL,NULL,NULL,'2017-10-25 18:31:27','2017-10-25 18:31:27','OperationType','input',NULL,'P',NULL,NULL),(558,190,'Comp Cells','sample',NULL,NULL,NULL,'2017-10-25 18:31:27','2017-10-25 18:31:27','OperationType','input',1,'C',NULL,NULL),(559,190,'Transformed E Coli','sample',NULL,NULL,NULL,'2017-10-25 18:31:27','2017-10-25 18:31:27','OperationType','output',NULL,'P',NULL,NULL),(560,191,'Plasmid','sample',NULL,NULL,NULL,'2017-10-25 18:37:40','2017-10-25 18:37:40','OperationType','input',NULL,'P',NULL,NULL),(561,191,'Plate','sample',NULL,NULL,NULL,'2017-10-25 18:37:40','2017-10-25 18:37:40','OperationType','output',NULL,'P',NULL,NULL),(562,192,'Plate','sample',NULL,NULL,NULL,'2017-10-27 01:07:44','2017-10-27 01:07:44','OperationType','input',NULL,'P',NULL,NULL),(563,193,'Plate','sample',NULL,NULL,NULL,'2017-10-27 01:07:51','2017-10-27 01:07:51','OperationType','input',NULL,'P',NULL,NULL),(564,192,'Plate','sample',NULL,NULL,NULL,'2017-10-27 01:08:29','2017-10-27 01:08:29','OperationType','output',NULL,'P',NULL,NULL),(565,194,'Plasmid','sample',NULL,NULL,NULL,'2017-10-27 01:10:05','2017-10-27 01:10:05','OperationType','input',NULL,'P',NULL,NULL),(566,194,'Overnight','sample',NULL,NULL,NULL,'2017-10-27 01:10:05','2017-10-27 01:10:05','OperationType','output',NULL,'P',NULL,NULL),(567,195,'Plasmid','sample',NULL,NULL,NULL,'2017-10-27 01:10:46','2017-10-27 01:10:46','OperationType','input',NULL,'P',NULL,NULL),(568,195,'Plasmid','sample',NULL,NULL,NULL,'2017-10-27 01:10:46','2017-10-27 01:10:46','OperationType','output',NULL,'P',NULL,NULL),(569,196,'Plasmid','sample',NULL,NULL,NULL,'2017-10-27 01:12:59','2017-10-27 01:12:59','OperationType','input',NULL,'P',NULL,NULL),(570,196,'Sequencing Primer','sample',NULL,NULL,NULL,'2017-10-27 01:12:59','2017-10-27 01:12:59','OperationType','input',NULL,'SP',NULL,NULL),(571,196,'Plasmid for Sequencing','sample',NULL,NULL,NULL,'2017-10-27 01:12:59','2017-10-27 01:12:59','OperationType','output',1,'P',NULL,NULL),(572,197,'Overnight','sample',NULL,NULL,NULL,'2017-10-27 01:15:26','2017-10-27 01:15:26','OperationType','input',NULL,'P',NULL,NULL),(573,197,'Stock','sample',NULL,NULL,NULL,'2017-10-27 01:15:26','2017-10-27 01:15:26','OperationType','output',NULL,'P',NULL,NULL),(574,197,'Needs Sequencing Results?','string','No,Yes',NULL,NULL,'2017-10-27 01:15:26','2017-10-27 01:15:26','OperationType','input',NULL,NULL,NULL,NULL),(575,198,'Plasmid','sample',NULL,NULL,NULL,'2017-10-27 01:16:04','2017-10-27 01:16:25','OperationType','input',1,'P',NULL,NULL),(576,199,'Stock','sample',NULL,NULL,NULL,'2017-10-27 01:17:08','2017-10-27 01:17:08','OperationType','input',NULL,'P',NULL,NULL),(577,199,'Plate','sample',NULL,NULL,NULL,'2017-10-27 01:17:08','2017-10-27 01:17:08','OperationType','input',NULL,'P',NULL,NULL),(578,200,'Batch','sample',NULL,NULL,NULL,'2017-10-27 04:43:00','2017-10-27 04:43:00','OperationType','output',NULL,NULL,NULL,NULL),(579,201,'Fragment','sample',NULL,NULL,NULL,'2017-10-27 04:56:55','2017-10-27 04:56:55','OperationType','input',1,'F',NULL,NULL),(580,201,'Fragment','sample',NULL,NULL,NULL,'2017-10-27 04:56:55','2017-10-27 04:56:55','OperationType','output',NULL,'F',NULL,NULL);
/*!40000 ALTER TABLE `field_types` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `field_values`
--

DROP TABLE IF EXISTS `field_values`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `field_values` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `parent_id` int(11) DEFAULT NULL,
  `value` varchar(255) DEFAULT NULL,
  `child_sample_id` int(11) DEFAULT NULL,
  `child_item_id` int(11) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  `name` varchar(255) DEFAULT NULL,
  `parent_class` varchar(255) DEFAULT NULL,
  `role` varchar(255) DEFAULT NULL,
  `field_type_id` int(11) DEFAULT NULL,
  `row` int(11) DEFAULT NULL,
  `column` int(11) DEFAULT NULL,
  `allowable_field_type_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `index_field_values_on_sample_id` (`parent_id`),
  KEY `index_field_values_on_field_type_id` (`field_type_id`),
  KEY `index_field_values_on_allowable_field_type_id` (`allowable_field_type_id`)
) ENGINE=InnoDB AUTO_INCREMENT=189089 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `field_values`
--

LOCK TABLES `field_values` WRITE;
/*!40000 ALTER TABLE `field_values` DISABLE KEYS */;
INSERT INTO `field_values` VALUES (188795,20336,'http://please.link.your.sequences.com',NULL,NULL,'2017-10-02 16:35:24','2017-10-02 16:35:24','Sequence','Sample',NULL,NULL,NULL,NULL,NULL),(188796,20336,'1000.0',NULL,NULL,'2017-10-02 16:35:24','2017-10-02 16:35:24','Length','Sample',NULL,NULL,NULL,NULL,NULL),(188797,20336,NULL,20337,NULL,'2017-10-02 16:35:24','2017-10-02 16:35:25','Template','Sample',NULL,NULL,NULL,NULL,NULL),(188798,20337,'http://please.link.your.sequences.com',NULL,NULL,'2017-10-02 16:35:24','2017-10-02 16:35:24','Sequence','Sample',NULL,NULL,NULL,NULL,NULL),(188799,20337,'http://please.link.your.sequences.com',NULL,NULL,'2017-10-02 16:35:24','2017-10-02 16:35:24','Sequence Verification','Sample',NULL,NULL,NULL,NULL,NULL),(188800,20337,'Amp',NULL,NULL,'2017-10-02 16:35:25','2017-10-02 16:35:25','Bacterial Marker','Sample',NULL,NULL,NULL,NULL,NULL),(188801,20337,'HIS',NULL,NULL,'2017-10-02 16:35:25','2017-10-02 16:35:25','Yeast Marker','Sample',NULL,NULL,NULL,NULL,NULL),(188802,20337,'0.0',NULL,NULL,'2017-10-02 16:35:25','2017-10-02 16:35:25','Length','Sample',NULL,NULL,NULL,NULL,NULL),(188803,20336,NULL,20338,NULL,'2017-10-02 16:35:25','2017-10-02 16:35:25','Forward Primer','Sample',NULL,NULL,NULL,NULL,NULL),(188804,20338,'ACCTTACGGAGCTACGACTACG',NULL,NULL,'2017-10-02 16:35:25','2017-10-02 16:35:25','Overhang Sequence','Sample',NULL,NULL,NULL,NULL,NULL),(188805,20338,'CACGGCTAGGAGCTACGACTGC',NULL,NULL,'2017-10-02 16:35:25','2017-10-02 16:35:25','Anneal Sequence','Sample',NULL,NULL,NULL,NULL,NULL),(188806,20338,'65.0',NULL,NULL,'2017-10-02 16:35:25','2017-10-02 16:35:25','T Anneal','Sample',NULL,NULL,NULL,NULL,NULL),(188807,20336,NULL,20339,NULL,'2017-10-02 16:35:25','2017-10-02 16:35:25','Reverse Primer','Sample',NULL,NULL,NULL,NULL,NULL),(188808,20339,'ACATTGAGGGAGTCATCGACGAGCAGC',NULL,NULL,'2017-10-02 16:35:25','2017-10-02 16:35:25','Overhang Sequence','Sample',NULL,NULL,NULL,NULL,NULL),(188809,20339,'ATTCGAGCGACTACGACATC',NULL,NULL,'2017-10-02 16:35:25','2017-10-02 16:35:25','Anneal Sequence','Sample',NULL,NULL,NULL,NULL,NULL),(188810,20339,'65.0',NULL,NULL,'2017-10-02 16:35:25','2017-10-02 16:35:25','T Anneal','Sample',NULL,NULL,NULL,NULL,NULL),(188811,20336,'',NULL,NULL,'2017-10-02 16:35:25','2017-10-02 16:35:25','Restriction Enzyme(s)','Sample',NULL,NULL,NULL,NULL,NULL),(188812,20336,'',NULL,NULL,'2017-10-02 16:35:25','2017-10-02 16:35:25','Yeast Marker','Sample',NULL,NULL,NULL,NULL,NULL),(188813,2953,NULL,20338,99736,'2017-10-02 16:36:33','2017-10-02 17:51:16','Forward Primer','Operation','input',540,NULL,NULL,493),(188814,2953,NULL,20339,99736,'2017-10-02 16:36:33','2017-10-02 17:52:14','Reverse Primer','Operation','input',541,NULL,NULL,494),(188815,2953,NULL,20337,99740,'2017-10-02 16:36:33','2017-10-02 18:16:09','Template','Operation','input',542,NULL,NULL,495),(188816,2953,NULL,20336,99743,'2017-10-02 16:36:33','2017-10-02 18:18:25','Fragment','Operation','output',543,0,0,500),(188817,2954,NULL,20338,99734,'2017-10-02 16:36:33','2017-10-02 17:51:12','Primer','Operation','input',546,NULL,NULL,502),(188818,2954,NULL,20338,99736,'2017-10-02 16:36:33','2017-10-02 17:51:15','Primer Aliquot','Operation','output',547,NULL,NULL,503),(188819,2954,NULL,20338,99737,'2017-10-02 16:36:33','2017-10-02 17:51:15','Primer Stock','Operation','output',548,NULL,NULL,504),(188820,2955,NULL,20338,99734,'2017-10-02 16:36:33','2017-10-02 17:51:12','Primer','Operation','output',544,NULL,NULL,501),(188821,2955,'yes',NULL,NULL,'2017-10-02 16:36:33','2017-10-02 17:44:23','Urgent?','Operation','input',545,NULL,NULL,NULL),(188822,2956,NULL,20339,99735,'2017-10-02 16:36:33','2017-10-02 17:51:12','Primer','Operation','input',546,NULL,NULL,502),(188823,2956,NULL,20339,99738,'2017-10-02 16:36:33','2017-10-02 17:51:15','Primer Aliquot','Operation','output',547,NULL,NULL,503),(188824,2956,NULL,20339,99739,'2017-10-02 16:36:33','2017-10-02 17:51:15','Primer Stock','Operation','output',548,NULL,NULL,504),(188825,2957,NULL,20339,99735,'2017-10-02 16:36:33','2017-10-02 17:51:12','Primer','Operation','output',544,NULL,NULL,501),(188826,2957,'yes',NULL,NULL,'2017-10-02 16:36:33','2017-10-02 17:44:23','Urgent?','Operation','input',545,NULL,NULL,NULL),(188827,2958,NULL,20338,99736,'2017-10-02 17:54:25','2017-10-02 17:54:25','Forward Primer','Operation','input',540,NULL,NULL,493),(188828,2958,NULL,20339,99736,'2017-10-02 17:54:25','2017-10-02 17:54:38','Reverse Primer','Operation','input',541,NULL,NULL,494),(188829,2958,NULL,20337,99740,'2017-10-02 17:54:25','2017-10-02 17:59:39','Template','Operation','input',542,NULL,NULL,495),(188830,2958,NULL,20336,99742,'2017-10-02 17:54:25','2017-10-02 18:17:39','Fragment','Operation','output',543,0,0,500),(188831,2959,NULL,NULL,99747,'2017-10-27 04:43:54','2017-10-27 04:49:22','Batch','Operation','output',578,NULL,NULL,533),(188832,20341,NULL,NULL,NULL,'2017-10-27 04:48:02','2017-10-27 04:48:02','Parent','Sample',NULL,NULL,NULL,NULL,NULL),(188833,2960,NULL,NULL,NULL,'2017-10-27 04:52:34','2017-10-27 04:52:34','Overnight','Operation','input',572,NULL,NULL,528),(188834,2960,NULL,NULL,NULL,'2017-10-27 04:52:34','2017-10-27 04:52:34','Stock','Operation','output',573,NULL,NULL,529),(188835,2960,'Yes',NULL,NULL,'2017-10-27 04:52:34','2017-10-27 04:52:34','Needs Sequencing Results?','Operation','input',574,NULL,NULL,NULL),(188836,2961,NULL,NULL,NULL,'2017-10-27 04:52:34','2017-10-27 04:52:34','Plasmid','Operation','input',565,NULL,NULL,521),(188837,2961,NULL,NULL,NULL,'2017-10-27 04:52:34','2017-10-27 04:52:34','Overnight','Operation','output',566,NULL,NULL,522),(188838,2962,NULL,NULL,NULL,'2017-10-27 04:52:34','2017-10-27 04:52:34','Plate','Operation','input',562,NULL,NULL,518),(188839,2962,NULL,NULL,NULL,'2017-10-27 04:52:34','2017-10-27 04:52:34','Plate','Operation','output',564,NULL,NULL,520),(188840,2963,NULL,NULL,NULL,'2017-10-27 04:52:34','2017-10-27 04:52:34','Plasmid','Operation','input',560,NULL,NULL,516),(188841,2963,NULL,NULL,NULL,'2017-10-27 04:52:34','2017-10-27 04:52:34','Plate','Operation','output',561,NULL,NULL,517),(188842,2964,NULL,NULL,NULL,'2017-10-27 04:52:34','2017-10-27 04:52:34','Plasmid','Operation','input',557,NULL,NULL,513),(188843,2964,NULL,20341,99747,'2017-10-27 04:52:34','2017-10-27 04:54:49','Comp Cells','Operation','input',558,0,0,514),(188844,2964,NULL,NULL,NULL,'2017-10-27 04:52:34','2017-10-27 04:52:34','Transformed E Coli','Operation','output',559,NULL,NULL,515),(188845,2965,NULL,NULL,NULL,'2017-10-27 04:52:34','2017-10-27 04:52:34','Fragment','Operation','input',555,NULL,NULL,511),(188846,2965,NULL,NULL,NULL,'2017-10-27 04:52:34','2017-10-27 04:52:34','Assembled Plasmid','Operation','output',556,NULL,NULL,512),(188847,2966,NULL,NULL,NULL,'2017-10-27 04:52:34','2017-10-27 04:52:34','Plasmid','Operation','input',567,NULL,NULL,523),(188848,2966,NULL,NULL,NULL,'2017-10-27 04:52:34','2017-10-27 04:52:34','Plasmid','Operation','output',568,NULL,NULL,524),(188849,2967,NULL,NULL,NULL,'2017-10-27 04:52:34','2017-10-27 04:52:34','Plasmid','Operation','input',569,NULL,NULL,525),(188850,2967,NULL,NULL,NULL,'2017-10-27 04:52:34','2017-10-27 04:52:34','Sequencing Primer','Operation','input',570,NULL,NULL,526),(188851,2967,NULL,NULL,NULL,'2017-10-27 04:52:34','2017-10-27 04:52:34','Plasmid for Sequencing','Operation','output',571,NULL,NULL,527),(188852,2968,NULL,NULL,NULL,'2017-10-27 04:52:34','2017-10-27 04:52:34','Plasmid','Operation','input',575,NULL,NULL,530),(188853,2969,NULL,NULL,NULL,'2017-10-27 04:52:34','2017-10-27 04:52:34','Plasmid','Operation','input',569,NULL,NULL,525),(188854,2969,NULL,NULL,NULL,'2017-10-27 04:52:34','2017-10-27 04:52:34','Sequencing Primer','Operation','input',570,NULL,NULL,526),(188855,2969,NULL,NULL,NULL,'2017-10-27 04:52:34','2017-10-27 04:52:34','Plasmid for Sequencing','Operation','output',571,NULL,NULL,527),(188856,2970,NULL,NULL,NULL,'2017-10-27 04:54:17','2017-10-27 04:54:17','Plasmid','Operation','input',575,NULL,NULL,530),(188857,2971,NULL,NULL,NULL,'2017-10-27 04:59:30','2017-10-27 04:59:30','Gel','Operation','input',553,NULL,NULL,509),(188858,2971,NULL,NULL,NULL,'2017-10-27 04:59:30','2017-10-27 04:59:30','Fragment','Operation','output',554,NULL,NULL,510),(188859,2972,NULL,NULL,NULL,'2017-10-27 04:59:30','2017-10-27 04:59:30','Fragment','Operation','input',579,NULL,NULL,534),(188860,2972,NULL,NULL,NULL,'2017-10-27 04:59:30','2017-10-27 04:59:30','Fragment','Operation','output',580,NULL,NULL,535),(188861,2973,NULL,NULL,NULL,'2017-10-27 04:59:30','2017-10-27 04:59:30','Fragment','Operation','input',549,NULL,NULL,505),(188862,2973,NULL,NULL,NULL,'2017-10-27 04:59:30','2017-10-27 04:59:30','Gel','Operation','input',550,NULL,NULL,506),(188863,2973,NULL,NULL,NULL,'2017-10-27 04:59:30','2017-10-27 04:59:30','Fragment','Operation','output',551,NULL,NULL,507),(188864,2974,NULL,NULL,NULL,'2017-10-27 04:59:30','2017-10-27 04:59:30','Forward Primer','Operation','input',540,NULL,NULL,493),(188865,2974,NULL,NULL,NULL,'2017-10-27 04:59:30','2017-10-27 04:59:30','Reverse Primer','Operation','input',541,NULL,NULL,494),(188866,2974,NULL,NULL,NULL,'2017-10-27 04:59:30','2017-10-27 04:59:30','Template','Operation','input',542,NULL,NULL,495),(188867,2974,NULL,NULL,NULL,'2017-10-27 04:59:30','2017-10-27 04:59:30','Fragment','Operation','output',543,NULL,NULL,500),(188868,2975,NULL,NULL,NULL,'2017-10-27 04:59:30','2017-10-27 04:59:30','Lane','Operation','output',552,NULL,NULL,508),(188869,2976,NULL,NULL,NULL,'2017-10-27 05:00:53','2017-10-27 05:00:53','Plasmid','Operation','input',569,NULL,NULL,525),(188870,2976,NULL,NULL,NULL,'2017-10-27 05:00:53','2017-10-27 05:00:53','Sequencing Primer','Operation','input',570,NULL,NULL,526),(188871,2976,NULL,NULL,NULL,'2017-10-27 05:00:53','2017-10-27 05:00:53','Plasmid for Sequencing','Operation','output',571,NULL,NULL,527),(188872,2977,NULL,NULL,NULL,'2017-10-27 05:00:53','2017-10-27 05:00:53','Plasmid','Operation','input',575,NULL,NULL,530),(188873,20342,'http://please.link.your.sequences.com',NULL,NULL,'2017-10-27 05:03:23','2017-10-27 05:03:23','Sequence','Sample',NULL,NULL,NULL,NULL,NULL),(188874,20342,'1500.0',NULL,NULL,'2017-10-27 05:03:23','2017-10-27 05:03:23','Length','Sample',NULL,NULL,NULL,NULL,NULL),(188875,20342,NULL,20337,NULL,'2017-10-27 05:03:23','2017-10-27 05:03:23','Template','Sample',NULL,NULL,NULL,NULL,NULL),(188876,20342,NULL,20338,NULL,'2017-10-27 05:03:23','2017-10-27 05:03:23','Forward Primer','Sample',NULL,NULL,NULL,NULL,NULL),(188877,20342,NULL,20339,NULL,'2017-10-27 05:03:23','2017-10-27 05:03:23','Reverse Primer','Sample',NULL,NULL,NULL,NULL,NULL),(188878,20342,'',NULL,NULL,'2017-10-27 05:03:23','2017-10-27 05:03:23','Restriction Enzyme(s)','Sample',NULL,NULL,NULL,NULL,NULL),(188879,20342,'',NULL,NULL,'2017-10-27 05:03:23','2017-10-27 05:03:23','Yeast Marker','Sample',NULL,NULL,NULL,NULL,NULL),(188880,2978,NULL,20336,NULL,'2017-10-27 05:03:49','2017-10-27 05:05:14','Gel','Operation','input',553,NULL,NULL,509),(188881,2978,NULL,20336,NULL,'2017-10-27 05:03:49','2017-10-27 05:05:14','Fragment','Operation','output',554,NULL,NULL,510),(188882,2979,NULL,20336,NULL,'2017-10-27 05:03:49','2017-10-27 05:05:14','Fragment','Operation','input',579,NULL,NULL,534),(188883,2979,NULL,20336,NULL,'2017-10-27 05:03:49','2017-10-27 05:05:14','Fragment','Operation','output',580,NULL,NULL,535),(188884,2980,NULL,20336,99750,'2017-10-27 05:03:49','2017-10-27 05:09:45','Fragment','Operation','input',549,0,0,505),(188885,2980,NULL,NULL,99753,'2017-10-27 05:03:49','2017-10-27 05:09:45','Gel','Operation','input',550,0,2,506),(188886,2980,NULL,20336,99753,'2017-10-27 05:03:49','2017-10-27 05:09:49','Fragment','Operation','output',551,0,2,507),(188887,2981,NULL,20338,99736,'2017-10-27 05:03:49','2017-10-27 05:05:14','Forward Primer','Operation','input',540,NULL,NULL,493),(188888,2981,NULL,20339,99736,'2017-10-27 05:03:49','2017-10-27 05:07:54','Reverse Primer','Operation','input',541,NULL,NULL,494),(188889,2981,NULL,20337,99740,'2017-10-27 05:03:49','2017-10-27 05:09:33','Template','Operation','input',542,NULL,NULL,495),(188890,2981,NULL,20336,99750,'2017-10-27 05:03:49','2017-10-27 05:09:36','Fragment','Operation','output',543,0,0,500),(188891,2982,NULL,NULL,99753,'2017-10-27 05:03:49','2017-10-27 05:09:44','Lane','Operation','output',552,0,2,508),(188892,2983,NULL,20337,NULL,'2017-10-27 05:03:49','2017-10-27 05:05:14','Overnight','Operation','input',572,NULL,NULL,528),(188893,2983,NULL,20337,NULL,'2017-10-27 05:03:49','2017-10-27 05:05:14','Stock','Operation','output',573,NULL,NULL,529),(188894,2983,'Yes',NULL,NULL,'2017-10-27 05:03:49','2017-10-27 05:03:49','Needs Sequencing Results?','Operation','input',574,NULL,NULL,NULL),(188895,2984,NULL,20337,NULL,'2017-10-27 05:03:49','2017-10-27 05:05:14','Plasmid','Operation','input',565,NULL,NULL,521),(188896,2984,NULL,20337,NULL,'2017-10-27 05:03:49','2017-10-27 05:05:14','Overnight','Operation','output',566,NULL,NULL,522),(188897,2985,NULL,20337,NULL,'2017-10-27 05:03:49','2017-10-27 05:05:14','Plate','Operation','input',562,NULL,NULL,518),(188898,2985,NULL,20337,NULL,'2017-10-27 05:03:49','2017-10-27 05:05:14','Plate','Operation','output',564,NULL,NULL,520),(188899,2986,NULL,20337,NULL,'2017-10-27 05:03:49','2017-10-27 05:05:14','Plasmid','Operation','input',560,NULL,NULL,516),(188900,2986,NULL,20337,NULL,'2017-10-27 05:03:49','2017-10-27 05:05:14','Plate','Operation','output',561,NULL,NULL,517),(188901,2987,NULL,20337,NULL,'2017-10-27 05:03:49','2017-10-27 05:05:14','Plasmid','Operation','input',557,NULL,NULL,513),(188902,2987,NULL,20341,99747,'2017-10-27 05:03:49','2017-10-27 05:03:49','Comp Cells','Operation','input',558,0,0,514),(188903,2987,NULL,20337,NULL,'2017-10-27 05:03:49','2017-10-27 05:05:14','Transformed E Coli','Operation','output',559,NULL,NULL,515),(188904,2988,NULL,20336,NULL,'2017-10-27 05:03:49','2017-10-27 05:05:14','Fragment','Operation','input',555,NULL,NULL,511),(188905,2988,NULL,20337,NULL,'2017-10-27 05:03:49','2017-10-27 05:05:14','Assembled Plasmid','Operation','output',556,NULL,NULL,512),(188906,2989,NULL,20337,NULL,'2017-10-27 05:03:49','2017-10-27 05:05:14','Plasmid','Operation','input',567,NULL,NULL,523),(188907,2989,NULL,20337,NULL,'2017-10-27 05:03:49','2017-10-27 05:05:14','Plasmid','Operation','output',568,NULL,NULL,524),(188908,2990,NULL,20337,NULL,'2017-10-27 05:03:49','2017-10-27 05:05:14','Plasmid','Operation','input',569,NULL,NULL,525),(188909,2990,NULL,20339,99738,'2017-10-27 05:03:49','2017-10-27 05:05:14','Sequencing Primer','Operation','input',570,NULL,NULL,526),(188910,2990,NULL,20337,NULL,'2017-10-27 05:03:49','2017-10-27 05:05:15','Plasmid for Sequencing','Operation','output',571,NULL,NULL,527),(188911,2991,NULL,20337,NULL,'2017-10-27 05:03:49','2017-10-27 05:05:15','Plasmid','Operation','input',575,NULL,NULL,530),(188912,2992,NULL,20337,NULL,'2017-10-27 05:03:49','2017-10-27 05:05:15','Plasmid','Operation','input',569,NULL,NULL,525),(188913,2992,NULL,20339,NULL,'2017-10-27 05:03:49','2017-10-27 05:05:15','Sequencing Primer','Operation','input',570,NULL,NULL,526),(188914,2992,NULL,20337,NULL,'2017-10-27 05:03:49','2017-10-27 05:05:15','Plasmid for Sequencing','Operation','output',571,NULL,NULL,527),(188915,2993,NULL,20337,NULL,'2017-10-27 05:03:49','2017-10-27 05:06:22','Plasmid','Operation','input',575,NULL,NULL,530),(188917,2994,NULL,20339,99749,'2017-10-27 05:05:15','2017-10-27 05:07:54','Primer','Operation','input',546,NULL,NULL,502),(188918,2994,NULL,20339,99751,'2017-10-27 05:05:15','2017-10-27 05:09:37','Primer Aliquot','Operation','output',547,NULL,NULL,503),(188919,2994,NULL,20339,99752,'2017-10-27 05:05:15','2017-10-27 05:09:37','Primer Stock','Operation','output',548,NULL,NULL,504),(188920,2995,NULL,20339,99749,'2017-10-27 05:05:15','2017-10-27 05:07:54','Primer','Operation','output',544,NULL,NULL,501),(188921,2995,'yes',NULL,NULL,'2017-10-27 05:05:15','2017-10-27 05:05:15','Urgent?','Operation','input',545,NULL,NULL,NULL),(188944,3003,NULL,20336,99777,'2017-10-27 05:32:40','2017-10-27 05:35:34','Gel','Operation','input',553,NULL,NULL,509),(188945,3003,NULL,20336,99778,'2017-10-27 05:32:40','2017-10-27 05:35:38','Fragment','Operation','output',554,NULL,NULL,510),(188946,3004,NULL,20336,99774,'2017-10-27 05:32:40','2017-10-27 05:35:29','Fragment','Operation','input',579,0,2,534),(188947,3004,NULL,20336,99777,'2017-10-27 05:32:40','2017-10-27 05:35:33','Fragment','Operation','output',580,NULL,NULL,535),(188948,3005,NULL,20336,99772,'2017-10-27 05:32:40','2017-10-27 05:35:25','Fragment','Operation','input',549,0,0,505),(188949,3005,NULL,NULL,99774,'2017-10-27 05:32:40','2017-10-27 05:35:25','Gel','Operation','input',550,0,2,506),(188950,3005,NULL,20336,99774,'2017-10-27 05:32:40','2017-10-27 05:35:28','Fragment','Operation','output',551,0,2,507),(188951,3006,NULL,20338,99736,'2017-10-27 05:32:40','2017-10-27 05:34:52','Forward Primer','Operation','input',540,NULL,NULL,493),(188952,3006,NULL,20339,99738,'2017-10-27 05:32:40','2017-10-27 05:34:52','Reverse Primer','Operation','input',541,NULL,NULL,494),(188953,3006,NULL,20337,99740,'2017-10-27 05:32:40','2017-10-27 05:35:08','Template','Operation','input',542,NULL,NULL,495),(188954,3006,NULL,20336,99772,'2017-10-27 05:32:40','2017-10-27 05:35:12','Fragment','Operation','output',543,0,0,500),(188955,3007,NULL,NULL,99774,'2017-10-27 05:32:40','2017-10-27 05:35:24','Lane','Operation','output',552,0,2,508),(188956,3008,NULL,20337,99799,'2017-10-27 05:32:40','2017-10-27 06:15:38','Overnight','Operation','input',572,NULL,NULL,528),(188957,3008,NULL,20337,99803,'2017-10-27 05:32:40','2017-10-27 06:16:43','Stock','Operation','output',573,NULL,NULL,529),(188958,3008,'Yes',NULL,NULL,'2017-10-27 05:32:40','2017-10-27 05:32:40','Needs Sequencing Results?','Operation','input',574,NULL,NULL,NULL),(188959,3009,NULL,20337,99798,'2017-10-27 05:32:40','2017-10-27 06:00:04','Plasmid','Operation','input',565,NULL,NULL,521),(188960,3009,NULL,20337,99799,'2017-10-27 05:32:40','2017-10-27 06:00:05','Overnight','Operation','output',566,NULL,NULL,522),(188961,3010,NULL,20337,99798,'2017-10-27 05:32:40','2017-10-27 05:59:47','Plate','Operation','input',562,NULL,NULL,518),(188962,3010,NULL,20337,99798,'2017-10-27 05:32:40','2017-10-27 05:59:47','Plate','Operation','output',564,NULL,NULL,520),(188963,3011,NULL,20337,99788,'2017-10-27 05:32:40','2017-10-27 05:47:22','Plasmid','Operation','input',560,NULL,NULL,516),(188964,3011,NULL,20337,99798,'2017-10-27 05:32:41','2017-10-27 05:59:03','Plate','Operation','output',561,NULL,NULL,517),(188965,3012,NULL,20337,99784,'2017-10-27 05:32:41','2017-10-27 05:41:04','Plasmid','Operation','input',557,NULL,NULL,513),(188966,3012,NULL,20341,99747,'2017-10-27 05:32:41','2017-10-27 05:34:38','Comp Cells','Operation','input',558,0,0,514),(188967,3012,NULL,20337,99788,'2017-10-27 05:32:41','2017-10-27 05:46:40','Transformed E Coli','Operation','output',559,NULL,NULL,515),(188968,3013,NULL,20336,99778,'2017-10-27 05:32:41','2017-10-27 05:35:38','Fragment','Operation','input',555,NULL,NULL,511),(188969,3013,NULL,20337,99784,'2017-10-27 05:32:41','2017-10-27 05:41:04','Assembled Plasmid','Operation','output',556,NULL,NULL,512),(188970,3014,NULL,20337,99799,'2017-10-27 05:32:41','2017-10-27 06:00:32','Plasmid','Operation','input',567,NULL,NULL,523),(188971,3014,NULL,20337,99800,'2017-10-27 05:32:41','2017-10-27 06:00:33','Plasmid','Operation','output',568,NULL,NULL,524),(188972,3015,NULL,20337,99800,'2017-10-27 05:32:41','2017-10-27 06:00:50','Plasmid','Operation','input',569,NULL,NULL,525),(188973,3015,NULL,20339,99738,'2017-10-27 05:32:41','2017-10-27 05:34:39','Sequencing Primer','Operation','input',570,NULL,NULL,526),(188974,3015,NULL,20337,99801,'2017-10-27 05:32:41','2017-10-27 06:00:56','Plasmid for Sequencing','Operation','output',571,0,0,527),(188975,3016,NULL,20337,99801,'2017-10-27 05:32:41','2017-10-27 06:11:00','Plasmid','Operation','input',575,0,1,530),(188976,3017,NULL,20337,99800,'2017-10-27 05:32:41','2017-10-27 06:00:50','Plasmid','Operation','input',569,NULL,NULL,525),(188977,3017,NULL,20339,99775,'2017-10-27 05:32:41','2017-10-27 06:00:50','Sequencing Primer','Operation','input',570,NULL,NULL,526),(188978,3017,NULL,20337,99801,'2017-10-27 05:32:41','2017-10-27 06:00:56','Plasmid for Sequencing','Operation','output',571,0,1,527),(188979,3018,NULL,20337,99801,'2017-10-27 05:32:41','2017-10-27 06:08:58','Plasmid','Operation','input',575,0,0,530),(188980,3019,NULL,20339,99773,'2017-10-27 05:32:41','2017-10-27 05:35:12','Primer','Operation','input',546,NULL,NULL,502),(188981,3019,NULL,20339,99775,'2017-10-27 05:32:41','2017-10-27 05:35:24','Primer Aliquot','Operation','output',547,NULL,NULL,503),(188982,3019,NULL,20339,99776,'2017-10-27 05:32:41','2017-10-27 05:35:24','Primer Stock','Operation','output',548,NULL,NULL,504),(188983,3020,NULL,20339,99773,'2017-10-27 05:32:41','2017-10-27 05:35:12','Primer','Operation','output',544,NULL,NULL,501),(188984,3020,'yes',NULL,NULL,'2017-10-27 05:32:41','2017-10-27 05:32:41','Urgent?','Operation','input',545,NULL,NULL,NULL),(188985,3021,NULL,NULL,99783,'2017-10-27 05:39:33','2017-10-27 05:40:23','Batch','Operation','output',578,NULL,NULL,533),(188992,3024,NULL,20336,NULL,'2017-10-27 05:48:23','2017-10-27 05:48:23','Gel','Operation','input',553,NULL,NULL,509),(188993,3024,NULL,20336,NULL,'2017-10-27 05:48:23','2017-10-27 05:48:23','Fragment','Operation','output',554,NULL,NULL,510),(188994,3025,NULL,20336,NULL,'2017-10-27 05:48:23','2017-10-27 05:48:23','Fragment','Operation','input',579,0,2,534),(188995,3025,NULL,20336,NULL,'2017-10-27 05:48:23','2017-10-27 05:48:23','Fragment','Operation','output',580,NULL,NULL,535),(188996,3026,NULL,20336,NULL,'2017-10-27 05:48:23','2017-10-27 05:48:23','Fragment','Operation','input',549,0,0,505),(188997,3026,NULL,NULL,NULL,'2017-10-27 05:48:23','2017-10-27 05:48:23','Gel','Operation','input',550,0,2,506),(188998,3026,NULL,20336,NULL,'2017-10-27 05:48:23','2017-10-27 05:48:23','Fragment','Operation','output',551,0,2,507),(188999,3027,NULL,20338,NULL,'2017-10-27 05:48:23','2017-10-27 05:48:23','Forward Primer','Operation','input',540,NULL,NULL,493),(189000,3027,NULL,20339,NULL,'2017-10-27 05:48:23','2017-10-27 05:48:23','Reverse Primer','Operation','input',541,NULL,NULL,494),(189001,3027,NULL,20337,NULL,'2017-10-27 05:48:23','2017-10-27 05:48:23','Template','Operation','input',542,NULL,NULL,495),(189002,3027,NULL,20336,NULL,'2017-10-27 05:48:23','2017-10-27 05:48:23','Fragment','Operation','output',543,0,0,500),(189003,3028,NULL,NULL,NULL,'2017-10-27 05:48:23','2017-10-27 05:48:23','Lane','Operation','output',552,0,2,508),(189004,3029,NULL,20337,NULL,'2017-10-27 05:48:23','2017-10-27 05:48:23','Overnight','Operation','input',572,NULL,NULL,528),(189005,3029,NULL,20337,NULL,'2017-10-27 05:48:23','2017-10-27 05:48:23','Stock','Operation','output',573,NULL,NULL,529),(189006,3029,'Yes',NULL,NULL,'2017-10-27 05:48:23','2017-10-27 05:48:23','Needs Sequencing Results?','Operation','input',574,NULL,NULL,NULL),(189007,3030,NULL,20337,NULL,'2017-10-27 05:48:23','2017-10-27 05:48:23','Plasmid','Operation','input',565,NULL,NULL,521),(189008,3030,NULL,20337,NULL,'2017-10-27 05:48:23','2017-10-27 05:48:23','Overnight','Operation','output',566,NULL,NULL,522),(189009,3031,NULL,20337,NULL,'2017-10-27 05:48:23','2017-10-27 05:48:23','Plate','Operation','input',562,NULL,NULL,518),(189010,3031,NULL,20337,NULL,'2017-10-27 05:48:23','2017-10-27 05:48:23','Plate','Operation','output',564,NULL,NULL,520),(189011,3032,NULL,20337,NULL,'2017-10-27 05:48:23','2017-10-27 05:48:23','Plasmid','Operation','input',560,NULL,NULL,516),(189012,3032,NULL,20337,NULL,'2017-10-27 05:48:23','2017-10-27 05:48:23','Plate','Operation','output',561,NULL,NULL,517),(189013,3033,NULL,20337,NULL,'2017-10-27 05:48:23','2017-10-27 05:48:23','Plasmid','Operation','input',557,NULL,NULL,513),(189014,3033,NULL,20341,NULL,'2017-10-27 05:48:23','2017-10-27 05:48:23','Comp Cells','Operation','input',558,0,0,514),(189015,3033,NULL,20337,NULL,'2017-10-27 05:48:23','2017-10-27 05:48:23','Transformed E Coli','Operation','output',559,NULL,NULL,515),(189016,3034,NULL,20336,NULL,'2017-10-27 05:48:23','2017-10-27 05:48:23','Fragment','Operation','input',555,NULL,NULL,511),(189017,3034,NULL,20337,NULL,'2017-10-27 05:48:23','2017-10-27 05:48:23','Assembled Plasmid','Operation','output',556,NULL,NULL,512),(189018,3035,NULL,20337,NULL,'2017-10-27 05:48:23','2017-10-27 05:48:23','Plasmid','Operation','input',567,NULL,NULL,523),(189019,3035,NULL,20337,NULL,'2017-10-27 05:48:23','2017-10-27 05:48:23','Plasmid','Operation','output',568,NULL,NULL,524),(189020,3036,NULL,20337,NULL,'2017-10-27 05:48:23','2017-10-27 05:48:23','Plasmid','Operation','input',569,NULL,NULL,525),(189021,3036,NULL,20339,NULL,'2017-10-27 05:48:24','2017-10-27 05:48:24','Sequencing Primer','Operation','input',570,NULL,NULL,526),(189022,3036,NULL,20337,NULL,'2017-10-27 05:48:24','2017-10-27 05:48:24','Plasmid for Sequencing','Operation','output',571,NULL,NULL,527),(189023,3037,NULL,20337,NULL,'2017-10-27 05:48:24','2017-10-27 05:48:24','Plasmid','Operation','input',575,NULL,NULL,530),(189024,3038,NULL,20337,NULL,'2017-10-27 05:48:24','2017-10-27 05:48:24','Plasmid','Operation','input',569,NULL,NULL,525),(189025,3038,NULL,20339,NULL,'2017-10-27 05:48:24','2017-10-27 05:48:24','Sequencing Primer','Operation','input',570,NULL,NULL,526),(189026,3038,NULL,20337,NULL,'2017-10-27 05:48:24','2017-10-27 05:48:24','Plasmid for Sequencing','Operation','output',571,NULL,NULL,527),(189027,3039,NULL,20337,NULL,'2017-10-27 05:48:24','2017-10-27 05:48:24','Plasmid','Operation','input',575,NULL,NULL,530),(189028,3040,NULL,20339,NULL,'2017-10-27 05:48:24','2017-10-27 05:48:24','Primer','Operation','input',546,NULL,NULL,502),(189029,3040,NULL,20339,NULL,'2017-10-27 05:48:24','2017-10-27 05:48:24','Primer Aliquot','Operation','output',547,NULL,NULL,503),(189030,3040,NULL,20339,NULL,'2017-10-27 05:48:24','2017-10-27 05:48:24','Primer Stock','Operation','output',548,NULL,NULL,504),(189031,3041,NULL,20339,NULL,'2017-10-27 05:48:24','2017-10-27 05:48:24','Primer','Operation','output',544,NULL,NULL,501),(189032,3041,'yes',NULL,NULL,'2017-10-27 05:48:24','2017-10-27 05:48:24','Urgent?','Operation','input',545,NULL,NULL,NULL),(189037,3044,NULL,NULL,99793,'2017-10-27 05:53:16','2017-10-27 05:53:36','Batch','Operation','output',578,NULL,NULL,533),(189042,3047,NULL,20336,NULL,'2017-10-27 06:05:42','2017-10-27 06:05:42','Gel','Operation','input',553,NULL,NULL,509),(189043,3047,NULL,20336,NULL,'2017-10-27 06:05:42','2017-10-27 06:05:42','Fragment','Operation','output',554,NULL,NULL,510),(189044,3048,NULL,20336,NULL,'2017-10-27 06:05:42','2017-10-27 06:05:42','Fragment','Operation','input',579,0,2,534),(189045,3048,NULL,20336,NULL,'2017-10-27 06:05:42','2017-10-27 06:05:42','Fragment','Operation','output',580,NULL,NULL,535),(189046,3049,NULL,20336,NULL,'2017-10-27 06:05:42','2017-10-27 06:05:42','Fragment','Operation','input',549,0,0,505),(189047,3049,NULL,NULL,NULL,'2017-10-27 06:05:42','2017-10-27 06:05:42','Gel','Operation','input',550,0,2,506),(189048,3049,NULL,20336,NULL,'2017-10-27 06:05:42','2017-10-27 06:05:42','Fragment','Operation','output',551,0,2,507),(189049,3050,NULL,20338,NULL,'2017-10-27 06:05:42','2017-10-27 06:05:42','Forward Primer','Operation','input',540,NULL,NULL,493),(189050,3050,NULL,20339,NULL,'2017-10-27 06:05:42','2017-10-27 06:05:42','Reverse Primer','Operation','input',541,NULL,NULL,494),(189051,3050,NULL,20337,NULL,'2017-10-27 06:05:42','2017-10-27 06:05:42','Template','Operation','input',542,NULL,NULL,495),(189052,3050,NULL,20336,NULL,'2017-10-27 06:05:42','2017-10-27 06:05:42','Fragment','Operation','output',543,0,0,500),(189053,3051,NULL,NULL,NULL,'2017-10-27 06:05:42','2017-10-27 06:05:42','Lane','Operation','output',552,0,2,508),(189054,3052,NULL,20337,NULL,'2017-10-27 06:05:42','2017-10-27 06:05:42','Overnight','Operation','input',572,NULL,NULL,528),(189055,3052,NULL,20337,NULL,'2017-10-27 06:05:42','2017-10-27 06:05:42','Stock','Operation','output',573,NULL,NULL,529),(189056,3052,'Yes',NULL,NULL,'2017-10-27 06:05:42','2017-10-27 06:05:42','Needs Sequencing Results?','Operation','input',574,NULL,NULL,NULL),(189057,3053,NULL,20337,NULL,'2017-10-27 06:05:42','2017-10-27 06:05:42','Plasmid','Operation','input',565,NULL,NULL,521),(189058,3053,NULL,20337,NULL,'2017-10-27 06:05:42','2017-10-27 06:05:42','Overnight','Operation','output',566,NULL,NULL,522),(189059,3054,NULL,20337,NULL,'2017-10-27 06:05:42','2017-10-27 06:05:42','Plate','Operation','input',562,NULL,NULL,518),(189060,3054,NULL,20337,NULL,'2017-10-27 06:05:42','2017-10-27 06:05:42','Plate','Operation','output',564,NULL,NULL,520),(189061,3055,NULL,20337,NULL,'2017-10-27 06:05:42','2017-10-27 06:05:42','Plasmid','Operation','input',560,NULL,NULL,516),(189062,3055,NULL,20337,NULL,'2017-10-27 06:05:42','2017-10-27 06:05:42','Plate','Operation','output',561,NULL,NULL,517),(189063,3056,NULL,20337,NULL,'2017-10-27 06:05:42','2017-10-27 06:05:42','Plasmid','Operation','input',557,NULL,NULL,513),(189064,3056,NULL,20341,NULL,'2017-10-27 06:05:42','2017-10-27 06:05:42','Comp Cells','Operation','input',558,0,0,514),(189065,3056,NULL,20337,NULL,'2017-10-27 06:05:42','2017-10-27 06:05:42','Transformed E Coli','Operation','output',559,NULL,NULL,515),(189066,3057,NULL,20336,NULL,'2017-10-27 06:05:42','2017-10-27 06:05:42','Fragment','Operation','input',555,NULL,NULL,511),(189067,3057,NULL,20337,NULL,'2017-10-27 06:05:42','2017-10-27 06:05:42','Assembled Plasmid','Operation','output',556,NULL,NULL,512),(189068,3058,NULL,20337,NULL,'2017-10-27 06:05:42','2017-10-27 06:05:42','Plasmid','Operation','input',567,NULL,NULL,523),(189069,3058,NULL,20337,NULL,'2017-10-27 06:05:42','2017-10-27 06:05:42','Plasmid','Operation','output',568,NULL,NULL,524),(189070,3059,NULL,20337,NULL,'2017-10-27 06:05:42','2017-10-27 06:05:42','Plasmid','Operation','input',569,NULL,NULL,525),(189071,3059,NULL,20339,NULL,'2017-10-27 06:05:42','2017-10-27 06:05:42','Sequencing Primer','Operation','input',570,NULL,NULL,526),(189072,3059,NULL,20337,NULL,'2017-10-27 06:05:42','2017-10-27 06:05:42','Plasmid for Sequencing','Operation','output',571,0,0,527),(189073,3060,NULL,20337,NULL,'2017-10-27 06:05:42','2017-10-27 06:05:42','Plasmid','Operation','input',575,NULL,NULL,530),(189074,3061,NULL,20337,NULL,'2017-10-27 06:05:42','2017-10-27 06:05:42','Plasmid','Operation','input',569,NULL,NULL,525),(189075,3061,NULL,20339,NULL,'2017-10-27 06:05:42','2017-10-27 06:05:42','Sequencing Primer','Operation','input',570,NULL,NULL,526),(189076,3061,NULL,20337,NULL,'2017-10-27 06:05:42','2017-10-27 06:05:42','Plasmid for Sequencing','Operation','output',571,0,1,527),(189077,3062,NULL,20337,NULL,'2017-10-27 06:05:42','2017-10-27 06:05:42','Plasmid','Operation','input',575,NULL,NULL,530),(189078,3063,NULL,20339,NULL,'2017-10-27 06:05:42','2017-10-27 06:05:42','Primer','Operation','input',546,NULL,NULL,502),(189079,3063,NULL,20339,NULL,'2017-10-27 06:05:42','2017-10-27 06:05:42','Primer Aliquot','Operation','output',547,NULL,NULL,503),(189080,3063,NULL,20339,NULL,'2017-10-27 06:05:42','2017-10-27 06:05:42','Primer Stock','Operation','output',548,NULL,NULL,504),(189081,3064,NULL,20339,NULL,'2017-10-27 06:05:42','2017-10-27 06:05:42','Primer','Operation','output',544,NULL,NULL,501),(189082,3064,'yes',NULL,NULL,'2017-10-27 06:05:42','2017-10-27 06:05:42','Urgent?','Operation','input',545,NULL,NULL,NULL),(189087,3068,NULL,20337,99800,'2017-10-27 06:13:54','2017-10-27 06:13:54','Stock','Operation','input',576,NULL,NULL,531),(189088,3068,NULL,20337,99798,'2017-10-27 06:13:54','2017-10-27 06:13:55','Plate','Operation','input',577,NULL,NULL,532);
/*!40000 ALTER TABLE `field_values` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `groups`
--

DROP TABLE IF EXISTS `groups`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `groups` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL,
  `description` varchar(255) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=236 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `groups`
--

LOCK TABLES `groups` WRITE;
/*!40000 ALTER TABLE `groups` DISABLE KEYS */;
INSERT INTO `groups` VALUES (1,'admin','These users can use administrative functions (make users, etc)','2013-11-15 21:37:36','2013-11-15 21:37:36'),(235,'technicians','People who run jobs','2017-10-02 17:50:56','2017-10-02 17:50:56');
/*!40000 ALTER TABLE `groups` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `invoices`
--

DROP TABLE IF EXISTS `invoices`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `invoices` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `year` int(11) DEFAULT NULL,
  `month` int(11) DEFAULT NULL,
  `budget_id` int(11) DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  `status` varchar(255) DEFAULT NULL,
  `notes` text,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `invoices`
--

LOCK TABLES `invoices` WRITE;
/*!40000 ALTER TABLE `invoices` DISABLE KEYS */;
/*!40000 ALTER TABLE `invoices` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `items`
--

DROP TABLE IF EXISTS `items`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `items` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `location` varchar(255) DEFAULT NULL,
  `quantity` int(11) DEFAULT NULL,
  `object_type_id` int(11) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  `inuse` int(11) DEFAULT '0',
  `sample_id` int(11) DEFAULT NULL,
  `data` mediumtext,
  `locator_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `index_items_on_object_type_id` (`object_type_id`)
) ENGINE=InnoDB AUTO_INCREMENT=99804 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `items`
--

LOCK TABLES `items` WRITE;
/*!40000 ALTER TABLE `items` DISABLE KEYS */;
INSERT INTO `items` VALUES (99730,'deleted',-1,602,'2017-10-02 16:40:20','2017-10-02 17:43:01',-1,20337,NULL,NULL),(99731,'deleted',-1,602,'2017-10-02 16:42:05','2017-10-02 17:43:05',-1,20337,NULL,NULL),(99732,'deleted',-1,602,'2017-10-02 16:43:19','2017-10-02 17:43:08',-1,20337,NULL,NULL),(99733,'M20.0.0.0',1,602,'2017-10-02 17:42:54','2017-10-02 17:42:54',0,20337,NULL,32350),(99734,'deleted',-1,608,'2017-10-02 17:51:12','2017-10-02 17:51:16',-1,20338,NULL,NULL),(99735,'deleted',-1,608,'2017-10-02 17:51:12','2017-10-02 17:51:16',-1,20339,NULL,NULL),(99736,'M20.0.0.1',1,601,'2017-10-02 17:51:15','2017-10-02 17:51:15',0,20338,NULL,32351),(99737,'M20.0.0.2',1,609,'2017-10-02 17:51:15','2017-10-02 17:51:15',0,20338,NULL,32352),(99738,'M20.0.0.3',1,601,'2017-10-02 17:51:15','2017-10-02 17:51:15',0,20339,NULL,32353),(99739,'M20.0.0.4',1,609,'2017-10-02 17:51:15','2017-10-02 17:51:15',0,20339,NULL,32354),(99740,'M20.0.0.5',1,605,'2017-10-02 17:59:39','2017-10-02 17:59:39',0,20337,NULL,32355),(99741,'M20.0.0.6',1,610,'2017-10-02 18:16:52','2017-10-02 18:16:52',0,20340,NULL,32356),(99742,'TC1',1,607,'2017-10-02 18:17:39','2017-10-02 18:17:46',0,NULL,'{\"matrix\":[[20336,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]]}',NULL),(99743,'TC1',1,607,'2017-10-02 18:18:25','2017-10-02 18:18:29',0,NULL,'{\"matrix\":[[20336,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]]}',NULL),(99744,'deleted',-1,607,'2017-10-27 04:44:43','2017-10-27 04:44:43',-1,NULL,'{\"matrix\":[[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]]}',NULL),(99745,'Bench',1,614,'2017-10-27 04:45:01','2017-10-27 04:45:01',0,NULL,'{\"matrix\":[[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]]}',NULL),(99746,'deleted',-1,614,'2017-10-27 04:48:56','2017-10-27 04:48:56',-1,NULL,'{\"matrix\":[[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]]}',NULL),(99747,'Bench',1,614,'2017-10-27 04:49:22','2017-10-27 05:46:39',0,NULL,'{\"matrix\":[[20341,20341,20341,20341,20341,20341,20341,20341,20341,20341],[20341,20341,20341,20341,20341,20341,20341,20341,20341,20341],[20341,20341,20341,20341,20341,20341,20341,20341,20341,20341],[20341,20341,20341,20341,20341,20341,20341,20341,20341,20341],[20341,20341,20341,20341,20341,20341,20341,20341,20341,20341],[20341,20341,20341,20341,20341,20341,20341,20341,20341,20341],[20341,20341,20341,20341,20341,20341,20341,20341,20341,20341],[20341,20341,20341,20341,20341,20341,20341,20341,20341,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]]}',NULL),(99748,'M20.0.0.7',1,603,'2017-10-27 05:04:30','2017-10-27 05:04:30',0,20342,NULL,32357),(99749,'deleted',-1,608,'2017-10-27 05:07:54','2017-10-27 05:09:37',-1,20339,NULL,NULL),(99750,'TC1',1,607,'2017-10-27 05:09:36','2017-10-27 05:09:36',0,NULL,'{\"matrix\":[[20336,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]]}',NULL),(99751,'M20.0.0.8',1,601,'2017-10-27 05:09:36','2017-10-27 05:09:37',0,20339,NULL,32358),(99752,'M20.0.0.9',1,609,'2017-10-27 05:09:37','2017-10-27 05:09:37',0,20339,NULL,32359),(99753,'Bench',1,611,'2017-10-27 05:09:44','2017-10-27 05:09:49',0,NULL,'{\"matrix\":[[-1,-1,20336,-1,-1,-1,-1,-1,-1,-1,-1,-1]]}',NULL),(99754,'Bench',1,621,'2017-10-27 05:14:54','2017-10-27 05:31:09',0,20344,NULL,NULL),(99755,'Bench',1,622,'2017-10-27 05:14:57','2017-10-27 05:31:13',0,20344,NULL,NULL),(99756,'Bench',1,622,'2017-10-27 05:15:01','2017-10-27 05:31:21',0,20343,NULL,NULL),(99757,'Bench',1,621,'2017-10-27 05:15:03','2017-10-27 05:31:17',0,20343,NULL,NULL),(99758,'Bench',1,623,'2017-10-27 05:18:18','2017-10-27 05:21:21',0,20345,NULL,NULL),(99771,NULL,1,608,'2017-10-27 05:33:27','2017-10-27 05:33:27',0,20339,NULL,NULL),(99772,'deleted',-1,607,'2017-10-27 05:35:12','2017-10-27 05:35:29',-1,NULL,'{\"matrix\":[[20336,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]]}',NULL),(99773,'deleted',-1,608,'2017-10-27 05:35:12','2017-10-27 05:35:25',-1,20339,NULL,NULL),(99774,'deleted',-1,611,'2017-10-27 05:35:24','2017-10-27 05:35:33',-1,NULL,'{\"matrix\":[[20343,20344,20336,-1,-1,-1],[20343,20344,-1,-1,-1,-1]]}',NULL),(99775,'M20.0.0.10',1,601,'2017-10-27 05:35:24','2017-10-27 05:35:24',0,20339,NULL,32360),(99776,'M20.0.0.11',1,609,'2017-10-27 05:35:24','2017-10-27 05:35:24',0,20339,NULL,32361),(99777,'deleted',-1,612,'2017-10-27 05:35:33','2017-10-27 05:35:38',-1,20336,NULL,NULL),(99778,'M20.0.0.12',1,603,'2017-10-27 05:35:38','2017-10-27 05:35:38',0,20336,NULL,32362),(99779,'Bench',1,613,'2017-10-27 05:35:43','2017-10-27 05:35:43',0,20337,NULL,NULL),(99780,'deleted',-1,607,'2017-10-27 05:39:43','2017-10-27 05:39:43',-1,NULL,'{\"matrix\":[[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]]}',NULL),(99781,'Bench',1,624,'2017-10-27 05:39:55','2017-10-27 05:39:55',0,NULL,'{\"matrix\":[[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]]}',NULL),(99782,'deleted',-1,624,'2017-10-27 05:40:16','2017-10-27 05:40:16',-1,NULL,'{\"matrix\":[[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]]}',NULL),(99783,'Bench',1,624,'2017-10-27 05:40:23','2017-10-27 05:41:04',0,NULL,'{\"matrix\":[[20346,20346,20346,20346,20346,20346,20346,20346,20346,20346],[20346,20346,20346,20346,20346,20346,20346,20346,20346,20346],[20346,20346,20346,20346,20346,20346,20346,20346,20346,20346],[20346,20346,20346,20346,20346,20346,20346,20346,20346,20346],[20346,20346,20346,20346,20346,20346,20346,20346,20346,20346],[20346,20346,20346,20346,20346,20346,20346,20346,20346,20346],[20346,20346,20346,20346,20346,20346,20346,20346,20346,20346],[20346,20346,20346,20346,20346,20346,20346,20346,20346,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]]}',NULL),(99784,'Bench',1,613,'2017-10-27 05:41:04','2017-10-27 05:41:04',0,20337,NULL,NULL),(99788,'deleted',-1,615,'2017-10-27 05:46:40','2017-10-27 05:59:03',-1,20337,NULL,NULL),(99789,'Bench',1,616,'2017-10-27 05:47:22','2017-10-27 05:47:22',0,20337,NULL,NULL),(99792,'deleted',-1,607,'2017-10-27 05:53:28','2017-10-27 05:53:28',-1,NULL,'{\"matrix\":[[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]]}',NULL),(99793,'Bench',1,625,'2017-10-27 05:53:36','2017-10-27 05:54:18',0,NULL,'{\"matrix}',NULL),(99798,'Bench',1,617,'2017-10-27 05:59:03','2017-10-27 05:59:47',0,20337,NULL,NULL),(99799,'deleted',-1,618,'2017-10-27 06:00:05','2017-10-27 06:16:43',-1,20337,NULL,NULL),(99800,'M20.0.0.13',1,602,'2017-10-27 06:00:33','2017-10-27 06:00:33',0,20337,NULL,32363),(99801,'Bench',-1,619,'2017-10-27 06:00:56','2017-10-27 06:06:47',-1,NULL,'{\"matrix\":[[20337,20337,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]]}',NULL),(99803,'M80.0.0.0',1,620,'2017-10-27 06:16:43','2017-10-27 06:16:43',0,20337,NULL,32364);
/*!40000 ALTER TABLE `items` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `job_associations`
--

DROP TABLE IF EXISTS `job_associations`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `job_associations` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `job_id` int(11) DEFAULT NULL,
  `operation_id` int(11) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=599 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `job_associations`
--

LOCK TABLES `job_associations` WRITE;
/*!40000 ALTER TABLE `job_associations` DISABLE KEYS */;
INSERT INTO `job_associations` VALUES (515,42573,2955,'2017-10-02 17:51:11','2017-10-02 17:51:11'),(516,42573,2957,'2017-10-02 17:51:11','2017-10-02 17:51:11'),(517,42575,2954,'2017-10-02 17:51:15','2017-10-02 17:51:15'),(518,42575,2956,'2017-10-02 17:51:15','2017-10-02 17:51:15'),(519,42577,2953,'2017-10-02 17:51:18','2017-10-02 17:51:18'),(520,42579,2953,'2017-10-02 17:52:12','2017-10-02 17:52:12'),(521,42581,2953,'2017-10-02 17:52:46','2017-10-02 17:52:46'),(522,42583,2958,'2017-10-02 17:54:38','2017-10-02 17:54:38'),(523,42585,2953,'2017-10-02 17:55:11','2017-10-02 17:55:11'),(524,42587,2958,'2017-10-02 17:59:36','2017-10-02 17:59:36'),(525,42589,2958,'2017-10-02 18:00:11','2017-10-02 18:00:11'),(526,42591,2953,'2017-10-02 18:02:12','2017-10-02 18:02:12'),(527,42591,2958,'2017-10-02 18:02:12','2017-10-02 18:02:12'),(528,42593,2958,'2017-10-02 18:03:04','2017-10-02 18:03:04'),(529,42595,2953,'2017-10-02 18:16:05','2017-10-02 18:16:05'),(530,42595,2958,'2017-10-02 18:16:05','2017-10-02 18:16:05'),(531,42597,2953,'2017-10-02 18:17:11','2017-10-02 18:17:11'),(532,42599,2958,'2017-10-02 18:17:15','2017-10-02 18:17:15'),(533,42601,2953,'2017-10-02 18:18:17','2017-10-02 18:18:17'),(534,42603,2959,'2017-10-27 04:44:06','2017-10-27 04:44:06'),(535,42605,2959,'2017-10-27 04:48:54','2017-10-27 04:48:54'),(536,42607,2981,'2017-10-27 05:07:54','2017-10-27 05:07:54'),(537,42609,2995,'2017-10-27 05:07:54','2017-10-27 05:07:54'),(538,42611,2981,'2017-10-27 05:09:32','2017-10-27 05:09:32'),(539,42613,2994,'2017-10-27 05:09:36','2017-10-27 05:09:36'),(540,42615,2982,'2017-10-27 05:09:44','2017-10-27 05:09:44'),(541,42617,2980,'2017-10-27 05:09:48','2017-10-27 05:09:48'),(542,42619,2980,'2017-10-27 05:15:23','2017-10-27 05:15:23'),(543,42621,2980,'2017-10-27 05:18:27','2017-10-27 05:18:27'),(544,42623,2980,'2017-10-27 05:21:29','2017-10-27 05:21:29'),(545,42625,2980,'2017-10-27 05:25:17','2017-10-27 05:25:17'),(552,42639,3006,'2017-10-27 05:35:08','2017-10-27 05:35:08'),(553,42641,3020,'2017-10-27 05:35:12','2017-10-27 05:35:12'),(554,42643,3007,'2017-10-27 05:35:24','2017-10-27 05:35:24'),(555,42645,3019,'2017-10-27 05:35:24','2017-10-27 05:35:24'),(556,42647,3005,'2017-10-27 05:35:28','2017-10-27 05:35:28'),(557,42649,3004,'2017-10-27 05:35:33','2017-10-27 05:35:33'),(558,42651,3003,'2017-10-27 05:35:37','2017-10-27 05:35:37'),(559,42653,3013,'2017-10-27 05:35:43','2017-10-27 05:35:43'),(560,42655,3021,'2017-10-27 05:39:42','2017-10-27 05:39:42'),(561,42657,3021,'2017-10-27 05:40:15','2017-10-27 05:40:15'),(562,42659,3013,'2017-10-27 05:41:04','2017-10-27 05:41:04'),(563,42661,3012,'2017-10-27 05:42:16','2017-10-27 05:42:16'),(564,42663,3012,'2017-10-27 05:43:42','2017-10-27 05:43:42'),(566,42667,3012,'2017-10-27 05:45:44','2017-10-27 05:45:44'),(567,42669,3012,'2017-10-27 05:46:39','2017-10-27 05:46:39'),(568,42671,3009,'2017-10-27 05:47:22','2017-10-27 05:47:22'),(569,42673,3010,'2017-10-27 05:47:22','2017-10-27 05:47:22'),(570,42675,3011,'2017-10-27 05:47:22','2017-10-27 05:47:22'),(571,42677,3014,'2017-10-27 05:47:22','2017-10-27 05:47:22'),(572,42679,3015,'2017-10-27 05:47:22','2017-10-27 05:47:22'),(573,42679,3017,'2017-10-27 05:47:22','2017-10-27 05:47:22'),(574,42681,3016,'2017-10-27 05:47:23','2017-10-27 05:47:23'),(575,42681,3018,'2017-10-27 05:47:23','2017-10-27 05:47:23'),(577,42685,3044,'2017-10-27 05:53:26','2017-10-27 05:53:26'),(580,42691,3011,'2017-10-27 05:59:01','2017-10-27 05:59:01'),(581,42693,3010,'2017-10-27 05:59:45','2017-10-27 05:59:45'),(582,42695,3009,'2017-10-27 06:00:03','2017-10-27 06:00:03'),(583,42697,3014,'2017-10-27 06:00:30','2017-10-27 06:00:30'),(584,42699,3015,'2017-10-27 06:00:41','2017-10-27 06:00:41'),(585,42699,3017,'2017-10-27 06:00:41','2017-10-27 06:00:41'),(586,42701,3016,'2017-10-27 06:01:31','2017-10-27 06:01:31'),(587,42701,3018,'2017-10-27 06:01:31','2017-10-27 06:01:31'),(588,42703,3016,'2017-10-27 06:05:22','2017-10-27 06:05:22'),(589,42703,3018,'2017-10-27 06:05:22','2017-10-27 06:05:22'),(590,42705,3016,'2017-10-27 06:07:14','2017-10-27 06:07:14'),(591,42705,3018,'2017-10-27 06:07:14','2017-10-27 06:07:14'),(593,42709,3016,'2017-10-27 06:10:11','2017-10-27 06:10:11'),(594,42709,3018,'2017-10-27 06:10:11','2017-10-27 06:10:11'),(595,42711,3016,'2017-10-27 06:11:24','2017-10-27 06:11:24'),(596,42711,3018,'2017-10-27 06:11:24','2017-10-27 06:11:24'),(597,42713,3008,'2017-10-27 06:16:43','2017-10-27 06:16:43'),(598,42715,3068,'2017-10-27 06:17:13','2017-10-27 06:17:13');
/*!40000 ALTER TABLE `job_associations` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `jobs`
--

DROP TABLE IF EXISTS `jobs`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `jobs` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` varchar(255) DEFAULT NULL,
  `arguments` text,
  `state` longtext,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  `path` varchar(255) DEFAULT NULL,
  `pc` int(11) DEFAULT NULL,
  `group_id` int(11) DEFAULT NULL,
  `submitted_by` int(11) DEFAULT NULL,
  `desired_start_time` datetime DEFAULT NULL,
  `latest_start_time` datetime DEFAULT NULL,
  `metacol_id` int(11) DEFAULT NULL,
  `successor_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=42716 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `jobs`
--

LOCK TABLES `jobs` WRITE;
/*!40000 ALTER TABLE `jobs` DISABLE KEYS */;
INSERT INTO `jobs` VALUES (42572,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":184},\"time\":\"2017-10-02T10:51:11-07:00\"}]','2017-10-02 17:51:11','2017-10-02 17:51:11','operation.rb',-1,235,1,'2017-10-02 17:51:11','2017-10-02 18:51:11',NULL,NULL),(42573,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":184},\"time\":\"2017-10-02T10:51:11-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Debug slide (3 args)\"},{\"note\":\"String: wha\"},{\"note\":\"String: bro\"},{\"note\":\"NilClass: \"}]},{\"operation\":\"next\",\"time\":\"2017-10-02T10:51:12-07:00\",\"inputs\":{\"timestamp\":1506966672000}},{\"operation\":\"display\",\"content\":[{\"note\":\"yes\"},{\"note\":\"String\"}]},{\"operation\":\"next\",\"time\":\"2017-10-02T10:51:12-07:00\",\"inputs\":{\"timestamp\":1506966672000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Prepare to order primer\"},{\"check\":\"Go to the <a href=\'https://www.idtdna.com/site/account\' target=\'_blank\'>IDT website</a>, log in with the lab account. (Username: klavins_lab, password is the lab general password).\"},{\"warning\":\"Ensure that you are logged in to this exact username and password!\"}]},{\"operation\":\"next\",\"time\":\"2017-10-02T10:51:12-07:00\",\"inputs\":{\"timestamp\":1506966672000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Create an IDT DNA oligos order\"},{\"check\":\"Click Custom DNA Oligos, click Bulk Input. Copy paste the following table and then click the Update button.\"},{\"table\":[[\"20338 my first forward primer\",\"ACCTTACGGAGCTACGACTACGCACGGCTAGGAGCTACGACTGC\"],[\"20339 my first reverse primer\",\"ACATTGAGGGAGTCATCGACGAGCAGCATTCGAGCGACTACGACATC\"]]},{\"check\":\"Click Add to Order, review the shopping cart to double check that you entered correctly. There should be 2 primers in the cart.\"},{\"check\":\"Click Checkout, then click Continue.\"},{\"check\":\"Enter the payment information, click the oligo card tab, select the Card1 in Choose Payment and then click Submit Order.\"},{\"check\":\"Go back to the main page, let it sit for 5-10 minutes, return and refresh, and find the order number for the order you just placed.\"},{\"input\":{\"var\":\"order_number\",\"label\":\"Enter the IDT order number below\",\"default\":100,\"type\":\"text\"}}]},{\"operation\":\"next\",\"time\":\"2017-10-02T10:51:12-07:00\",\"inputs\":{\"order_number\":100,\"timestamp\":1506966672000}},{\"operation\":\"complete\",\"rval\":{}}]','2017-10-02 17:51:11','2017-10-02 17:51:12','operation.rb',-2,235,1,'2017-10-02 17:51:11','2017-10-02 18:51:11',NULL,NULL),(42574,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":185},\"time\":\"2017-10-02T10:51:15-07:00\"}]','2017-10-02 17:51:15','2017-10-02 17:51:15','operation.rb',-1,235,1,'2017-10-02 17:51:15','2017-10-02 18:51:15',NULL,NULL),(42575,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":185},\"time\":\"2017-10-02T10:51:15-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Go the EE office to pick up primers\"},{\"note\":\"Abort this protocol if no primer has shown up. It will automatically rescheduled.\"}]},{\"operation\":\"next\",\"time\":\"2017-10-02T10:51:15-07:00\",\"inputs\":{\"timestamp\":1506966675000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Quick spin down all the primer tubes\"},{\"note\":\"Find the order with sales order (or supplier ref) number 100\"},{\"note\":\"Put all the primer tubes in a table top centrifuge to spin down for 3 seconds.\"},{\"warning\":\"Make sure to balance!\"}]},{\"operation\":\"next\",\"time\":\"2017-10-02T10:51:15-07:00\",\"inputs\":{\"timestamp\":1506966675000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Enter the nMoles of the primer\"},{\"note\":\"Enter the number of moles for each primer, in nm. This is written toward the bottom of the tube, below the MW.\"},{\"note\":\"The id of the primer is listed before the primer\'s name on the side of the tube.\"},{\"table\":[[\"Primer Sample ID (input)\",\"nMoles\"],[20338,{\"type\":\"number\",\"operation_id\":2954,\"key\":\"n_moles\",\"default\":10}],[20339,{\"type\":\"number\",\"operation_id\":2956,\"key\":\"n_moles\",\"default\":10}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-02T10:51:15-07:00\",\"inputs\":{\"timestamp\":1506966675000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Label and rehydrate\"},{\"note\":\"Label each primer tube with the ids shown in Primer Stock ids and rehydrate with volume of TE shown in Rehydrate\"},{\"table\":[[\"Primer Sample ID (input)\",\"Primer Stock Item ID (output)\",\"Rehydrate (uL of TE)\"],[20338,99737,{\"content\":100,\"check\":true}],[20339,99739,{\"content\":100,\"check\":true}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-02T10:51:16-07:00\",\"inputs\":{\"timestamp\":1506966676000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Vortex and centrifuge\"},{\"note\":\"Wait one minute for the primer to dissolve in TE.\"},{\"note\":\"Vortex each tube on table top vortexer for 5 seconds and then quick spin for 2 seconds on table top centrifuge.\"}]},{\"operation\":\"next\",\"time\":\"2017-10-02T10:51:16-07:00\",\"inputs\":{\"timestamp\":1506966676000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Grab 2 1.5 mL tubes\"},{\"check\":\"Grab 2 1.5 mL tubes, label with following ids: 99736, 99738\"},{\"check\":\"Add 90 uL of water into each above tube.\"}]},{\"operation\":\"next\",\"time\":\"2017-10-02T10:51:16-07:00\",\"inputs\":{\"timestamp\":1506966676000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Make primer aliquots\"},{\"note\":\"Add 10 uL from primer stocks into each primer aliquot tube using the following table.\"},{\"table\":[[\"Primer Stock (10 L)\",\"Primer Aliquot Item ID (output)\"],[99737,{\"content\":99736,\"check\":true}],[99739,{\"content\":99738,\"check\":true}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-02T10:51:16-07:00\",\"inputs\":{\"timestamp\":1506966676000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Boxes Required\"},{\"note\":\"You will need the following boxes from the freezer(s)\"},{\"table\":[[{\"content\":\"M20.0.0\",\"check\":true}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-02T10:51:16-07:00\",\"inputs\":{\"timestamp\":1506966676000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return to M20.0.0\"},{\"note\":\"Return Item(s)\"},{\"table\":[[{\"content\":0,\"class\":\"td-empty-slot\"},{\"content\":99736,\"class\":\"td-filled-slot\",\"check\":true},{\"content\":99737,\"class\":\"td-filled-slot\",\"check\":true},{\"content\":99738,\"class\":\"td-filled-slot\",\"check\":true},{\"content\":99739,\"class\":\"td-filled-slot\",\"check\":true},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"}],[{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"},{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"}],[{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"},{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"}],[{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"}],[{\"content\":36,\"class\":\"td-empty-slot\"},{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"}],[{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"},{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"}],[{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"},{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"}],[{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"}],[{\"content\":72,\"class\":\"td-empty-slot\"},{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-02T10:51:16-07:00\",\"inputs\":{\"timestamp\":1506966676000}},{\"operation\":\"complete\",\"rval\":{}}]','2017-10-02 17:51:15','2017-10-02 17:51:16','operation.rb',-2,235,1,'2017-10-02 17:51:15','2017-10-02 18:51:15',NULL,NULL),(42576,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":183},\"time\":\"2017-10-02T10:51:18-07:00\"}]','2017-10-02 17:51:18','2017-10-02 17:51:18','operation.rb',-1,235,1,'2017-10-02 17:51:18','2017-10-02 18:51:18',NULL,NULL),(42577,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":183},\"time\":\"2017-10-02T10:51:18-07:00\"}]','2017-10-02 17:51:18','2017-10-02 17:51:18','operation.rb',-1,235,1,'2017-10-02 17:51:18','2017-10-02 18:51:18',NULL,NULL),(42578,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":183},\"time\":\"2017-10-02T10:52:12-07:00\"}]','2017-10-02 17:52:12','2017-10-02 17:52:12','operation.rb',-1,235,1,'2017-10-02 17:52:12','2017-10-02 18:52:12',NULL,NULL),(42579,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":183},\"time\":\"2017-10-02T10:52:12-07:00\"},{\"operation\":\"error\",\"message\":\"Unknown container 1 ng/L Plasmid Stock\",\"backtrace\":[\"/Users/ericklavins/Development/aquarium/lib/krill/inventory.rb:40:in `new_sample\'\",\"(eval):83:in `block in dilute_stocks_and_retrieve\'\",\"(eval):73:in `each\'\",\"(eval):73:in `dilute_stocks_and_retrieve\'\",\"(eval):32:in `main\'\",\"/Users/ericklavins/Development/aquarium/lib/krill/manager.rb:125:in `debugger\'\",\"/Users/ericklavins/Development/aquarium/lib/krill/manager.rb:168:in `run\'\",\"/Users/ericklavins/Development/aquarium/app/controllers/krill_controller.rb:135:in `debug\'\",\"/Users/ericklavins/.rvm/gems/ruby-2.2.0@aquarium/gems/actionpack-3.2.22/lib/action_controller/metal/implicit_render.rb:4:in `send_action\'\",\"/Users/ericklavins/.rvm/gems/ruby-2.2.0@aquarium/gems/actionpack-3.2.22/lib/abstract_controller/base.rb:167:in `process_action\'\"]},{\"operation\":\"next\",\"time\":\"2017-10-02T10:52:14-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2017-10-02 17:52:12','2017-10-02 17:52:14','operation.rb',-2,235,1,'2017-10-02 17:52:12','2017-10-02 18:52:12',NULL,NULL),(42580,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":183},\"time\":\"2017-10-02T10:52:46-07:00\"}]','2017-10-02 17:52:46','2017-10-02 17:52:46','operation.rb',-1,235,1,'2017-10-02 17:52:46','2017-10-02 18:52:46',NULL,NULL),(42581,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":183},\"time\":\"2017-10-02T10:52:46-07:00\"},{\"operation\":\"error\",\"message\":\"Unknown container 1 ng/L Plasmid Stock\",\"backtrace\":[\"/Users/ericklavins/Development/aquarium/lib/krill/inventory.rb:40:in `new_sample\'\",\"(eval):83:in `block in dilute_stocks_and_retrieve\'\",\"(eval):73:in `each\'\",\"(eval):73:in `dilute_stocks_and_retrieve\'\",\"(eval):32:in `main\'\",\"/Users/ericklavins/Development/aquarium/lib/krill/manager.rb:125:in `debugger\'\",\"/Users/ericklavins/Development/aquarium/lib/krill/manager.rb:168:in `run\'\",\"/Users/ericklavins/Development/aquarium/app/controllers/krill_controller.rb:135:in `debug\'\",\"/Users/ericklavins/.rvm/gems/ruby-2.2.0@aquarium/gems/actionpack-3.2.22/lib/action_controller/metal/implicit_render.rb:4:in `send_action\'\",\"/Users/ericklavins/.rvm/gems/ruby-2.2.0@aquarium/gems/actionpack-3.2.22/lib/abstract_controller/base.rb:167:in `process_action\'\"]},{\"operation\":\"next\",\"time\":\"2017-10-02T10:53:45-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2017-10-02 17:52:46','2017-10-02 17:53:45','operation.rb',-2,235,1,'2017-10-02 17:52:46','2017-10-02 18:52:46',NULL,NULL),(42582,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":183},\"time\":\"2017-10-02T10:54:38-07:00\"}]','2017-10-02 17:54:38','2017-10-02 17:54:38','operation.rb',-1,235,1,'2017-10-02 17:54:38','2017-10-02 18:54:38',NULL,NULL),(42583,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":183},\"time\":\"2017-10-02T10:54:38-07:00\"},{\"operation\":\"error\",\"message\":\"Unknown container 1 ng/L Plasmid Stock\",\"backtrace\":[\"/Users/ericklavins/Development/aquarium/lib/krill/inventory.rb:40:in `new_sample\'\",\"(eval):83:in `block in dilute_stocks_and_retrieve\'\",\"(eval):73:in `each\'\",\"(eval):73:in `dilute_stocks_and_retrieve\'\",\"(eval):32:in `main\'\",\"/Users/ericklavins/Development/aquarium/lib/krill/manager.rb:125:in `debugger\'\",\"/Users/ericklavins/Development/aquarium/lib/krill/manager.rb:168:in `run\'\",\"/Users/ericklavins/Development/aquarium/app/controllers/plans_controller.rb:221:in `block in debug\'\",\"/Users/ericklavins/Development/aquarium/app/controllers/plans_controller.rb:185:in `each\'\",\"/Users/ericklavins/Development/aquarium/app/controllers/plans_controller.rb:185:in `debug\'\"]},{\"operation\":\"next\",\"time\":\"2017-10-02T10:54:38-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2017-10-02 17:54:38','2017-10-02 17:54:38','operation.rb',-2,235,1,'2017-10-02 17:54:38','2017-10-02 18:54:38',NULL,NULL),(42584,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":183},\"time\":\"2017-10-02T10:55:11-07:00\"}]','2017-10-02 17:55:11','2017-10-02 17:55:11','operation.rb',-1,235,1,'2017-10-02 17:55:11','2017-10-02 18:55:11',NULL,NULL),(42585,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":183},\"time\":\"2017-10-02T10:55:11-07:00\"},{\"operation\":\"error\",\"message\":\"Unknown container 1 ng/L Plasmid Stock\",\"backtrace\":[\"/Users/ericklavins/Development/aquarium/lib/krill/inventory.rb:40:in `new_sample\'\",\"(eval):83:in `block in dilute_stocks_and_retrieve\'\",\"(eval):73:in `each\'\",\"(eval):73:in `dilute_stocks_and_retrieve\'\",\"(eval):32:in `main\'\",\"/Users/ericklavins/Development/aquarium/lib/krill/manager.rb:66:in `block in start_thread\'\"]},{\"operation\":\"next\",\"time\":\"2017-10-02T10:56:45-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2017-10-02 17:55:11','2017-10-02 17:56:45','operation.rb',-2,235,1,'2017-10-02 17:55:11','2017-10-02 18:55:11',NULL,NULL),(42586,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":183},\"time\":\"2017-10-02T10:59:36-07:00\"}]','2017-10-02 17:59:36','2017-10-02 17:59:36','operation.rb',-1,235,1,'2017-10-02 17:59:36','2017-10-02 18:59:36',NULL,NULL),(42587,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":183},\"time\":\"2017-10-02T10:59:36-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Boxes Required\"},{\"note\":\"You will need the following boxes from the freezer(s)\"},{\"table\":[[{\"content\":\"M20.0.0\",\"check\":true}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-02T10:59:39-07:00\",\"inputs\":{\"timestamp\":1506967179000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Take from M20.0.0\"},{\"note\":\"Collect Item(s)\"},{\"table\":[[{\"content\":99733,\"class\":\"td-filled-slot\",\"check\":true},{\"content\":99736,\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"}],[{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"},{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"}],[{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"},{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"}],[{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"}],[{\"content\":36,\"class\":\"td-empty-slot\"},{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"}],[{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"},{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"}],[{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"},{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"}],[{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"}],[{\"content\":72,\"class\":\"td-empty-slot\"},{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-02T10:59:39-07:00\",\"inputs\":{\"timestamp\":1506967179000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Please nanodrop the following Plasmid Stocks\"},{\"note\":\"Please nanodrop the following Plasmid Stocks:\"},{\"input\":{\"var\":\"c99733\",\"label\":\"<a href=\'/items/99733\' class=\'aquarium-item\' id=\'99733\'>99733</a> item\",\"default\":42,\"type\":\"number\"}}]},{\"operation\":\"next\",\"time\":\"2017-10-02T10:59:39-07:00\",\"inputs\":{\"c99733\":42,\"timestamp\":1506967179000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Make 1 ng/µL Template Stocks\"},{\"check\":\"Grab 1 1.5 mL tubes, label them with 99740\"},{\"check\":\"Add template stocks and water into newly labeled 1.5 mL tubes following the table below\"},{\"table\":[[\"Newly-labeled tube\",\"Template stock, 1 L\",\"Water volume\"],[99740,{\"content\":99733,\"check\":true},{\"content\":41.0,\"check\":true}]]},{\"check\":\"Vortex and then spin down for a few seconds\"}]},{\"operation\":\"next\",\"time\":\"2017-10-02T10:59:39-07:00\",\"inputs\":{\"timestamp\":1506967179000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Boxes Required\"},{\"note\":\"You will need the following boxes from the freezer(s)\"},{\"table\":[[{\"content\":\"M20.0.0\",\"check\":true}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-02T10:59:39-07:00\",\"inputs\":{\"timestamp\":1506967179000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return to M20.0.0\"},{\"note\":\"Return Item(s)\"},{\"table\":[[{\"content\":99733,\"class\":\"td-filled-slot\",\"check\":true},{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"}],[{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"},{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"}],[{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"},{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"}],[{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"}],[{\"content\":36,\"class\":\"td-empty-slot\"},{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"}],[{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"},{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"}],[{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"},{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"}],[{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"}],[{\"content\":72,\"class\":\"td-empty-slot\"},{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-02T10:59:39-07:00\",\"inputs\":{\"timestamp\":1506967179000}},{\"operation\":\"error\",\"message\":\"undefined method `in\' for nil:NilClass\",\"backtrace\":[\"(eval):33:in `main\'\",\"/Users/ericklavins/Development/aquarium/lib/krill/manager.rb:125:in `debugger\'\",\"/Users/ericklavins/Development/aquarium/lib/krill/manager.rb:168:in `run\'\",\"/Users/ericklavins/Development/aquarium/app/controllers/krill_controller.rb:135:in `debug\'\",\"/Users/ericklavins/.rvm/gems/ruby-2.2.0@aquarium/gems/actionpack-3.2.22/lib/action_controller/metal/implicit_render.rb:4:in `send_action\'\",\"/Users/ericklavins/.rvm/gems/ruby-2.2.0@aquarium/gems/actionpack-3.2.22/lib/abstract_controller/base.rb:167:in `process_action\'\",\"/Users/ericklavins/.rvm/gems/ruby-2.2.0@aquarium/gems/actionpack-3.2.22/lib/action_controller/metal/rendering.rb:10:in `process_action\'\",\"/Users/ericklavins/.rvm/gems/ruby-2.2.0@aquarium/gems/actionpack-3.2.22/lib/abstract_controller/callbacks.rb:18:in `block in process_action\'\",\"/Users/ericklavins/.rvm/gems/ruby-2.2.0@aquarium/gems/activesupport-3.2.22/lib/active_support/callbacks.rb:425:in `_run__469717699512535814__process_action__3581703439872415835__callbacks\'\",\"/Users/ericklavins/.rvm/gems/ruby-2.2.0@aquarium/gems/activesupport-3.2.22/lib/active_support/callbacks.rb:405:in `__run_callback\'\"]},{\"operation\":\"next\",\"time\":\"2017-10-02T10:59:39-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2017-10-02 17:59:36','2017-10-02 17:59:39','operation.rb',-2,235,1,'2017-10-02 17:59:36','2017-10-02 18:59:36',NULL,NULL),(42588,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":183},\"time\":\"2017-10-02T11:00:11-07:00\"}]','2017-10-02 18:00:11','2017-10-02 18:00:11','operation.rb',-1,235,1,'2017-10-02 18:00:11','2017-10-02 19:00:11',NULL,NULL),(42589,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":183},\"time\":\"2017-10-02T11:00:11-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Boxes Required\"},{\"note\":\"You will need the following boxes from the freezer(s)\"},{\"table\":[[{\"content\":\"M20.0.0\",\"check\":true}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-02T11:00:24-07:00\",\"inputs\":{\"timestamp\":1506967224.002,\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"Take from M20.0.0\"},{\"note\":\"Collect Item(s)\"},{\"table\":[[{\"content\":0,\"class\":\"td-empty-slot\"},{\"content\":99736,\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":99740,\"class\":\"td-filled-slot\",\"check\":true},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"}],[{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"},{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"}],[{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"},{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"}],[{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"}],[{\"content\":36,\"class\":\"td-empty-slot\"},{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"}],[{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"},{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"}],[{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"},{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"}],[{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"}],[{\"content\":72,\"class\":\"td-empty-slot\"},{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-02T11:00:24-07:00\",\"inputs\":{\"timestamp\":1506967224.823,\"table_inputs\":[]}},{\"operation\":\"error\",\"message\":\"undefined method `in\' for nil:NilClass\",\"backtrace\":[\"(eval):33:in `main\'\",\"/Users/ericklavins/Development/aquarium/lib/krill/manager.rb:66:in `block in start_thread\'\"]},{\"operation\":\"next\",\"time\":\"2017-10-02T11:00:24-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2017-10-02 18:00:11','2017-10-02 18:00:24','operation.rb',-2,235,1,'2017-10-02 18:00:11','2017-10-02 19:00:11',NULL,NULL),(42590,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":183},\"time\":\"2017-10-02T11:02:12-07:00\"}]','2017-10-02 18:02:12','2017-10-02 18:02:12','operation.rb',-1,235,1,'2017-10-02 18:02:12','2017-10-02 19:02:12',NULL,NULL),(42591,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":183},\"time\":\"2017-10-02T11:02:12-07:00\"},{\"operation\":\"error\",\"message\":\"undefined method `input\' for nil:NilClass\",\"backtrace\":[\"(eval):24:in `main\'\",\"/Users/ericklavins/Development/aquarium/lib/krill/manager.rb:125:in `debugger\'\",\"/Users/ericklavins/Development/aquarium/lib/krill/manager.rb:168:in `run\'\",\"/Users/ericklavins/Development/aquarium/app/controllers/krill_controller.rb:135:in `debug\'\",\"/Users/ericklavins/.rvm/gems/ruby-2.2.0@aquarium/gems/actionpack-3.2.22/lib/action_controller/metal/implicit_render.rb:4:in `send_action\'\",\"/Users/ericklavins/.rvm/gems/ruby-2.2.0@aquarium/gems/actionpack-3.2.22/lib/abstract_controller/base.rb:167:in `process_action\'\",\"/Users/ericklavins/.rvm/gems/ruby-2.2.0@aquarium/gems/actionpack-3.2.22/lib/action_controller/metal/rendering.rb:10:in `process_action\'\",\"/Users/ericklavins/.rvm/gems/ruby-2.2.0@aquarium/gems/actionpack-3.2.22/lib/abstract_controller/callbacks.rb:18:in `block in process_action\'\",\"/Users/ericklavins/.rvm/gems/ruby-2.2.0@aquarium/gems/activesupport-3.2.22/lib/active_support/callbacks.rb:425:in `_run__469717699512535814__process_action__3581703439872415835__callbacks\'\",\"/Users/ericklavins/.rvm/gems/ruby-2.2.0@aquarium/gems/activesupport-3.2.22/lib/active_support/callbacks.rb:405:in `__run_callback\'\"]},{\"operation\":\"next\",\"time\":\"2017-10-02T11:02:15-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2017-10-02 18:02:12','2017-10-02 18:02:15','operation.rb',-2,235,1,'2017-10-02 18:02:12','2017-10-02 19:02:12',NULL,NULL),(42592,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":183},\"time\":\"2017-10-02T11:03:04-07:00\"}]','2017-10-02 18:03:04','2017-10-02 18:03:04','operation.rb',-1,235,1,'2017-10-02 18:03:04','2017-10-02 19:03:04',NULL,NULL),(42593,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":183},\"time\":\"2017-10-02T11:03:04-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Boxes Required\"},{\"note\":\"You will need the following boxes from the freezer(s)\"},{\"table\":[[{\"content\":\"M20.0.0\",\"check\":true}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-02T11:03:10-07:00\",\"inputs\":{\"timestamp\":1506967390.902,\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"Take from M20.0.0\"},{\"note\":\"Collect Item(s)\"},{\"table\":[[{\"content\":0,\"class\":\"td-empty-slot\"},{\"content\":99736,\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":99740,\"class\":\"td-filled-slot\",\"check\":true},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"}],[{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"},{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"}],[{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"},{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"}],[{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"}],[{\"content\":36,\"class\":\"td-empty-slot\"},{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"}],[{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"},{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"}],[{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"},{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"}],[{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"}],[{\"content\":72,\"class\":\"td-empty-slot\"},{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-02T11:03:11-07:00\",\"inputs\":{\"timestamp\":1506967391.815,\"table_inputs\":[]}},{\"operation\":\"error\",\"message\":\"undefined method `in\' for nil:NilClass\",\"backtrace\":[\"(eval):29:in `main\'\",\"/Users/ericklavins/Development/aquarium/lib/krill/manager.rb:66:in `block in start_thread\'\"]},{\"operation\":\"next\",\"time\":\"2017-10-02T11:03:11-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2017-10-02 18:03:04','2017-10-02 18:03:11','operation.rb',-2,235,1,'2017-10-02 18:03:04','2017-10-02 19:03:04',NULL,NULL),(42594,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":183},\"time\":\"2017-10-02T11:16:05-07:00\"}]','2017-10-02 18:16:05','2017-10-02 18:16:05','operation.rb',-1,235,1,'2017-10-02 18:16:05','2017-10-02 19:16:05',NULL,NULL),(42595,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":183},\"time\":\"2017-10-02T11:16:05-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Boxes Required\"},{\"note\":\"You will need the following boxes from the freezer(s)\"},{\"table\":[[{\"content\":\"M20.0.0\",\"check\":true}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-02T11:16:11-07:00\",\"inputs\":{\"timestamp\":1506968171.829,\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"Take from M20.0.0\"},{\"note\":\"Collect Item(s)\"},{\"table\":[[{\"content\":0,\"class\":\"td-empty-slot\"},{\"content\":99736,\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":99740,\"class\":\"td-filled-slot\",\"check\":true},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"}],[{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"},{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"}],[{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"},{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"}],[{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"}],[{\"content\":36,\"class\":\"td-empty-slot\"},{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"}],[{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"},{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"}],[{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"},{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"}],[{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"}],[{\"content\":72,\"class\":\"td-empty-slot\"},{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-02T11:16:12-07:00\",\"inputs\":{\"timestamp\":1506968172.594,\"table_inputs\":[]}},{\"operation\":\"error\",\"message\":\"undefined method `in\' for nil:NilClass\",\"backtrace\":[\"(eval):29:in `main\'\",\"/Users/ericklavins/Development/aquarium/lib/krill/manager.rb:66:in `block in start_thread\'\"]},{\"operation\":\"next\",\"time\":\"2017-10-02T11:16:12-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2017-10-02 18:16:05','2017-10-02 18:16:12','operation.rb',-2,235,1,'2017-10-02 18:16:05','2017-10-02 19:16:05',NULL,NULL),(42596,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":183},\"time\":\"2017-10-02T11:17:11-07:00\"}]','2017-10-02 18:17:11','2017-10-02 18:17:11','operation.rb',-1,235,1,'2017-10-02 18:17:11','2017-10-02 19:17:11',NULL,NULL),(42597,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":183},\"time\":\"2017-10-02T11:17:11-07:00\"},{\"operation\":\"error\",\"message\":\"undefined method `input\' for nil:NilClass\",\"backtrace\":[\"(eval):23:in `main\'\",\"/Users/ericklavins/Development/aquarium/lib/krill/manager.rb:125:in `debugger\'\",\"/Users/ericklavins/Development/aquarium/lib/krill/manager.rb:168:in `run\'\",\"/Users/ericklavins/Development/aquarium/app/controllers/krill_controller.rb:135:in `debug\'\",\"/Users/ericklavins/.rvm/gems/ruby-2.2.0@aquarium/gems/actionpack-3.2.22/lib/action_controller/metal/implicit_render.rb:4:in `send_action\'\",\"/Users/ericklavins/.rvm/gems/ruby-2.2.0@aquarium/gems/actionpack-3.2.22/lib/abstract_controller/base.rb:167:in `process_action\'\",\"/Users/ericklavins/.rvm/gems/ruby-2.2.0@aquarium/gems/actionpack-3.2.22/lib/action_controller/metal/rendering.rb:10:in `process_action\'\",\"/Users/ericklavins/.rvm/gems/ruby-2.2.0@aquarium/gems/actionpack-3.2.22/lib/abstract_controller/callbacks.rb:18:in `block in process_action\'\",\"/Users/ericklavins/.rvm/gems/ruby-2.2.0@aquarium/gems/activesupport-3.2.22/lib/active_support/callbacks.rb:425:in `_run__1036893769049325165__process_action__4106215174560430864__callbacks\'\",\"/Users/ericklavins/.rvm/gems/ruby-2.2.0@aquarium/gems/activesupport-3.2.22/lib/active_support/callbacks.rb:405:in `__run_callback\'\"]},{\"operation\":\"next\",\"time\":\"2017-10-02T11:17:26-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2017-10-02 18:17:11','2017-10-02 18:17:26','operation.rb',-2,235,1,'2017-10-02 18:17:11','2017-10-02 19:17:11',NULL,NULL),(42598,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":183},\"time\":\"2017-10-02T11:17:15-07:00\"}]','2017-10-02 18:17:15','2017-10-02 18:17:15','operation.rb',-1,235,1,'2017-10-02 18:17:15','2017-10-02 19:17:15',NULL,NULL),(42599,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":183},\"time\":\"2017-10-02T11:17:15-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Boxes Required\"},{\"note\":\"You will need the following boxes from the freezer(s)\"},{\"table\":[[{\"content\":\"M20.0.0\",\"check\":true}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-02T11:17:32-07:00\",\"inputs\":{\"timestamp\":1506968252.123,\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"Take from M20.0.0\"},{\"note\":\"Collect Item(s)\"},{\"table\":[[{\"content\":0,\"class\":\"td-empty-slot\"},{\"content\":99736,\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":99740,\"class\":\"td-filled-slot\",\"check\":true},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"}],[{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"},{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"}],[{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"},{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"}],[{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"}],[{\"content\":36,\"class\":\"td-empty-slot\"},{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"}],[{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"},{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"}],[{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"},{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"}],[{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"}],[{\"content\":72,\"class\":\"td-empty-slot\"},{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-02T11:17:33-07:00\",\"inputs\":{\"timestamp\":1506968253.266,\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"Boxes Required\"},{\"note\":\"You will need the following boxes from the freezer(s)\"},{\"table\":[[{\"content\":\"M20.0.0\",\"check\":true}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-02T11:17:34-07:00\",\"inputs\":{\"timestamp\":1506968254.058,\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"Take from M20.0.0\"},{\"note\":\"Collect Item(s)\"},{\"table\":[[{\"content\":0,\"class\":\"td-empty-slot\"},{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":99741,\"class\":\"td-filled-slot\",\"check\":true},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"}],[{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"},{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"}],[{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"},{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"}],[{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"}],[{\"content\":36,\"class\":\"td-empty-slot\"},{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"}],[{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"},{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"}],[{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"},{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"}],[{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"}],[{\"content\":72,\"class\":\"td-empty-slot\"},{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-02T11:17:34-07:00\",\"inputs\":{\"timestamp\":1506968254.866,\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"Verify enough volume of each Forward Primer and Reverse Primer exists, or note if contamination is present\"},{\"select\":{\"var\":\"99736\",\"label\":\"Is there at least 5.0 µL of 99736?\",\"multiple\":false,\"default\":0,\"choices\":[\"Yes\",\"No\",\"Contamination is present\"]}}]},{\"operation\":\"next\",\"time\":\"2017-10-02T11:17:36-07:00\",\"inputs\":{\"99736\":\"Yes\",\"timestamp\":1506968256.753,\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"Label and prepare stripwells\"},{\"note\":\"Label stripwells, and pipette 19 µL of molecular grade water into each based on the following table:\"},{\"table\":[[\"Stripwell\",\"Wells to pipette\"],[\"99742 (6 wells)\",{\"content\":\"1 - 1\",\"check\":true}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-02T11:17:43-07:00\",\"inputs\":{\"timestamp\":1506968263.126,\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"Load templates for PCR #1\"},{\"table\":[[\"Stripwell\",\"Well\",\"Template, 1 µL\"],[99742,1,{\"content\":99740,\"check\":true}]]},{\"warning\":\"USE A FRESH PIPETTE TIP FOR EACH TRANSFER.\"}]},{\"operation\":\"next\",\"time\":\"2017-10-02T11:17:44-07:00\",\"inputs\":{\"timestamp\":1506968264.404,\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"Load primers for PCR #1\"},{\"table\":[[\"Stripwell\",\"Well\",\"Forward Primer, 2.5 µL\",\"Reverse Primer, 2.5 µL\"],[99742,1,{\"content\":99736,\"check\":true},{\"content\":99736,\"check\":true}]]},{\"warning\":\"USE A FRESH PIPETTE TIP FOR EACH TRANSFER.\"}]},{\"operation\":\"next\",\"time\":\"2017-10-02T11:17:45-07:00\",\"inputs\":{\"timestamp\":1506968265.271,\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"Add Master Mix\"},{\"note\":\"Pipette 25 µL of master mix (<a href=\'/items/99741\' class=\'aquarium-item\' id=\'99741\'>99741</a>) into stripwells based on the following table:\"},{\"table\":[[\"Stripwell\",\"Wells to pipette\"],[\"99742 (6 wells)\",{\"content\":\"1 - 1\",\"check\":true}]]},{\"warning\":\"USE A NEW PIPETTE TIP FOR EACH WELL AND PIPETTE UP AND DOWN TO MIX.\"},{\"check\":\"Cap each stripwell. Press each one very hard to make sure it is sealed.\"}]},{\"operation\":\"next\",\"time\":\"2017-10-02T11:17:46-07:00\",\"inputs\":{\"timestamp\":1506968266.071,\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"Start PCR #1 at 65.0 C\"},{\"check\":\"Place the stripwell(s) <a href=\'/items/99742\' class=\'aquarium-item\' id=\'99742\'>99742</a> into an available thermal cycler and close the lid.\"},{\"input\":{\"var\":\"name\",\"label\":\"Enter the name of the thermocycler used\",\"default\":\"TC1\",\"type\":\"text\"}},{\"check\":\"Click \'Home\' then click \'Saved Protocol\'. Choose \'YY\' and then \'CLONEPCR\'.\"},{\"check\":\"Set the anneal temperature to 65.0. This is the 3rd temperature.\"},{\"check\":\"Set the 4th time (extension time) to be 03:00.\"},{\"check\":\"Press \'Run\' and select 50 µL.\"}]},{\"operation\":\"next\",\"time\":\"2017-10-02T11:17:46-07:00\",\"inputs\":{\"timestamp\":1506968266.856,\"name\":\"TC1\",\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"Boxes Required\"},{\"note\":\"You will need the following boxes from the freezer(s)\"},{\"table\":[[{\"content\":\"M20.0.0\",\"check\":true}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-02T11:17:47-07:00\",\"inputs\":{\"timestamp\":1506968267.753,\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return to M20.0.0\"},{\"note\":\"Return Item(s)\"},{\"table\":[[{\"content\":0,\"class\":\"td-empty-slot\"},{\"content\":99736,\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":99740,\"class\":\"td-filled-slot\",\"check\":true},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"}],[{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"},{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"}],[{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"},{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"}],[{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"}],[{\"content\":36,\"class\":\"td-empty-slot\"},{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"}],[{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"},{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"}],[{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"},{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"}],[{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"}],[{\"content\":72,\"class\":\"td-empty-slot\"},{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-02T11:17:48-07:00\",\"inputs\":{\"timestamp\":1506968268.611,\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return the Following Item(s)\"},{\"take\":{\"id\":99741,\"location\":\"M20.0.0.6\",\"name\":\"Enzyme Stock\",\"sample\":\"Kapa HF Master Mix\",\"type\":\"Enzyme\"}}]},{\"operation\":\"next\",\"time\":\"2017-10-02T11:17:49-07:00\",\"inputs\":{\"timestamp\":1506968269.485,\"table_inputs\":[]}},{\"operation\":\"complete\",\"rval\":{}}]','2017-10-02 18:17:15','2017-10-02 18:17:49','operation.rb',-2,235,1,'2017-10-02 18:17:15','2017-10-02 19:17:15',NULL,NULL),(42600,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":183},\"time\":\"2017-10-02T11:18:17-07:00\"}]','2017-10-02 18:18:17','2017-10-02 18:18:17','operation.rb',-1,235,1,'2017-10-02 18:18:17','2017-10-02 19:18:17',NULL,NULL),(42601,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":183},\"time\":\"2017-10-02T11:18:17-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Boxes Required\"},{\"note\":\"You will need the following boxes from the freezer(s)\"},{\"table\":[[{\"content\":\"M20.0.0\",\"check\":true}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-02T11:18:19-07:00\",\"inputs\":{\"timestamp\":1506968299.605,\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"Take from M20.0.0\"},{\"note\":\"Collect Item(s)\"},{\"table\":[[{\"content\":0,\"class\":\"td-empty-slot\"},{\"content\":99736,\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":99740,\"class\":\"td-filled-slot\",\"check\":true},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"}],[{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"},{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"}],[{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"},{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"}],[{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"}],[{\"content\":36,\"class\":\"td-empty-slot\"},{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"}],[{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"},{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"}],[{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"},{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"}],[{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"}],[{\"content\":72,\"class\":\"td-empty-slot\"},{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-02T11:18:20-07:00\",\"inputs\":{\"timestamp\":1506968300.288,\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"Boxes Required\"},{\"note\":\"You will need the following boxes from the freezer(s)\"},{\"table\":[[{\"content\":\"M20.0.0\",\"check\":true}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-02T11:18:20-07:00\",\"inputs\":{\"timestamp\":1506968300.938,\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"Take from M20.0.0\"},{\"note\":\"Collect Item(s)\"},{\"table\":[[{\"content\":0,\"class\":\"td-empty-slot\"},{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":99741,\"class\":\"td-filled-slot\",\"check\":true},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"}],[{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"},{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"}],[{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"},{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"}],[{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"}],[{\"content\":36,\"class\":\"td-empty-slot\"},{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"}],[{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"},{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"}],[{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"},{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"}],[{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"}],[{\"content\":72,\"class\":\"td-empty-slot\"},{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-02T11:18:21-07:00\",\"inputs\":{\"timestamp\":1506968301.574,\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"Verify enough volume of each Forward Primer and Reverse Primer exists, or note if contamination is present\"},{\"select\":{\"var\":\"99736\",\"label\":\"Is there at least 5.0 µL of 99736?\",\"multiple\":false,\"default\":0,\"choices\":[\"Yes\",\"No\",\"Contamination is present\"]}}]},{\"operation\":\"next\",\"time\":\"2017-10-02T11:18:22-07:00\",\"inputs\":{\"99736\":\"Yes\",\"timestamp\":1506968302.226,\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"Label and prepare stripwells\"},{\"note\":\"Label stripwells, and pipette 19 µL of molecular grade water into each based on the following table:\"},{\"table\":[[\"Stripwell\",\"Wells to pipette\"],[\"99743 (6 wells)\",{\"content\":\"1 - 1\",\"check\":true}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-02T11:18:26-07:00\",\"inputs\":{\"timestamp\":1506968306.282,\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"Load templates for PCR #1\"},{\"table\":[[\"Stripwell\",\"Well\",\"Template, 1 µL\"],[99743,1,{\"content\":99740,\"check\":true}]]},{\"warning\":\"USE A FRESH PIPETTE TIP FOR EACH TRANSFER.\"}]},{\"operation\":\"next\",\"time\":\"2017-10-02T11:18:27-07:00\",\"inputs\":{\"timestamp\":1506968307.049,\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"Load primers for PCR #1\"},{\"table\":[[\"Stripwell\",\"Well\",\"Forward Primer, 2.5 µL\",\"Reverse Primer, 2.5 µL\"],[99743,1,{\"content\":99736,\"check\":true},{\"content\":99736,\"check\":true}]]},{\"warning\":\"USE A FRESH PIPETTE TIP FOR EACH TRANSFER.\"}]},{\"operation\":\"next\",\"time\":\"2017-10-02T11:18:27-07:00\",\"inputs\":{\"timestamp\":1506968307.733,\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"Add Master Mix\"},{\"note\":\"Pipette 25 µL of master mix (<a href=\'/items/99741\' class=\'aquarium-item\' id=\'99741\'>99741</a>) into stripwells based on the following table:\"},{\"table\":[[\"Stripwell\",\"Wells to pipette\"],[\"99743 (6 wells)\",{\"content\":\"1 - 1\",\"check\":true}]]},{\"warning\":\"USE A NEW PIPETTE TIP FOR EACH WELL AND PIPETTE UP AND DOWN TO MIX.\"},{\"check\":\"Cap each stripwell. Press each one very hard to make sure it is sealed.\"}]},{\"operation\":\"next\",\"time\":\"2017-10-02T11:18:28-07:00\",\"inputs\":{\"timestamp\":1506968308.417,\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"Start PCR #1 at 65.0 C\"},{\"check\":\"Place the stripwell(s) <a href=\'/items/99743\' class=\'aquarium-item\' id=\'99743\'>99743</a> into an available thermal cycler and close the lid.\"},{\"input\":{\"var\":\"name\",\"label\":\"Enter the name of the thermocycler used\",\"default\":\"TC1\",\"type\":\"text\"}},{\"check\":\"Click \'Home\' then click \'Saved Protocol\'. Choose \'YY\' and then \'CLONEPCR\'.\"},{\"check\":\"Set the anneal temperature to 65.0. This is the 3rd temperature.\"},{\"check\":\"Set the 4th time (extension time) to be 03:00.\"},{\"check\":\"Press \'Run\' and select 50 µL.\"}]},{\"operation\":\"next\",\"time\":\"2017-10-02T11:18:29-07:00\",\"inputs\":{\"timestamp\":1506968309.25,\"name\":\"TC1\",\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"Boxes Required\"},{\"note\":\"You will need the following boxes from the freezer(s)\"},{\"table\":[[{\"content\":\"M20.0.0\",\"check\":true}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-02T11:18:30-07:00\",\"inputs\":{\"timestamp\":1506968310.051,\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return to M20.0.0\"},{\"note\":\"Return Item(s)\"},{\"table\":[[{\"content\":0,\"class\":\"td-empty-slot\"},{\"content\":99736,\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":99740,\"class\":\"td-filled-slot\",\"check\":true},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"}],[{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"},{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"}],[{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"},{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"}],[{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"}],[{\"content\":36,\"class\":\"td-empty-slot\"},{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"}],[{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"},{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"}],[{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"},{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"}],[{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"}],[{\"content\":72,\"class\":\"td-empty-slot\"},{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-02T11:18:30-07:00\",\"inputs\":{\"timestamp\":1506968310.825,\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return the Following Item(s)\"},{\"take\":{\"id\":99741,\"location\":\"M20.0.0.6\",\"name\":\"Enzyme Stock\",\"sample\":\"Kapa HF Master Mix\",\"type\":\"Enzyme\"}}]},{\"operation\":\"next\",\"time\":\"2017-10-02T11:18:31-07:00\",\"inputs\":{\"timestamp\":1506968311.617,\"table_inputs\":[]}},{\"operation\":\"complete\",\"rval\":{}}]','2017-10-02 18:18:17','2017-10-02 18:18:31','operation.rb',-2,235,1,'2017-10-02 18:18:17','2017-10-02 19:18:17',NULL,NULL),(42602,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":200},\"time\":\"2017-10-26T21:44:06-07:00\"}]','2017-10-27 04:44:06','2017-10-27 04:44:06','operation.rb',-1,235,1,'2017-10-27 04:44:06','2017-10-27 05:44:06',NULL,NULL),(42603,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":200},\"time\":\"2017-10-26T21:44:06-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"What type of Collection do you want to create?\"},{\"note\":\"object type name must be exactly correct\"},{\"input\":{\"var\":\"object_type\",\"label\":\"Object type\",\"default\":\"Stripwell\",\"type\":\"text\"}},{\"input\":{\"var\":\"location\",\"label\":\"Location\",\"default\":\"Bench\",\"type\":\"text\"}}]},{\"operation\":\"next\",\"time\":\"2017-10-26T21:45:01-07:00\",\"inputs\":{\"timestamp\":1509079501.554,\"object_type\":\"E. coli Comp Cell Batch\",\"location\":\"Bench\",\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"Collection Created!\"},{\"note\":\"Made new E. coli Comp Cell Batch\"},{\"note\":\"Collection link <a href=\'/items/99745\' class=\'aquarium-item\' id=\'99745\'>99745</a>\"},{\"note\":\"Now we will populate the collection with samples of your choice\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T21:45:03-07:00\",\"inputs\":{\"timestamp\":1509079503.937,\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"how many samples to add to 99745\"},{\"input\":{\"var\":\"sample\",\"label\":\"Sample id to add\",\"default\":7,\"type\":\"number\"}},{\"input\":{\"var\":\"add\",\"label\":\"how many to add\",\"default\":0,\"type\":\"number\"}},{\"select\":{\"var\":\"continue\",\"label\":\"I want to add a different sample as well\",\"multiple\":false,\"default\":1,\"choices\":[\"Yes\",\"No\"]}},{\"table\":[[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T21:48:19-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}},{\"operation\":\"next\",\"time\":\"2017-10-26T21:48:19-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2017-10-27 04:44:06','2017-10-27 04:48:19','operation.rb',-2,235,1,'2017-10-27 04:44:06','2017-10-27 05:44:06',NULL,NULL),(42604,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":200},\"time\":\"2017-10-26T21:48:54-07:00\"}]','2017-10-27 04:48:54','2017-10-27 04:48:54','operation.rb',-1,235,1,'2017-10-27 04:48:54','2017-10-27 05:48:54',NULL,NULL),(42605,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":200},\"time\":\"2017-10-26T21:48:54-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"What type of Collection do you want to create?\"},{\"note\":\"object type name must be exactly correct\"},{\"input\":{\"var\":\"object_type\",\"label\":\"Object type\",\"default\":\"Stripwell\",\"type\":\"text\"}},{\"input\":{\"var\":\"location\",\"label\":\"Location\",\"default\":\"Bench\",\"type\":\"text\"}}]},{\"operation\":\"next\",\"time\":\"2017-10-26T21:49:22-07:00\",\"inputs\":{\"timestamp\":1509079762.352,\"object_type\":\"E. coli Comp Cell Batch\",\"location\":\"Bench\",\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"Collection Created!\"},{\"note\":\"Made new E. coli Comp Cell Batch\"},{\"note\":\"Collection link <a href=\'/items/99747\' class=\'aquarium-item\' id=\'99747\'>99747</a>\"},{\"note\":\"Now we will populate the collection with samples of your choice\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T21:49:24-07:00\",\"inputs\":{\"timestamp\":1509079764.538,\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"how many samples to add to 99747\"},{\"input\":{\"var\":\"sample\",\"label\":\"Sample id to add\",\"default\":7,\"type\":\"number\"}},{\"input\":{\"var\":\"add\",\"label\":\"how many to add\",\"default\":0,\"type\":\"number\"}},{\"select\":{\"var\":\"continue\",\"label\":\"I want to add a different sample as well\",\"multiple\":false,\"default\":1,\"choices\":[\"Yes\",\"No\"]}},{\"table\":[[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T21:49:38-07:00\",\"inputs\":{\"timestamp\":1509079778.813,\"sample\":20341,\"add\":80,\"continue\":\"Yes\",\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"how many samples to add to 99747\"},{\"input\":{\"var\":\"sample\",\"label\":\"Sample id to add\",\"default\":7,\"type\":\"number\"}},{\"input\":{\"var\":\"add\",\"label\":\"how many to add\",\"default\":0,\"type\":\"number\"}},{\"select\":{\"var\":\"continue\",\"label\":\"I want to add a different sample as well\",\"multiple\":false,\"default\":1,\"choices\":[\"Yes\",\"No\"]}},{\"table}]},{\"operation\":\"next\",\"time\":\"2017-10-26T21:49:49-07:00\",\"inputs\":{\"timestamp\":1509079789.392,\"sample\":20341,\"add\":0,\"continue\":\"No\",\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"Collection finsished and ready to use\"},{\"note\":\"Use the \'edit collection\' protocol to add or remove samples\"},{\"table}]},{\"operation\":\"next\",\"time\":\"2017-10-26T21:49:50-07:00\",\"inputs\":{\"timestamp\":1509079790.833,\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return the Following Additional Item(s)\"},{\"take\":{\"id\":99747,\"location\":\"Bench\",\"name\":\"E. coli Comp Cell Batch\"}}]},{\"operation\":\"next\",\"time\":\"2017-10-26T21:49:51-07:00\",\"inputs\":{\"timestamp\":1509079791.91,\"table_inputs\":[]}},{\"operation\":\"complete\",\"rval\":{}}]','2017-10-27 04:48:54','2017-10-27 04:49:51','operation.rb',-2,235,1,'2017-10-27 04:48:54','2017-10-27 05:48:54',NULL,NULL),(42606,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":183},\"time\":\"2017-10-26T22:07:54-07:00\"}]','2017-10-27 05:07:54','2017-10-27 05:07:54','operation.rb',-1,235,1,'2017-10-27 05:07:54','2017-10-27 06:07:54',NULL,NULL),(42607,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":183},\"time\":\"2017-10-26T22:07:54-07:00\"},{\"operation\":\"error\",\"message\":\"undefined method `input\' for nil:NilClass\",\"backtrace\":[\"(eval):23:in `main\'\",\"/home/gnew/aq_planner/aquarium/lib/krill/manager.rb:125:in `debugger\'\",\"/home/gnew/aq_planner/aquarium/lib/krill/manager.rb:168:in `run\'\",\"/home/gnew/aq_planner/aquarium/app/controllers/plans_controller.rb:221:in `block in debug\'\",\"/home/gnew/aq_planner/aquarium/app/controllers/plans_controller.rb:185:in `each\'\",\"/home/gnew/aq_planner/aquarium/app/controllers/plans_controller.rb:185:in `debug\'\",\"/home/gnew/.rvm/gems/ruby-2.2.0@aquarium/gems/actionpack-3.2.22/lib/action_controller/metal/implicit_render.rb:4:in `send_action\'\",\"/home/gnew/.rvm/gems/ruby-2.2.0@aquarium/gems/actionpack-3.2.22/lib/abstract_controller/base.rb:167:in `process_action\'\",\"/home/gnew/.rvm/gems/ruby-2.2.0@aquarium/gems/actionpack-3.2.22/lib/action_controller/metal/rendering.rb:10:in `process_action\'\",\"/home/gnew/.rvm/gems/ruby-2.2.0@aquarium/gems/actionpack-3.2.22/lib/abstract_controller/callbacks.rb:18:in `block in process_action\'\"]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:07:54-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2017-10-27 05:07:54','2017-10-27 05:07:54','operation.rb',-2,235,1,'2017-10-27 05:07:54','2017-10-27 06:07:54',NULL,NULL),(42608,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":184},\"time\":\"2017-10-26T22:07:54-07:00\"}]','2017-10-27 05:07:54','2017-10-27 05:07:54','operation.rb',-1,235,1,'2017-10-27 05:07:54','2017-10-27 06:07:54',NULL,NULL),(42609,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":184},\"time\":\"2017-10-26T22:07:54-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Debug slide (3 args)\"},{\"note\":\"String: wha\"},{\"note\":\"String: bro\"},{\"note\":\"NilClass: \"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:07:54-07:00\",\"inputs\":{\"timestamp\":1509080874000}},{\"operation\":\"display\",\"content\":[{\"note\":\"yes\"},{\"note\":\"String\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:07:54-07:00\",\"inputs\":{\"timestamp\":1509080874000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Prepare to order primer\"},{\"check\":\"Go to the <a href=\'https://www.idtdna.com/site/account\' target=\'_blank\'>IDT website</a>, log in with the lab account. (Username: klavins_lab, password is the lab general password).\"},{\"warning\":\"Ensure that you are logged in to this exact username and password!\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:07:54-07:00\",\"inputs\":{\"timestamp\":1509080874000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Create an IDT DNA oligos order\"},{\"check\":\"Click Custom DNA Oligos, click Bulk Input. Copy paste the following table and then click the Update button.\"},{\"table\":[[\"20339 my first reverse primer\",\"ACATTGAGGGAGTCATCGACGAGCAGCATTCGAGCGACTACGACATC\"]]},{\"check\":\"Click Add to Order, review the shopping cart to double check that you entered correctly. There should be 1 primers in the cart.\"},{\"check\":\"Click Checkout, then click Continue.\"},{\"check\":\"Enter the payment information, click the oligo card tab, select the Card1 in Choose Payment and then click Submit Order.\"},{\"check\":\"Go back to the main page, let it sit for 5-10 minutes, return and refresh, and find the order number for the order you just placed.\"},{\"input\":{\"var\":\"order_number\",\"label\":\"Enter the IDT order number below\",\"default\":100,\"type\":\"text\"}}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:07:54-07:00\",\"inputs\":{\"order_number\":100,\"timestamp\":1509080874000}},{\"operation\":\"complete\",\"rval\":{}}]','2017-10-27 05:07:54','2017-10-27 05:07:54','operation.rb',-2,235,1,'2017-10-27 05:07:54','2017-10-27 06:07:54',NULL,NULL),(42610,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":183},\"time\":\"2017-10-26T22:09:32-07:00\"}]','2017-10-27 05:09:32','2017-10-27 05:09:32','operation.rb',-1,235,1,'2017-10-27 05:09:32','2017-10-27 06:09:32',NULL,NULL),(42611,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":183},\"time\":\"2017-10-26T22:09:32-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Boxes Required\"},{\"note\":\"You will need the following boxes from the freezer(s)\"},{\"table\":[[{\"content\":\"M20.0.0\",\"check\":true}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:09:33-07:00\",\"inputs\":{\"timestamp\":1509080973000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Take from M20.0.0\"},{\"note\":\"Collect Item(s)\"},{\"table\":[[{\"content\":0,\"class\":\"td-empty-slot\"},{\"content\":99736,\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":99740,\"class\":\"td-filled-slot\",\"check\":true},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"}],[{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"},{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"}],[{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"},{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"}],[{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"}],[{\"content\":36,\"class\":\"td-empty-slot\"},{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"}],[{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"},{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"}],[{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"},{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"}],[{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"}],[{\"content\":72,\"class\":\"td-empty-slot\"},{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:09:33-07:00\",\"inputs\":{\"timestamp\":1509080973000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Boxes Required\"},{\"note\":\"You will need the following boxes from the freezer(s)\"},{\"table\":[[{\"content\":\"M20.0.0\",\"check\":true}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:09:33-07:00\",\"inputs\":{\"timestamp\":1509080973000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Take from M20.0.0\"},{\"note\":\"Collect Item(s)\"},{\"table\":[[{\"content\":0,\"class\":\"td-empty-slot\"},{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":99741,\"class\":\"td-filled-slot\",\"check\":true},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"}],[{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"},{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"}],[{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"},{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"}],[{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"}],[{\"content\":36,\"class\":\"td-empty-slot\"},{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"}],[{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"},{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"}],[{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"},{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"}],[{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"}],[{\"content\":72,\"class\":\"td-empty-slot\"},{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:09:33-07:00\",\"inputs\":{\"timestamp\":1509080973000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Verify enough volume of each Forward Primer and Reverse Primer exists, or note if contamination is present\"},{\"select\":{\"var\":\"99736\",\"label\":\"Is there at least 5.0 µL of 99736?\",\"multiple\":false,\"default\":0,\"choices\":[\"Yes\",\"No\",\"Contamination is present\"]}}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:09:33-07:00\",\"inputs\":{\"99736\":\"Yes\",\"timestamp\":1509080973000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Label and prepare stripwells\"},{\"note\":\"Label stripwells, and pipette 19 µL of molecular grade water into each based on the following table:\"},{\"table\":[[\"Stripwell\",\"Wells to pipette\"],[\"99750 (6 wells)\",{\"content\":\"1 - 1\",\"check\":true}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:09:36-07:00\",\"inputs\":{\"timestamp\":1509080976000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Load templates for PCR #1\"},{\"table\":[[\"Stripwell\",\"Well\",\"Template, 1 µL\"],[99750,1,{\"content\":99740,\"check\":true}]]},{\"warning\":\"USE A FRESH PIPETTE TIP FOR EACH TRANSFER.\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:09:36-07:00\",\"inputs\":{\"timestamp\":1509080976000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Load primers for PCR #1\"},{\"table\":[[\"Stripwell\",\"Well\",\"Forward Primer, 2.5 µL\",\"Reverse Primer, 2.5 µL\"],[99750,1,{\"content\":99736,\"check\":true},{\"content\":99736,\"check\":true}]]},{\"warning\":\"USE A FRESH PIPETTE TIP FOR EACH TRANSFER.\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:09:36-07:00\",\"inputs\":{\"timestamp\":1509080976000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Add Master Mix\"},{\"note\":\"Pipette 25 µL of master mix (<a href=\'/items/99741\' class=\'aquarium-item\' id=\'99741\'>99741</a>) into stripwells based on the following table:\"},{\"table\":[[\"Stripwell\",\"Wells to pipette\"],[\"99750 (6 wells)\",{\"content\":\"1 - 1\",\"check\":true}]]},{\"warning\":\"USE A NEW PIPETTE TIP FOR EACH WELL AND PIPETTE UP AND DOWN TO MIX.\"},{\"check\":\"Cap each stripwell. Press each one very hard to make sure it is sealed.\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:09:36-07:00\",\"inputs\":{\"timestamp\":1509080976000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Start PCR #1 at 65.0 C\"},{\"check\":\"Place the stripwell(s) <a href=\'/items/99750\' class=\'aquarium-item\' id=\'99750\'>99750</a> into an available thermal cycler and close the lid.\"},{\"input\":{\"var\":\"name\",\"label\":\"Enter the name of the thermocycler used\",\"default\":\"TC1\",\"type\":\"text\"}},{\"check\":\"Click \'Home\' then click \'Saved Protocol\'. Choose \'YY\' and then \'CLONEPCR\'.\"},{\"check\":\"Set the anneal temperature to 65.0. This is the 3rd temperature.\"},{\"check\":\"Set the 4th time (extension time) to be 03:00.\"},{\"check\":\"Press \'Run\' and select 50 µL.\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:09:36-07:00\",\"inputs\":{\"name\":\"TC1\",\"timestamp\":1509080976000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Boxes Required\"},{\"note\":\"You will need the following boxes from the freezer(s)\"},{\"table\":[[{\"content\":\"M20.0.0\",\"check\":true}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:09:36-07:00\",\"inputs\":{\"timestamp\":1509080976000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return to M20.0.0\"},{\"note\":\"Return Item(s)\"},{\"table\":[[{\"content\":0,\"class\":\"td-empty-slot\"},{\"content\":99736,\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":99740,\"class\":\"td-filled-slot\",\"check\":true},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"}],[{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"},{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"}],[{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"},{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"}],[{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"}],[{\"content\":36,\"class\":\"td-empty-slot\"},{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"}],[{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"},{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"}],[{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"},{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"}],[{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"}],[{\"content\":72,\"class\":\"td-empty-slot\"},{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:09:36-07:00\",\"inputs\":{\"timestamp\":1509080976000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return the Following Item(s)\"},{\"take\":{\"id\":99741,\"location\":\"M20.0.0.6\",\"name\":\"Enzyme Stock\",\"sample\":\"Kapa HF Master Mix\",\"type\":\"Enzyme\"}}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:09:36-07:00\",\"inputs\":{\"timestamp\":1509080976000}},{\"operation\":\"complete\",\"rval\":{}}]','2017-10-27 05:09:32','2017-10-27 05:09:36','operation.rb',-2,235,1,'2017-10-27 05:09:32','2017-10-27 06:09:32',NULL,NULL),(42612,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":185},\"time\":\"2017-10-26T22:09:36-07:00\"}]','2017-10-27 05:09:36','2017-10-27 05:09:36','operation.rb',-1,235,1,'2017-10-27 05:09:36','2017-10-27 06:09:36',NULL,NULL),(42613,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":185},\"time\":\"2017-10-26T22:09:36-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Go the EE office to pick up primers\"},{\"note\":\"Abort this protocol if no primer has shown up. It will automatically rescheduled.\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:09:37-07:00\",\"inputs\":{\"timestamp\":1509080977000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Quick spin down all the primer tubes\"},{\"note\":\"Find the order with sales order (or supplier ref) number 100\"},{\"note\":\"Put all the primer tubes in a table top centrifuge to spin down for 3 seconds.\"},{\"warning\":\"Make sure to balance!\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:09:37-07:00\",\"inputs\":{\"timestamp\":1509080977000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Enter the nMoles of the primer\"},{\"note\":\"Enter the number of moles for each primer, in nm. This is written toward the bottom of the tube, below the MW.\"},{\"note\":\"The id of the primer is listed before the primer\'s name on the side of the tube.\"},{\"table\":[[\"Primer Sample ID (input)\",\"nMoles\"],[20339,{\"type\":\"number\",\"operation_id\":2994,\"key\":\"n_moles\",\"default\":10}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:09:37-07:00\",\"inputs\":{\"timestamp\":1509080977000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Label and rehydrate\"},{\"note\":\"Label each primer tube with the ids shown in Primer Stock ids and rehydrate with volume of TE shown in Rehydrate\"},{\"table\":[[\"Primer Sample ID (input)\",\"Primer Stock Item ID (output)\",\"Rehydrate (uL of TE)\"],[20339,99752,{\"content\":100,\"check\":true}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:09:37-07:00\",\"inputs\":{\"timestamp\":1509080977000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Vortex and centrifuge\"},{\"note\":\"Wait one minute for the primer to dissolve in TE.\"},{\"note\":\"Vortex each tube on table top vortexer for 5 seconds and then quick spin for 2 seconds on table top centrifuge.\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:09:37-07:00\",\"inputs\":{\"timestamp\":1509080977000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Grab 1 1.5 mL tubes\"},{\"check\":\"Grab 1 1.5 mL tubes, label with following ids: 99751\"},{\"check\":\"Add 90 uL of water into each above tube.\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:09:37-07:00\",\"inputs\":{\"timestamp\":1509080977000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Make primer aliquots\"},{\"note\":\"Add 10 uL from primer stocks into each primer aliquot tube using the following table.\"},{\"table\":[[\"Primer Stock (10 L)\",\"Primer Aliquot Item ID (output)\"],[99752,{\"content\":99751,\"check\":true}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:09:37-07:00\",\"inputs\":{\"timestamp\":1509080977000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Boxes Required\"},{\"note\":\"You will need the following boxes from the freezer(s)\"},{\"table\":[[{\"content\":\"M20.0.0\",\"check\":true}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:09:37-07:00\",\"inputs\":{\"timestamp\":1509080977000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return to M20.0.0\"},{\"note\":\"Return Item(s)\"},{\"table\":[[{\"content\":0,\"class\":\"td-empty-slot\"},{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":99751,\"class\":\"td-filled-slot\",\"check\":true}],[{\"content\":99752,\"class\":\"td-filled-slot\",\"check\":true},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"},{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"}],[{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"},{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"}],[{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"}],[{\"content\":36,\"class\":\"td-empty-slot\"},{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"}],[{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"},{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"}],[{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"},{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"}],[{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"}],[{\"content\":72,\"class\":\"td-empty-slot\"},{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:09:37-07:00\",\"inputs\":{\"timestamp\":1509080977000}},{\"operation\":\"complete\",\"rval\":{}}]','2017-10-27 05:09:36','2017-10-27 05:09:37','operation.rb',-2,235,1,'2017-10-27 05:09:36','2017-10-27 06:09:36',NULL,NULL),(42614,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":187},\"time\":\"2017-10-26T22:09:44-07:00\"}]','2017-10-27 05:09:44','2017-10-27 05:09:44','operation.rb',-1,235,1,'2017-10-27 05:09:44','2017-10-27 06:09:44',NULL,NULL),(42615,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":187},\"time\":\"2017-10-26T22:09:44-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Pour gel\"},{\"check\":\"Grab a flask from on top of the microwave M2.\"},{\"check\":\"Using a digital scale, measure out 0.35 g (+/- 0.0175 g) of agarose powder and add it to the flask.\"},{\"check\":\"Get a graduated cylinder from on top of the microwave. Measure and add 50 mL of 1X TAE from jug J2 to the flask.\"},{\"check\":\"Microwave 70 seconds on high in microwave M2, then swirl. The agarose should now be in solution.\"},{\"note\":\"If it is not in solution, microwave 7 seconds on high, then swirl. Repeat until dissolved.\"},{\"warning\":\"Work in the gel room, wear gloves and eye protection all the time\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:09:44-07:00\",\"inputs\":{\"timestamp\":1509080984000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Add 5 µL GelGreen\"},{\"note\":\"Using a 10 µL pipetter, take up 5 µL of GelGreen into the pipet tip. Expel the GelGreen directly into the molten agar (under the surface), then swirl to mix.\"},{\"warning\":\"GelGreen is supposedly safe, but stains DNA and can transit cell membranes (limit your exposure).\"},{\"warning\":\"GelGreen is photolabile. Limit its exposure to light by putting it back in the box.\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:09:44-07:00\",\"inputs\":{\"timestamp\":1509080984000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gel Number 1, add top comb\"},{\"check\":\"Go get a 49 mL Gel Box With Casting Tray (clean)\"},{\"check\":\"Retrieve a 6-well purple comb from A7.325\"},{\"check\":\"Position the gel box with the electrodes facing away from you. Add a purple comb to the side of the casting tray nearest the side of the gel box.\"},{\"check\":\"Put the thick side of the comb down.\"},{\"note\":\"Make sure the comb is well-situated in the groove of the casting tray.\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:09:44-07:00\",\"inputs\":{\"timestamp\":1509080984000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gel Number 1, add bottom comb\"},{\"check\":\"Retrieve a 6-well purple comb from A7.325\"},{\"check\":\"Position the gel box with the electrodes facing away from you. Add a purple comb to the center of the casting tray.\"},{\"check\":\"Put the thick side of the comb down.\"},{\"note\":\"Make sure the comb is well-situated in the groove of the casting tray.\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:09:44-07:00\",\"inputs\":{\"timestamp\":1509080984000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Pour and label the gel\"},{\"note\":\"Using a gel pouring autoclave glove, pour agarose from one flask into the casting tray. \\n                  Pour slowly and in a corner for best results. Pop any bubbles with a 10 µL pipet tip.\"},{\"note\":\"Write id 99753 on piece of lab tape and affix it to the side of the gel box.\"},{\"note\":\"Leave the gel to location A7.325 to solidify.\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:09:44-07:00\",\"inputs\":{\"timestamp\":1509080984000}},{\"operation\":\"complete\",\"rval\":{}}]','2017-10-27 05:09:44','2017-10-27 05:09:44','operation.rb',-2,235,1,'2017-10-27 05:09:44','2017-10-27 06:09:44',NULL,NULL),(42616,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":186},\"time\":\"2017-10-26T22:09:48-07:00\"}]','2017-10-27 05:09:48','2017-10-27 05:09:48','operation.rb',-1,235,1,'2017-10-27 05:09:48','2017-10-27 06:09:48',NULL,NULL),(42617,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":186},\"time\":\"2017-10-26T22:09:48-07:00\"},{\"operation\":\"error\",\"message\":\"undefined method `in\' for nil:NilClass\",\"backtrace\":[\"(eval):81:in `main\'\",\"/home/gnew/aq_planner/aquarium/lib/krill/manager.rb:125:in `debugger\'\",\"/home/gnew/aq_planner/aquarium/lib/krill/manager.rb:168:in `run\'\",\"/home/gnew/aq_planner/aquarium/app/controllers/plans_controller.rb:221:in `block in debug\'\",\"/home/gnew/aq_planner/aquarium/app/controllers/plans_controller.rb:185:in `each\'\",\"/home/gnew/aq_planner/aquarium/app/controllers/plans_controller.rb:185:in `debug\'\",\"/home/gnew/.rvm/gems/ruby-2.2.0@aquarium/gems/actionpack-3.2.22/lib/action_controller/metal/implicit_render.rb:4:in `send_action\'\",\"/home/gnew/.rvm/gems/ruby-2.2.0@aquarium/gems/actionpack-3.2.22/lib/abstract_controller/base.rb:167:in `process_action\'\",\"/home/gnew/.rvm/gems/ruby-2.2.0@aquarium/gems/actionpack-3.2.22/lib/action_controller/metal/rendering.rb:10:in `process_action\'\",\"/home/gnew/.rvm/gems/ruby-2.2.0@aquarium/gems/actionpack-3.2.22/lib/abstract_controller/callbacks.rb:18:in `block in process_action\'\"]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:09:49-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2017-10-27 05:09:48','2017-10-27 05:09:49','operation.rb',-2,235,1,'2017-10-27 05:09:48','2017-10-27 06:09:48',NULL,NULL),(42618,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":186},\"time\":\"2017-10-26T22:15:23-07:00\"}]','2017-10-27 05:15:23','2017-10-27 05:15:23','operation.rb',-1,235,1,'2017-10-27 05:15:23','2017-10-27 06:15:23',NULL,NULL),(42619,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":186},\"time\":\"2017-10-26T22:15:23-07:00\"},{\"operation\":\"error\",\"message\":\"Called id for nil, which would mistakenly be 8 -- if you really wanted the id of nil, use object_id\",\"backtrace\":[\"(eval):83:in `main\'\",\"/home/gnew/aq_planner/aquarium/lib/krill/manager.rb:125:in `debugger\'\",\"/home/gnew/aq_planner/aquarium/lib/krill/manager.rb:168:in `run\'\",\"/home/gnew/aq_planner/aquarium/app/controllers/plans_controller.rb:221:in `block in debug\'\",\"/home/gnew/aq_planner/aquarium/app/controllers/plans_controller.rb:185:in `each\'\",\"/home/gnew/aq_planner/aquarium/app/controllers/plans_controller.rb:185:in `debug\'\",\"/home/gnew/.rvm/gems/ruby-2.2.0@aquarium/gems/actionpack-3.2.22/lib/action_controller/metal/implicit_render.rb:4:in `send_action\'\",\"/home/gnew/.rvm/gems/ruby-2.2.0@aquarium/gems/actionpack-3.2.22/lib/abstract_controller/base.rb:167:in `process_action\'\",\"/home/gnew/.rvm/gems/ruby-2.2.0@aquarium/gems/actionpack-3.2.22/lib/action_controller/metal/rendering.rb:10:in `process_action\'\",\"/home/gnew/.rvm/gems/ruby-2.2.0@aquarium/gems/actionpack-3.2.22/lib/abstract_controller/callbacks.rb:18:in `block in process_action\'\"]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:15:23-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2017-10-27 05:15:23','2017-10-27 05:15:23','operation.rb',-2,235,1,'2017-10-27 05:15:23','2017-10-27 06:15:23',NULL,NULL),(42620,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":186},\"time\":\"2017-10-26T22:18:27-07:00\"}]','2017-10-27 05:18:27','2017-10-27 05:18:27','operation.rb',-1,235,1,'2017-10-27 05:18:27','2017-10-27 06:18:27',NULL,NULL),(42621,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":186},\"time\":\"2017-10-26T22:18:27-07:00\"},{\"operation\":\"error\",\"message\":\"undefined method `first\' for nil:NilClass\",\"backtrace\":[\"(eval):83:in `main\'\",\"/home/gnew/aq_planner/aquarium/lib/krill/manager.rb:125:in `debugger\'\",\"/home/gnew/aq_planner/aquarium/lib/krill/manager.rb:168:in `run\'\",\"/home/gnew/aq_planner/aquarium/app/controllers/plans_controller.rb:221:in `block in debug\'\",\"/home/gnew/aq_planner/aquarium/app/controllers/plans_controller.rb:185:in `each\'\",\"/home/gnew/aq_planner/aquarium/app/controllers/plans_controller.rb:185:in `debug\'\",\"/home/gnew/.rvm/gems/ruby-2.2.0@aquarium/gems/actionpack-3.2.22/lib/action_controller/metal/implicit_render.rb:4:in `send_action\'\",\"/home/gnew/.rvm/gems/ruby-2.2.0@aquarium/gems/actionpack-3.2.22/lib/abstract_controller/base.rb:167:in `process_action\'\",\"/home/gnew/.rvm/gems/ruby-2.2.0@aquarium/gems/actionpack-3.2.22/lib/action_controller/metal/rendering.rb:10:in `process_action\'\",\"/home/gnew/.rvm/gems/ruby-2.2.0@aquarium/gems/actionpack-3.2.22/lib/abstract_controller/callbacks.rb:18:in `block in process_action\'\"]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:18:27-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2017-10-27 05:18:27','2017-10-27 05:18:27','operation.rb',-2,235,1,'2017-10-27 05:18:27','2017-10-27 06:18:27',NULL,NULL),(42622,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":186},\"time\":\"2017-10-26T22:21:29-07:00\"}]','2017-10-27 05:21:29','2017-10-27 05:21:29','operation.rb',-1,235,1,'2017-10-27 05:21:29','2017-10-27 06:21:29',NULL,NULL),(42623,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":186},\"time\":\"2017-10-26T22:21:29-07:00\"},{\"operation\":\"error\",\"message\":\"undefined method `first\' for nil:NilClass\",\"backtrace\":[\"(eval):83:in `main\'\",\"/home/gnew/aq_planner/aquarium/lib/krill/manager.rb:125:in `debugger\'\",\"/home/gnew/aq_planner/aquarium/lib/krill/manager.rb:168:in `run\'\",\"/home/gnew/aq_planner/aquarium/app/controllers/plans_controller.rb:221:in `block in debug\'\",\"/home/gnew/aq_planner/aquarium/app/controllers/plans_controller.rb:185:in `each\'\",\"/home/gnew/aq_planner/aquarium/app/controllers/plans_controller.rb:185:in `debug\'\",\"/home/gnew/.rvm/gems/ruby-2.2.0@aquarium/gems/actionpack-3.2.22/lib/action_controller/metal/implicit_render.rb:4:in `send_action\'\",\"/home/gnew/.rvm/gems/ruby-2.2.0@aquarium/gems/actionpack-3.2.22/lib/abstract_controller/base.rb:167:in `process_action\'\",\"/home/gnew/.rvm/gems/ruby-2.2.0@aquarium/gems/actionpack-3.2.22/lib/action_controller/metal/rendering.rb:10:in `process_action\'\",\"/home/gnew/.rvm/gems/ruby-2.2.0@aquarium/gems/actionpack-3.2.22/lib/abstract_controller/callbacks.rb:18:in `block in process_action\'\"]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:21:30-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2017-10-27 05:21:29','2017-10-27 05:21:30','operation.rb',-2,235,1,'2017-10-27 05:21:29','2017-10-27 06:21:29',NULL,NULL),(42624,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":186},\"time\":\"2017-10-26T22:25:17-07:00\"}]','2017-10-27 05:25:17','2017-10-27 05:25:17','operation.rb',-1,235,1,'2017-10-27 05:25:17','2017-10-27 06:25:17',NULL,NULL),(42625,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":186},\"time\":\"2017-10-26T22:25:17-07:00\"},{\"operation\":\"error\",\"message\":\"undefined method `features\' for nil:NilClass\",\"backtrace\":[\"/home/gnew/aq_planner/aquarium/lib/krill/inventory.rb:168:in `block in take\'\",\"/home/gnew/aq_planner/aquarium/lib/krill/inventory.rb:168:in `collect\'\",\"/home/gnew/aq_planner/aquarium/lib/krill/inventory.rb:168:in `take\'\",\"(eval):85:in `main\'\",\"/home/gnew/aq_planner/aquarium/lib/krill/manager.rb:125:in `debugger\'\",\"/home/gnew/aq_planner/aquarium/lib/krill/manager.rb:168:in `run\'\",\"/home/gnew/aq_planner/aquarium/app/controllers/plans_controller.rb:221:in `block in debug\'\",\"/home/gnew/aq_planner/aquarium/app/controllers/plans_controller.rb:185:in `each\'\",\"/home/gnew/aq_planner/aquarium/app/controllers/plans_controller.rb:185:in `debug\'\",\"/home/gnew/.rvm/gems/ruby-2.2.0@aquarium/gems/actionpack-3.2.22/lib/action_controller/metal/implicit_render.rb:4:in `send_action\'\"]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:25:18-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2017-10-27 05:25:17','2017-10-27 05:25:18','operation.rb',-2,235,1,'2017-10-27 05:25:17','2017-10-27 06:25:17',NULL,NULL),(42638,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":183},\"time\":\"2017-10-26T22:35:08-07:00\"}]','2017-10-27 05:35:08','2017-10-27 05:35:08','operation.rb',-1,235,1,'2017-10-27 05:35:08','2017-10-27 06:35:08',NULL,NULL),(42639,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":183},\"time\":\"2017-10-26T22:35:08-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Boxes Required\"},{\"note\":\"You will need the following boxes from the freezer(s)\"},{\"table\":[[{\"content\":\"M20.0.0\",\"check\":true}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:08-07:00\",\"inputs\":{\"timestamp\":1509082508000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Take from M20.0.0\"},{\"note\":\"Collect Item(s)\"},{\"table\":[[{\"content\":0,\"class\":\"td-empty-slot\"},{\"content\":99736,\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":99738,\"class\":\"td-filled-slot\",\"check\":true},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":99740,\"class\":\"td-filled-slot\",\"check\":true},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"}],[{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"},{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"}],[{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"},{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"}],[{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"}],[{\"content\":36,\"class\":\"td-empty-slot\"},{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"}],[{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"},{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"}],[{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"},{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"}],[{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"}],[{\"content\":72,\"class\":\"td-empty-slot\"},{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:08-07:00\",\"inputs\":{\"timestamp\":1509082508000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Boxes Required\"},{\"note\":\"You will need the following boxes from the freezer(s)\"},{\"table\":[[{\"content\":\"M20.0.0\",\"check\":true}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:08-07:00\",\"inputs\":{\"timestamp\":1509082508000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Take from M20.0.0\"},{\"note\":\"Collect Item(s)\"},{\"table\":[[{\"content\":0,\"class\":\"td-empty-slot\"},{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":99741,\"class\":\"td-filled-slot\",\"check\":true},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"}],[{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"},{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"}],[{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"},{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"}],[{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"}],[{\"content\":36,\"class\":\"td-empty-slot\"},{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"}],[{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"},{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"}],[{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"},{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"}],[{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"}],[{\"content\":72,\"class\":\"td-empty-slot\"},{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:08-07:00\",\"inputs\":{\"timestamp\":1509082508000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Verify enough volume of each Forward Primer and Reverse Primer exists, or note if contamination is present\"},{\"select\":{\"var\":\"99736\",\"label\":\"Is there at least 2.5 µL of 99736?\",\"multiple\":false,\"default\":0,\"choices\":[\"Yes\",\"No\",\"Contamination is present\"]}},{\"select\":{\"var\":\"99738\",\"label\":\"Is there at least 2.5 µL of 99738?\",\"multiple\":false,\"default\":0,\"choices\":[\"Yes\",\"No\",\"Contamination is present\"]}}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:08-07:00\",\"inputs\":{\"99736\":\"Yes\",\"99738\":\"Yes\",\"timestamp\":1509082508000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Label and prepare stripwells\"},{\"note\":\"Label stripwells, and pipette 19 µL of molecular grade water into each based on the following table:\"},{\"table\":[[\"Stripwell\",\"Wells to pipette\"],[\"99772 (6 wells)\",{\"content\":\"1 - 1\",\"check\":true}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:12-07:00\",\"inputs\":{\"timestamp\":1509082512000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Load templates for PCR #1\"},{\"table\":[[\"Stripwell\",\"Well\",\"Template, 1 µL\"],[99772,1,{\"content\":99740,\"check\":true}]]},{\"warning\":\"USE A FRESH PIPETTE TIP FOR EACH TRANSFER.\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:12-07:00\",\"inputs\":{\"timestamp\":1509082512000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Load primers for PCR #1\"},{\"table\":[[\"Stripwell\",\"Well\",\"Forward Primer, 2.5 µL\",\"Reverse Primer, 2.5 µL\"],[99772,1,{\"content\":99736,\"check\":true},{\"content\":99738,\"check\":true}]]},{\"warning\":\"USE A FRESH PIPETTE TIP FOR EACH TRANSFER.\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:12-07:00\",\"inputs\":{\"timestamp\":1509082512000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Add Master Mix\"},{\"note\":\"Pipette 25 µL of master mix (<a href=\'/items/99741\' class=\'aquarium-item\' id=\'99741\'>99741</a>) into stripwells based on the following table:\"},{\"table\":[[\"Stripwell\",\"Wells to pipette\"],[\"99772 (6 wells)\",{\"content\":\"1 - 1\",\"check\":true}]]},{\"warning\":\"USE A NEW PIPETTE TIP FOR EACH WELL AND PIPETTE UP AND DOWN TO MIX.\"},{\"check\":\"Cap each stripwell. Press each one very hard to make sure it is sealed.\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:12-07:00\",\"inputs\":{\"timestamp\":1509082512000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Start PCR #1 at 65.0 C\"},{\"check\":\"Place the stripwell(s) <a href=\'/items/99772\' class=\'aquarium-item\' id=\'99772\'>99772</a> into an available thermal cycler and close the lid.\"},{\"input\":{\"var\":\"name\",\"label\":\"Enter the name of the thermocycler used\",\"default\":\"TC1\",\"type\":\"text\"}},{\"check\":\"Click \'Home\' then click \'Saved Protocol\'. Choose \'YY\' and then \'CLONEPCR\'.\"},{\"check\":\"Set the anneal temperature to 65.0. This is the 3rd temperature.\"},{\"check\":\"Set the 4th time (extension time) to be 03:00.\"},{\"check\":\"Press \'Run\' and select 50 µL.\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:12-07:00\",\"inputs\":{\"name\":\"TC1\",\"timestamp\":1509082512000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Boxes Required\"},{\"note\":\"You will need the following boxes from the freezer(s)\"},{\"table\":[[{\"content\":\"M20.0.0\",\"check\":true}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:12-07:00\",\"inputs\":{\"timestamp\":1509082512000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return to M20.0.0\"},{\"note\":\"Return Item(s)\"},{\"table\":[[{\"content\":0,\"class\":\"td-empty-slot\"},{\"content\":99736,\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":99738,\"class\":\"td-filled-slot\",\"check\":true},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":99740,\"class\":\"td-filled-slot\",\"check\":true},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"}],[{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"},{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"}],[{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"},{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"}],[{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"}],[{\"content\":36,\"class\":\"td-empty-slot\"},{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"}],[{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"},{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"}],[{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"},{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"}],[{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"}],[{\"content\":72,\"class\":\"td-empty-slot\"},{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:12-07:00\",\"inputs\":{\"timestamp\":1509082512000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return the Following Item(s)\"},{\"take\":{\"id\":99741,\"location\":\"M20.0.0.6\",\"name\":\"Enzyme Stock\",\"sample\":\"Kapa HF Master Mix\",\"type\":\"Enzyme\"}}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:12-07:00\",\"inputs\":{\"timestamp\":1509082512000}},{\"operation\":\"complete\",\"rval\":{}}]','2017-10-27 05:35:08','2017-10-27 05:35:12','operation.rb',-2,235,1,'2017-10-27 05:35:08','2017-10-27 06:35:08',NULL,NULL),(42640,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":184},\"time\":\"2017-10-26T22:35:12-07:00\"}]','2017-10-27 05:35:12','2017-10-27 05:35:12','operation.rb',-1,235,1,'2017-10-27 05:35:12','2017-10-27 06:35:12',NULL,NULL),(42641,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":184},\"time\":\"2017-10-26T22:35:12-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Debug slide (3 args)\"},{\"note\":\"String: wha\"},{\"note\":\"String: bro\"},{\"note\":\"NilClass: \"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:12-07:00\",\"inputs\":{\"timestamp\":1509082512000}},{\"operation\":\"display\",\"content\":[{\"note\":\"yes\"},{\"note\":\"String\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:12-07:00\",\"inputs\":{\"timestamp\":1509082512000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Prepare to order primer\"},{\"check\":\"Go to the <a href=\'https://www.idtdna.com/site/account\' target=\'_blank\'>IDT website</a>, log in with the lab account. (Username: klavins_lab, password is the lab general password).\"},{\"warning\":\"Ensure that you are logged in to this exact username and password!\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:12-07:00\",\"inputs\":{\"timestamp\":1509082512000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Create an IDT DNA oligos order\"},{\"check\":\"Click Custom DNA Oligos, click Bulk Input. Copy paste the following table and then click the Update button.\"},{\"table\":[[\"20339 my first reverse primer\",\"ACATTGAGGGAGTCATCGACGAGCAGCATTCGAGCGACTACGACATC\"]]},{\"check\":\"Click Add to Order, review the shopping cart to double check that you entered correctly. There should be 1 primers in the cart.\"},{\"check\":\"Click Checkout, then click Continue.\"},{\"check\":\"Enter the payment information, click the oligo card tab, select the Card1 in Choose Payment and then click Submit Order.\"},{\"check\":\"Go back to the main page, let it sit for 5-10 minutes, return and refresh, and find the order number for the order you just placed.\"},{\"input\":{\"var\":\"order_number\",\"label\":\"Enter the IDT order number below\",\"default\":100,\"type\":\"text\"}}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:12-07:00\",\"inputs\":{\"order_number\":100,\"timestamp\":1509082512000}},{\"operation\":\"complete\",\"rval\":{}}]','2017-10-27 05:35:12','2017-10-27 05:35:12','operation.rb',-2,235,1,'2017-10-27 05:35:12','2017-10-27 06:35:12',NULL,NULL),(42642,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":187},\"time\":\"2017-10-26T22:35:24-07:00\"}]','2017-10-27 05:35:24','2017-10-27 05:35:24','operation.rb',-1,235,1,'2017-10-27 05:35:24','2017-10-27 06:35:24',NULL,NULL),(42643,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":187},\"time\":\"2017-10-26T22:35:24-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Pour gel\"},{\"check\":\"Grab a flask from on top of the microwave M2.\"},{\"check\":\"Using a digital scale, measure out 0.35 g (+/- 0.0175 g) of agarose powder and add it to the flask.\"},{\"check\":\"Get a graduated cylinder from on top of the microwave. Measure and add 50 mL of 1X TAE from jug J2 to the flask.\"},{\"check\":\"Microwave 70 seconds on high in microwave M2, then swirl. The agarose should now be in solution.\"},{\"note\":\"If it is not in solution, microwave 7 seconds on high, then swirl. Repeat until dissolved.\"},{\"warning\":\"Work in the gel room, wear gloves and eye protection all the time\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:24-07:00\",\"inputs\":{\"timestamp\":1509082524000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Add 5 µL GelGreen\"},{\"note\":\"Using a 10 µL pipetter, take up 5 µL of GelGreen into the pipet tip. Expel the GelGreen directly into the molten agar (under the surface), then swirl to mix.\"},{\"warning\":\"GelGreen is supposedly safe, but stains DNA and can transit cell membranes (limit your exposure).\"},{\"warning\":\"GelGreen is photolabile. Limit its exposure to light by putting it back in the box.\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:24-07:00\",\"inputs\":{\"timestamp\":1509082524000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gel Number 1, add top comb\"},{\"check\":\"Go get a 49 mL Gel Box With Casting Tray (clean)\"},{\"check\":\"Retrieve a 6-well purple comb from A7.325\"},{\"check\":\"Position the gel box with the electrodes facing away from you. Add a purple comb to the side of the casting tray nearest the side of the gel box.\"},{\"check\":\"Put the thick side of the comb down.\"},{\"note\":\"Make sure the comb is well-situated in the groove of the casting tray.\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:24-07:00\",\"inputs\":{\"timestamp\":1509082524000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gel Number 1, add bottom comb\"},{\"check\":\"Retrieve a 6-well purple comb from A7.325\"},{\"check\":\"Position the gel box with the electrodes facing away from you. Add a purple comb to the center of the casting tray.\"},{\"check\":\"Put the thick side of the comb down.\"},{\"note\":\"Make sure the comb is well-situated in the groove of the casting tray.\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:24-07:00\",\"inputs\":{\"timestamp\":1509082524000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Pour and label the gel\"},{\"note\":\"Using a gel pouring autoclave glove, pour agarose from one flask into the casting tray. \\n                  Pour slowly and in a corner for best results. Pop any bubbles with a 10 µL pipet tip.\"},{\"note\":\"Write id 99774 on piece of lab tape and affix it to the side of the gel box.\"},{\"note\":\"Leave the gel to location A7.325 to solidify.\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:24-07:00\",\"inputs\":{\"timestamp\":1509082524000}},{\"operation\":\"complete\",\"rval\":{}}]','2017-10-27 05:35:24','2017-10-27 05:35:24','operation.rb',-2,235,1,'2017-10-27 05:35:24','2017-10-27 06:35:24',NULL,NULL),(42644,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":185},\"time\":\"2017-10-26T22:35:24-07:00\"}]','2017-10-27 05:35:24','2017-10-27 05:35:24','operation.rb',-1,235,1,'2017-10-27 05:35:24','2017-10-27 06:35:24',NULL,NULL),(42645,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":185},\"time\":\"2017-10-26T22:35:24-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Go the EE office to pick up primers\"},{\"note\":\"Abort this protocol if no primer has shown up. It will automatically rescheduled.\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:24-07:00\",\"inputs\":{\"timestamp\":1509082524000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Quick spin down all the primer tubes\"},{\"note\":\"Find the order with sales order (or supplier ref) number 100\"},{\"note\":\"Put all the primer tubes in a table top centrifuge to spin down for 3 seconds.\"},{\"warning\":\"Make sure to balance!\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:24-07:00\",\"inputs\":{\"timestamp\":1509082524000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Enter the nMoles of the primer\"},{\"note\":\"Enter the number of moles for each primer, in nm. This is written toward the bottom of the tube, below the MW.\"},{\"note\":\"The id of the primer is listed before the primer\'s name on the side of the tube.\"},{\"table\":[[\"Primer Sample ID (input)\",\"nMoles\"],[20339,{\"type\":\"number\",\"operation_id\":3019,\"key\":\"n_moles\",\"default\":10}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:24-07:00\",\"inputs\":{\"timestamp\":1509082524000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Label and rehydrate\"},{\"note\":\"Label each primer tube with the ids shown in Primer Stock ids and rehydrate with volume of TE shown in Rehydrate\"},{\"table\":[[\"Primer Sample ID (input)\",\"Primer Stock Item ID (output)\",\"Rehydrate (uL of TE)\"],[20339,99776,{\"content\":100,\"check\":true}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:24-07:00\",\"inputs\":{\"timestamp\":1509082524000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Vortex and centrifuge\"},{\"note\":\"Wait one minute for the primer to dissolve in TE.\"},{\"note\":\"Vortex each tube on table top vortexer for 5 seconds and then quick spin for 2 seconds on table top centrifuge.\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:24-07:00\",\"inputs\":{\"timestamp\":1509082524000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Grab 1 1.5 mL tubes\"},{\"check\":\"Grab 1 1.5 mL tubes, label with following ids: 99775\"},{\"check\":\"Add 90 uL of water into each above tube.\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:24-07:00\",\"inputs\":{\"timestamp\":1509082524000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Make primer aliquots\"},{\"note\":\"Add 10 uL from primer stocks into each primer aliquot tube using the following table.\"},{\"table\":[[\"Primer Stock (10 L)\",\"Primer Aliquot Item ID (output)\"],[99776,{\"content\":99775,\"check\":true}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:25-07:00\",\"inputs\":{\"timestamp\":1509082525000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Boxes Required\"},{\"note\":\"You will need the following boxes from the freezer(s)\"},{\"table\":[[{\"content\":\"M20.0.0\",\"check\":true}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:25-07:00\",\"inputs\":{\"timestamp\":1509082525000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return to M20.0.0\"},{\"note\":\"Return Item(s)\"},{\"table\":[[{\"content\":0,\"class\":\"td-empty-slot\"},{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"}],[{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":99775,\"class\":\"td-filled-slot\",\"check\":true},{\"content\":99776,\"class\":\"td-filled-slot\",\"check\":true},{\"content\":12,\"class\":\"td-empty-slot\"},{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"}],[{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"},{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"}],[{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"}],[{\"content\":36,\"class\":\"td-empty-slot\"},{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"}],[{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"},{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"}],[{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"},{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"}],[{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"}],[{\"content\":72,\"class\":\"td-empty-slot\"},{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:25-07:00\",\"inputs\":{\"timestamp\":1509082525000}},{\"operation\":\"complete\",\"rval\":{}}]','2017-10-27 05:35:24','2017-10-27 05:35:25','operation.rb',-2,235,1,'2017-10-27 05:35:24','2017-10-27 06:35:24',NULL,NULL),(42646,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":186},\"time\":\"2017-10-26T22:35:28-07:00\"}]','2017-10-27 05:35:28','2017-10-27 05:35:28','operation.rb',-1,235,1,'2017-10-27 05:35:28','2017-10-27 06:35:28',NULL,NULL),(42647,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":186},\"time\":\"2017-10-26T22:35:28-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Debug slide (3 args)\"},{\"note\":\"Array: [\\\"99774\\\"]\"},{\"note\":\"Array: [\\\"99772\\\"]\"},{\"note\":\"Array: [\\\"99755\\\", \\\"99756\\\", \\\"99758\\\"]\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:28-07:00\",\"inputs\":{\"timestamp\":1509082528000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Item(s)\"},{\"take\":{\"id\":99755,\"location\":\"Bench\",\"name\":\"Ladder Aliquot\",\"sample\":\"100 bp Ladder\",\"type\":\"Ladder\"}},{\"take\":{\"id\":99756,\"location\":\"Bench\",\"name\":\"Ladder Aliquot\",\"sample\":\"1 kb Ladder\",\"type\":\"Ladder\"}},{\"take\":{\"id\":99758,\"location\":\"Bench\",\"name\":\"Screw Cap Tube\",\"sample\":\"6X Loading Dye\",\"type\":\"Reagent\"}},{\"take\":{\"id\":99774,\"location\":\"Bench\",\"name\":\"50 mL 0.8 Percent Agarose Gel in Gel Box\"}},{\"take\":{\"id\":99772,\"location\":\"TC1\",\"name\":\"Stripwell\"}}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:28-07:00\",\"inputs\":{\"timestamp\":1509082528000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Set up the power supply\"},{\"note\":\"In the gel room, obtain a power supply and set it to 80 V and with a 40 minute timer.\"},{\"note\":\"Attach the electrodes of an appropriate gel box lid from A7.525 to the power supply.\"},{\"image\":\"http://your.image.server/image?name=Items/gel_power_settings.JPG\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:28-07:00\",\"inputs\":{\"timestamp\":1509082528000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Set up the gel box(s).\"},{\"check\":\"Remove the casting tray(s) (with gel(s)) and place it(them) on the bench.\"},{\"check\":\"Using the graduated cylinder at A5.305, fill the gel box(s) with 200 mL of 1X TAE from J2 at A5.500. TAE should just cover the center of the gel box(s).\"},{\"check\":\"With the gel box(s) electrodes facing away from you, place the casting tray(s) (with gel(s)) back in the gel box(s). The top lane(s) should be on your left, as the DNA will move to the right.\"},{\"check\":\"Using the graduated cylinder, add 50 mL of 1X TAE from J2 at A5.500 so that the surface of the gel is covered.\"},{\"check\":\"Remove the comb(s) and place them in the appropriate box(s) in A7.325.\"},{\"check\":\"Put the graduated cylinder back at A5.305.\"},{\"image\":\"http://your.image.server/image?name=Items/gel_fill_TAE_to_line.JPG\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:28-07:00\",\"inputs\":{\"timestamp\":1509082528000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Add Ladders to Gel\"},{\"note\":\"Pipette 10 uL of the 1 kb ladder to positions (1,1) and (2,1) of gel 99774\"},{\"note\":\"Pipette 10 uL of the 100bp ladder to positions (1,2) and (2,2) of gel 99774\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:28-07:00\",\"inputs\":{\"timestamp\":1509082528000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Add Dye to Each Well\"},{\"note\":\"Add 10 uL dye to stripwell 99772 from wells 1 - 1\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:28-07:00\",\"inputs\":{\"timestamp\":1509082528000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer 50 uL of each PCR result into indicated gel lane\"},{\"note\":\"Transfer samples from each stripwell to the gel(s) according to the following table:\"},{\"table\":[[\"Stripwell\",\"Well Number\",\"Gel\",\"Gel Row\",\"Gel Column\"],[99772,1,99774,1,{\"content\":3,\"check\":true}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:28-07:00\",\"inputs\":{\"timestamp\":1509082528000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Start Electrophoresis\"},{\"note\":\"Carefully attach the gel box lid(s) to the gel box(es), being careful not to bump the samples out of the wells. Attach the red electrode to the red terminal of the power supply, and the black electrode to the neighboring black terminal. Hit the start button on the gel boxes - usually a small running person icon.\"},{\"note\":\"Make sure the power supply is not erroring (no E* messages) and that there are bubbles emerging from the platinum wires in the bottom corners of the gel box.\"},{\"image\":\"http://your.image.server/image?name=gel_check_for_bubbles\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:29-07:00\",\"inputs\":{\"timestamp\":1509082529000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Discard Stripwells\"},{\"note\":\"Discard all the empty stripwells\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:29-07:00\",\"inputs\":{\"timestamp\":1509082529000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Set a timer\"},{\"check\":\"When you get back to your bench, set a 40 minute timer.\"},{\"check\":\"When the 40 minute timer is up, grab a lab manager to check on the gel. The lab manager may have you set another timer after checking the gel.\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:29-07:00\",\"inputs\":{\"timestamp\":1509082529000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return the Following Item(s)\"},{\"take\":{\"id\":99755,\"location\":\"Bench\",\"name\":\"Ladder Aliquot\",\"sample\":\"100 bp Ladder\",\"type\":\"Ladder\"}},{\"take\":{\"id\":99756,\"location\":\"Bench\",\"name\":\"Ladder Aliquot\",\"sample\":\"1 kb Ladder\",\"type\":\"Ladder\"}},{\"take\":{\"id\":99758,\"location\":\"Bench\",\"name\":\"Screw Cap Tube\",\"sample\":\"6X Loading Dye\",\"type\":\"Reagent\"}}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:29-07:00\",\"inputs\":{\"timestamp\":1509082529000}},{\"operation\":\"complete\",\"rval\":{}}]','2017-10-27 05:35:28','2017-10-27 05:35:29','operation.rb',-2,235,1,'2017-10-27 05:35:28','2017-10-27 06:35:28',NULL,NULL),(42648,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":201},\"time\":\"2017-10-26T22:35:33-07:00\"}]','2017-10-27 05:35:33','2017-10-27 05:35:33','operation.rb',-1,235,1,'2017-10-27 05:35:33','2017-10-27 06:35:33',NULL,NULL),(42649,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":201},\"time\":\"2017-10-26T22:35:33-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Image gel 99774\"},{\"check\":\"Clean the transilluminator with ethanol.\"},{\"check\":\"Put the gel <a href=\'/items/99774\' class=\'aquarium-item\' id=\'99774\'>99774</a> on the transilluminator.\"},{\"check\":\"Turn off the room lights before turning on the transilluminator.\"},{\"check\":\"Put the camera hood on, turn on the transilluminator and take a picture using the camera control interface on computer.\"},{\"check\":\"Check to see if the picture matches the gel before uploading.\"},{\"check\":\"Rename the picture you just took exactly as <b>gel_99774</b>.\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:33-07:00\",\"inputs\":{\"timestamp\":1509082533000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Verify Fragment Lengths for gel 99774\"},{\"table\":[[\"Gel ID\",\"Row\",\"Column\",\"Expected Length\",\"Does the band match the expected length (y/n)\"],[99774,1,{\"content\":3,\"check\":true},1000.0,{\"type\":\"string\",\"operation_id\":3004,\"key\":\"0__correct\",\"default\":\"y\"}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:33-07:00\",\"inputs\":{\"timestamp\":1509082533000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Upload all gel images\"},{\"upload\":{\"var\":\"my_gel_pic\"}},{\"table\":[[\"Gel Row/Col\",\"Image name\",\"Uploaded?\"],[\"0 2\",\"gel_99774\",\"No\"]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:33-07:00\",\"inputs\":{\"timestamp\":1509082533000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Upload all gel images\"},{\"warning\":\"Some images are missing. Make sure the images are named correctly and you\'ve uploaded all of the images\"},{\"warning\":\"    Gel image <b>\\\"gel_99774\\\"</b> not uploaded!\"},{\"upload\":{\"var\":\"my_gel_pic\"}},{\"table\":[[\"Gel Row/Col\",\"Image name\",\"Uploaded?\"],[\"0 2\",\"gel_99774\",\"No\"]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:33-07:00\",\"inputs\":{\"timestamp\":1509082533000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Cut Out Fragments\"},{\"note\":\"Take out 1 1.5 mL tubes and label accordingly: [99777]\"},{\"note\":\"Now, cut out the bands and place them into the 1.5 mL tubes according to the following table:\"},{\"table\":[[\"Gel ID\",\"Row\",\"Column\",\"1.5 mL Tube ID\"],[99774,1,{\"content\":3,\"check\":true},99777]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:33-07:00\",\"inputs\":{\"timestamp\":1509082533000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Weight Gel Slices\"},{\"note\":\"Perform this step using the scale inside the gel room.\"},{\"check\":\"Zero the scale with an empty 1.5 mL tube.\"},{\"check\":\"Weigh each slice and enter the weights in the following table:\"},{\"table\":[[\"1.5 mL Tube ID\",\"Weight (g)\"],[99777,{\"type\":\"number\",\"operation_id\":3004,\"key\":\"0__weight\",\"default\":1.2375543826182638}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:33-07:00\",\"inputs\":{\"timestamp\":1509082533000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Clean Up\"},{\"check\":\"Turn off the transilluminator.\"},{\"check\":\"Dispose of the gel and any gel parts by placing it in the waste container. Spray the surface of the transilluminator with ethanol and wipe until dry using a paper towel.\"},{\"check\":\"Remove the blue light goggles, clean them, and put them back where you found them.\"},{\"check\":\"Clean up the gel box and casting tray by rinsing with water. Return them to the gel station.\"},{\"check\":\"Dispose gloves after leaving the room.\"},{\"select\":{\"var\":\"choice\",\"label\":\"Would you like to purify the gel slices immediately?\",\"multiple\":false,\"choices\":[\"Yes\",\"No\"]}}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:33-07:00\",\"inputs\":{\"choice\":\"Yes\",\"timestamp\":1509082533000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Keep Gel Slices\"},{\"note\":\"Keep the gel slices on your bench to use in the next protocol.\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:33-07:00\",\"inputs\":{\"timestamp\":1509082533000}},{\"operation\":\"complete\",\"rval\":{}}]','2017-10-27 05:35:33','2017-10-27 05:35:33','operation.rb',-2,235,1,'2017-10-27 05:35:33','2017-10-27 06:35:33',NULL,NULL),(42650,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":188},\"time\":\"2017-10-26T22:35:37-07:00\"}]','2017-10-27 05:35:37','2017-10-27 05:35:37','operation.rb',-1,235,1,'2017-10-27 05:35:37','2017-10-27 06:35:37',NULL,NULL),(42651,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":188},\"time\":\"2017-10-26T22:35:37-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":99777,\"location\":\"Bench\",\"name\":\"Gel Slice\",\"sample\":\"my first fragment\",\"type\":\"Fragment\"}}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:38-07:00\",\"inputs\":{\"timestamp\":1509082538000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Add the following volumes of QG buffer to the corresponding tube.\"},{\"table\":[[\"Gel Item ID (input)\",\"QG Volume in uL\"],[99777,{\"content\":955,\"check\":true}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:38-07:00\",\"inputs\":{\"timestamp\":1509082538000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Place all tubes in 50 degree heat block\"},{\"timer\":{\"initial\":{\"hours\":0,\"minutes\":10,\"seconds\":0},\"final\":{\"hours\":0,\"minutes\":0,\"seconds\":0},\"direction\":\"down\"}},{\"note\":\"Vortex every few minutes to speed up the process.\"},{\"note\":\"Retrieve after 10 minutes or until the gel slice is competely dissovled.\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:38-07:00\",\"inputs\":{\"timestamp\":1509082538000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Prepare the centrifuge\"},{\"check\":\"Grab 1 of pink Qiagen columns, label with 1 to 1 on the top.\"},{\"check\":\"Add tube contents to LABELED pink Qiagen columns using the following table.\"},{\"check\":\"Be sure not to add more than 750 uL to each pink column.\"},{\"warning\":\"VORTEX QG MIXTURE THOROUGHLY BEFORE ADDING TO PINK COLUMN!\"},{\"table\":[[\"Gel Item ID (input)\",\"Qiagen column\"],[99777,1]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:38-07:00\",\"inputs\":{\"timestamp\":1509082538000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Centrifuge\"},{\"check\":\"Spin at 17.0 xg for 1 minute to bind DNA to columns\"},{\"check\":\"Empty collection columns by pouring liquid waste into liquid waste container.\"},{\"warning\":\"Add the remaining QG mixtures to their corresponding columns, and repeat these first two steps for all tubes with remaining mixture!\"},{\"check\":\"Add 750 uL PE buffer to columns and wait five minutes\"},{\"check\":\"Spin at 17.0 xg for 30 seconds to wash columns.\"},{\"check\":\"Empty collection tubes.\"},{\"check\":\"Add 500 uL PE buffer to columns and wait five minutes\"},{\"check\":\"Spin at 17.0 xg for 30 seconds to wash columns\"},{\"check\":\"Empty collection tubes.\"},{\"check\":\"Spin at 17.0 xg for 1 minute to remove all PE buffer from columns\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:38-07:00\",\"inputs\":{\"timestamp\":1509082538000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Use label printer to label new 1.5 mL tubes\"},{\"check\":\"Ensure that the B33-143-492 labels are loaded in the printer. This number should be displayed on the printer. If not, check with a lab manager.\"},{\"check\":\"Open the LabelMark 6 software.\"},{\"check\":\"Select \\\"Open\\\" --> \\\"File\\\" --> \\\"Serialized data top labels\\\"\"},{\"note\":\"If an error about the printer appears, press \\\"Okay\\\"\"},{\"check\":\"Select the first label graphic, and click on the number in the middle of the label graphic.\"},{\"check\":\"On the toolbar on the left, select \\\"Edit serialized data\\\"\"},{\"check\":\"Enter 99778 for the Start number and 1 for the Total number, and select \\\"Finish\\\"\"},{\"check\":\"Select \\\"File\\\" --> \\\"Print\\\" and select \\\"BBP33\\\" as the printer option.\"},{\"check\":\"Press \\\"Print\\\" and collect the labels.\"},{\"image\":\"http://your.image.server/image?name=purify_gel_edit_serialized_data\"},{\"image\":\"http://your.image.server/image?name=purify_gel_sequential\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:38-07:00\",\"inputs\":{\"timestamp\":1509082538000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer to 1.5 mL tube\"},{\"check\":\"Apply the labels to the tubes.\"},{\"check\":\"Transfer pink columns to the labeled tubes using the following table.\"},{\"table\":[[\"Qiagen column\",\"1.5 mL tube\"],[1,{\"content\":99778,\"check\":true}]]},{\"check\":\"Add 30 uL molecular grade water or EB elution buffer to center of the column.\"},{\"warning\":\"Be very careful to not pipette on the wall of the tube.\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:38-07:00\",\"inputs\":{\"timestamp\":1509082538000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Measure DNA Concentration\"},{\"check\":\"Elute DNA into 1.5 mL tubes by spinning at 17.0 xg for one minute, keep the columns.\"},{\"check\":\"Pipette the flow through (30 uL) onto the center of the column, spin again at 17.0 xg for one minute. Discard the columns this time.\"},{\"check\":\"Go to B9 and nanodrop all of 1.5 mL tubes, enter DNA concentrations for all tubes in the following:\"},{\"table\":[[\"Fragment Item ID (output)\",\"Concentration (ng/uL)\",\"Notes\"],[99778,{\"type\":\"number\",\"operation_id\":3003,\"key\":\"conc\",\"default\":7},{\"type\":\"text\",\"operation_id\":3003,\"key\":\"note\",\"default\":0}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:38-07:00\",\"inputs\":{\"timestamp\":1509082538000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Decide whether to keep dilute stocks\"},{\"note\":\"The below stocks have a concentration of less than 10 ng/uL.\"},{\"note\":\"Talk to a lab manager to decide whether or not to discard the following stocks.\"},{\"select\":{\"var\":\"d99778\",\"label\":\"Discard Fragment Stock 99778\",\"multiple\":false,\"default\":1,\"choices\":[\"Yes\",\"No\"]}}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:38-07:00\",\"inputs\":{\"d99778\":\"No\",\"timestamp\":1509082538000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Boxes Required\"},{\"note\":\"You will need the following boxes from the freezer(s)\"},{\"table\":[[{\"content\":\"M20.0.0\",\"check\":true}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:38-07:00\",\"inputs\":{\"timestamp\":1509082538000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return to M20.0.0\"},{\"note\":\"Return Item(s)\"},{\"table\":[[{\"content\":0,\"class\":\"td-empty-slot\"},{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"}],[{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":99778,\"class\":\"td-filled-slot\",\"check\":true},{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"}],[{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"},{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"}],[{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"}],[{\"content\":36,\"class\":\"td-empty-slot\"},{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"}],[{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"},{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"}],[{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"},{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"}],[{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"}],[{\"content\":72,\"class\":\"td-empty-slot\"},{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:38-07:00\",\"inputs\":{\"timestamp\":1509082538000}},{\"operation\":\"complete\",\"rval\":{}}]','2017-10-27 05:35:37','2017-10-27 05:35:38','operation.rb',-2,235,1,'2017-10-27 05:35:37','2017-10-27 06:35:37',NULL,NULL),(42652,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":189},\"time\":\"2017-10-26T22:35:43-07:00\"}]','2017-10-27 05:35:43','2017-10-27 05:35:43','operation.rb',-1,235,1,'2017-10-27 05:35:43','2017-10-27 06:35:43',NULL,NULL),(42653,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":189},\"time\":\"2017-10-26T22:35:43-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Boxes Required\"},{\"note\":\"You will need the following boxes from the freezer(s)\"},{\"table\":[[{\"content\":\"M20.0.0\",\"check\":true}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:43-07:00\",\"inputs\":{\"timestamp\":1509082543000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Take from M20.0.0\"},{\"note\":\"Collect Item(s)\"},{\"table\":[[{\"content\":0,\"class\":\"td-empty-slot\"},{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"}],[{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":99778,\"class\":\"td-filled-slot\",\"check\":true},{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"}],[{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"},{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"}],[{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"}],[{\"content\":36,\"class\":\"td-empty-slot\"},{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"}],[{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"},{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"}],[{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"},{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"}],[{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"}],[{\"content\":72,\"class\":\"td-empty-slot\"},{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:43-07:00\",\"inputs\":{\"timestamp\":1509082543000}},{\"operation\":\"error\",\"message\":\"Called id for nil, which would mistakenly be 8 -- if you really wanted the id of nil, use object_id\",\"backtrace\":[\"(eval):109:in `main\'\",\"/home/gnew/aq_planner/aquarium/lib/krill/manager.rb:125:in `debugger\'\",\"/home/gnew/aq_planner/aquarium/lib/krill/manager.rb:168:in `run\'\",\"/home/gnew/aq_planner/aquarium/app/controllers/plans_controller.rb:221:in `block in debug\'\",\"/home/gnew/aq_planner/aquarium/app/controllers/plans_controller.rb:185:in `each\'\",\"/home/gnew/aq_planner/aquarium/app/controllers/plans_controller.rb:185:in `debug\'\",\"/home/gnew/.rvm/gems/ruby-2.2.0@aquarium/gems/actionpack-3.2.22/lib/action_controller/metal/implicit_render.rb:4:in `send_action\'\",\"/home/gnew/.rvm/gems/ruby-2.2.0@aquarium/gems/actionpack-3.2.22/lib/abstract_controller/base.rb:167:in `process_action\'\",\"/home/gnew/.rvm/gems/ruby-2.2.0@aquarium/gems/actionpack-3.2.22/lib/action_controller/metal/rendering.rb:10:in `process_action\'\",\"/home/gnew/.rvm/gems/ruby-2.2.0@aquarium/gems/actionpack-3.2.22/lib/abstract_controller/callbacks.rb:18:in `block in process_action\'\"]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:35:43-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2017-10-27 05:35:43','2017-10-27 05:35:43','operation.rb',-2,235,1,'2017-10-27 05:35:43','2017-10-27 06:35:43',NULL,NULL),(42654,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":200},\"time\":\"2017-10-26T22:39:42-07:00\"}]','2017-10-27 05:39:42','2017-10-27 05:39:42','operation.rb',-1,235,1,'2017-10-27 05:39:42','2017-10-27 06:39:42',NULL,NULL),(42655,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":200},\"time\":\"2017-10-26T22:39:42-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"What type of Collection do you want to create?\"},{\"note\":\"object type name must be exactly correct\"},{\"input\":{\"var\":\"object_type\",\"label\":\"Object type\",\"default\":\"Stripwell\",\"type\":\"text\"}},{\"input\":{\"var\":\"location\",\"label\":\"Location\",\"default\":\"Bench\",\"type\":\"text\"}}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:39:55-07:00\",\"inputs\":{\"timestamp\":1509082795.424,\"object_type\":\"Gibson Aliquot Batch\",\"location\":\"Bench\",\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"Collection Created!\"},{\"note\":\"Made new Gibson Aliquot Batch\"},{\"note\":\"Collection link <a href=\'/items/99781\' class=\'aquarium-item\' id=\'99781\'>99781</a>\"},{\"note\":\"Now we will populate the collection with samples of your choice\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:39:56-07:00\",\"inputs\":{\"timestamp\":1509082796.965,\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"how many samples to add to 99781\"},{\"input\":{\"var\":\"sample\",\"label\":\"Sample id to add\",\"default\":7,\"type\":\"number\"}},{\"input\":{\"var\":\"add\",\"label\":\"how many to add\",\"default\":0,\"type\":\"number\"}},{\"select\":{\"var\":\"continue\",\"label\":\"I want to add a different sample as well\",\"multiple\":false,\"default\":1,\"choices\":[\"Yes\",\"No\"]}},{\"table\":[[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:40:00-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2017-10-27 05:39:42','2017-10-27 05:40:00','operation.rb',-2,235,1,'2017-10-27 05:39:42','2017-10-27 06:39:42',NULL,NULL),(42656,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":200},\"time\":\"2017-10-26T22:40:15-07:00\"}]','2017-10-27 05:40:15','2017-10-27 05:40:15','operation.rb',-1,235,1,'2017-10-27 05:40:15','2017-10-27 06:40:15',NULL,NULL),(42657,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":200},\"time\":\"2017-10-26T22:40:15-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"What type of Collection do you want to create?\"},{\"note\":\"object type name must be exactly correct\"},{\"input\":{\"var\":\"object_type\",\"label\":\"Object type\",\"default\":\"Stripwell\",\"type\":\"text\"}},{\"input\":{\"var\":\"location\",\"label\":\"Location\",\"default\":\"Bench\",\"type\":\"text\"}}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:40:23-07:00\",\"inputs\":{\"timestamp\":1509082823.458,\"object_type\":\"Gibson Aliquot Batch\",\"location\":\"Bench\",\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"Collection Created!\"},{\"note\":\"Made new Gibson Aliquot Batch\"},{\"note\":\"Collection link <a href=\'/items/99783\' class=\'aquarium-item\' id=\'99783\'>99783</a>\"},{\"note\":\"Now we will populate the collection with samples of your choice\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:40:24-07:00\",\"inputs\":{\"timestamp\":1509082824.825,\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"how many samples to add to 99783\"},{\"input\":{\"var\":\"sample\",\"label\":\"Sample id to add\",\"default\":7,\"type\":\"number\"}},{\"input\":{\"var\":\"add\",\"label\":\"how many to add\",\"default\":0,\"type\":\"number\"}},{\"select\":{\"var\":\"continue\",\"label\":\"I want to add a different sample as well\",\"multiple\":false,\"default\":1,\"choices\":[\"Yes\",\"No\"]}},{\"table\":[[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:40:39-07:00\",\"inputs\":{\"timestamp\":1509082839.912,\"sample\":20346,\"add\":80,\"continue\":\"No\",\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"Collection finsished and ready to use\"},{\"note\":\"Use the \'edit collection\' protocol to add or remove samples\"},{\"table}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:40:41-07:00\",\"inputs\":{\"timestamp\":1509082841.156,\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return the Following Additional Item(s)\"},{\"take\":{\"id\":99783,\"location\":\"Bench\",\"name\":\"Gibson Aliquot Batch\"}}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:40:42-07:00\",\"inputs\":{\"timestamp\":1509082842.062,\"table_inputs\":[]}},{\"operation\":\"complete\",\"rval\":{}}]','2017-10-27 05:40:15','2017-10-27 05:40:42','operation.rb',-2,235,1,'2017-10-27 05:40:15','2017-10-27 06:40:15',NULL,NULL),(42658,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":189},\"time\":\"2017-10-26T22:41:04-07:00\"}]','2017-10-27 05:41:04','2017-10-27 05:41:04','operation.rb',-1,235,1,'2017-10-27 05:41:04','2017-10-27 06:41:04',NULL,NULL),(42659,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":189},\"time\":\"2017-10-26T22:41:04-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Boxes Required\"},{\"note\":\"You will need the following boxes from the freezer(s)\"},{\"table\":[[{\"content\":\"M20.0.0\",\"check\":true}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:41:04-07:00\",\"inputs\":{\"timestamp\":1509082864000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Take from M20.0.0\"},{\"note\":\"Collect Item(s)\"},{\"table\":[[{\"content\":0,\"class\":\"td-empty-slot\"},{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"}],[{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":99778,\"class\":\"td-filled-slot\",\"check\":true},{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"}],[{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"},{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"}],[{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"}],[{\"content\":36,\"class\":\"td-empty-slot\"},{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"}],[{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"},{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"}],[{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"},{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"}],[{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"}],[{\"content\":72,\"class\":\"td-empty-slot\"},{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:41:04-07:00\",\"inputs\":{\"timestamp\":1509082864000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Grab Gibson aliquots\"},{\"note\":\"Grab an ice block and aluminum tray from the fridge\"},{\"note\":\"Grab 1 Gibson aliquots from batch [99783], located in the M20\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:41:04-07:00\",\"inputs\":{\"timestamp\":1509082864000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Checking Volumes\"},{\"select\":{\"var\":\"v99778\",\"label\":\"Does 99778 have at least 5.0 uL?\",\"multiple\":false,\"default\":0,\"choices\":[\"Yes\",\"No\"]}}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:41:04-07:00\",\"inputs\":{\"v99778\":\"Yes\",\"timestamp\":1509082864000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Load Gibson Reaction 99784\"},{\"note\":\"Label an unused aliquot with 99784\"},{\"note\":\"Make sure the Gibson aliquot is thawed before pipetting\"},{\"warning\":\"Please use the P2 for any volumes below 0.5 uL\"},{\"table\":[[\"Fragment Stock IDs\",\"Volume\"],[99778,{\"content\":5.0,\"check\":true}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:41:04-07:00\",\"inputs\":{\"timestamp\":1509082864000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Reactions on Heat Block\"},{\"note\":\"Put all 1 on the 50 C heat block\"},{\"note\":\"<a href=\'https://www.google.com/search?q=1+hr+timer&oq=1+hr+timer&aqs=chrome..69i57j0l5.1684j0j7&sourceid=chrome&es_sm=122&ie=UTF-8#q=1+hour+timer\' target=\'_blank\'>\\n                Set a 1 hr timer on Google</a> to set a reminder to start the ecoli_transformation protocol and retrieve the Gibson Reactions.\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:41:04-07:00\",\"inputs\":{\"timestamp\":1509082864000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return unused gibson aliquots\"},{\"note\":\"1 aliquots were needed for this protocol, but you might have not used all of them.\"},{\"note\":\"Return any unused aliquots to batch  [99783] in the M20\"},{\"input\":{\"var\":\"n\",\"label\":\"How many gibson aliquots will be returned?\",\"default\":\"0\",\"type\":\"number\"}},{\"note\":\"If you used more aliquots than predicted, indicate with a negative value.\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:41:04-07:00\",\"inputs\":{\"n\":\"0\",\"timestamp\":1509082864000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return ice block and aluminum tube rack\"},{\"check\":\"Return the ice block and aluminum tube rack.\"},{\"check\":\"discard the used up gibson aliquot batch.\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:41:04-07:00\",\"inputs\":{\"timestamp\":1509082864000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Boxes Required\"},{\"note\":\"You will need the following boxes from the freezer(s)\"},{\"table\":[[{\"content\":\"M20.0.0\",\"check\":true}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:41:04-07:00\",\"inputs\":{\"timestamp\":1509082864000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return to M20.0.0\"},{\"note\":\"Return Item(s)\"},{\"table\":[[{\"content\":0,\"class\":\"td-empty-slot\"},{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"}],[{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":99778,\"class\":\"td-filled-slot\",\"check\":true},{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"}],[{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"},{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"}],[{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"}],[{\"content\":36,\"class\":\"td-empty-slot\"},{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"}],[{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"},{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"}],[{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"},{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"}],[{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"}],[{\"content\":72,\"class\":\"td-empty-slot\"},{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:41:04-07:00\",\"inputs\":{\"timestamp\":1509082864000}},{\"operation\":\"complete\",\"rval\":{}}]','2017-10-27 05:41:04','2017-10-27 05:41:04','operation.rb',-2,235,1,'2017-10-27 05:41:04','2017-10-27 06:41:04',NULL,NULL),(42660,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":190},\"time\":\"2017-10-26T22:42:16-07:00\"}]','2017-10-27 05:42:16','2017-10-27 05:42:16','operation.rb',-1,235,1,'2017-10-27 05:42:16','2017-10-27 06:42:16',NULL,NULL),(42661,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":190},\"time\":\"2017-10-26T22:42:16-07:00\"}]','2017-10-27 05:42:16','2017-10-27 05:42:16','operation.rb',-1,235,1,'2017-10-27 05:42:16','2017-10-27 06:42:16',NULL,NULL),(42662,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":190},\"time\":\"2017-10-26T22:43:42-07:00\"}]','2017-10-27 05:43:42','2017-10-27 05:43:42','operation.rb',-1,235,1,'2017-10-27 05:43:42','2017-10-27 06:43:42',NULL,NULL),(42663,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":190},\"time\":\"2017-10-26T22:43:42-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Prepare bench\"},{\"note\":\"If the electroporator is off (no numbers displayed), turn it on using the ON/STDBY button.\"},{\"note\":\"Set the voltage to 1250V by clicking the up and down buttons.\"},{\"note\":\" Click the time constant button to show 0.0.\"},{\"image\":\"http://your.image.server/image?name=Actions/Transformation/initialize_electroporator.jpg\"},{\"check\":\"Retrieve and label 0 1.5 mL tubes with the following ids:  \"},{\"check\":\"Set your 3 pipettors to be 2 uL, 42 uL, and 900 uL.\"},{\"check\":\"Prepare 10 uL, 100 uL, and 1000 uL pipette tips.\"},{\"check\":\"Grab a Bench SOC liquid aliquot (sterile) and loosen the cap.\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:43:42-07:00\",\"inputs\":{\"timestamp\":1509083022000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Get cold items\"},{\"note\":\"Retrieve a styrofoam ice block and an aluminum tube rack. Put the aluminum tube rack on top of the ice block.\"},{\"image\":\"http://your.image.server/image?name=arrange_cold_block\"},{\"check\":\"Retrieve 1 cuvettes and put inside the styrofoam touching ice block.\"},{\"note\":\"Retrieve the following electrocompetent aliquots from the M80 and place them on an aluminum tube rack: \"},{\"check\":\"1 aliquot(s) of DH5alpha from batch 99747\"},{\"image\":\"http://your.image.server/image?name=Actions/Transformation/handle_electrocompetent_cells.jpg\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:43:43-07:00\",\"inputs\":{\"timestamp\":1509083023000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Label aliquots\"},{\"check\":\"Label the electrocompetent aliquot of DH5alpha as 1.\"},{\"note\":\"If still frozen, wait till the cells have thawed to a slushy consistency.\"},{\"warning\":\"Transformation efficiency depends on keeping electrocompetent cells ice-cold until electroporation.\"},{\"warning\":\"Do not wait too long\"},{\"image\":\"http://your.image.server/image?name=Actions/Transformation/thawed_electrocompotent_cells.jpg\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:43:43-07:00\",\"inputs\":{\"timestamp\":1509083023000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Add plasmid to electrocompetent aliquot, electroporate and rescue \"},{\"note\":\"Repeat for each row in the table:\"},{\"check\":\"Pipette 2 uL plasmid/gibson result into labeled electrocompetent aliquot, swirl the tip to mix and place back on the aluminum rack after mixing.\"},{\"check\":\"Transfer 42 uL of e-comp cells to electrocuvette with P100\"},{\"check\":\"Slide into electroporator, press PULSE button twice, and QUICKLY add 900 uL of SOC\"},{\"check\":\"pipette cells up and down 3 times, then transfer 900 uL to appropriate 1.5 mL tube with P1000\"},{\"table\":[[\"Plasmid Item ID (input)\",\"Electrocompetent Aliquot\",\"Transformed E Coli Item ID (output)\"]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:43:43-07:00\",\"inputs\":{\"timestamp\":1509083023000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Incubate transformants\"},{\"check\":\"Grab a glass flask\"},{\"check\":\"Place E. coli transformants inside flask laying sideways and place flask into shaking 37 C incubator.\"},{\"note\":\"<a href=\'https://www.google.com/search?q=30%20minute%20timer\' target=\'_blank\'>Use a 30 minute Google timer</a> to set a reminder to retrieve the transformants, at which point you will start the \'Plate Transformed Cells\' protocol.\"},{\"image\":\"http://your.image.server/image?name=Actions/Transformation/37_c_shaker_incubator.jpg\"},{\"note\":\"While the transformants incubate, finish this protocol by completing the remaining tasks.\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:43:43-07:00\",\"inputs\":{\"timestamp\":1509083023000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Pre-heat plates\"},{\"note\":\"Retrieve the following plates, and place into still 37C incubator.\"},{\"image\":\"http://your.image.server/image?name=Actions/Plating/put_plate_incubator.JPG\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:43:43-07:00\",\"inputs\":{\"timestamp\":1509083023000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Clean up\"},{\"check\":\"Put all cuvettes into biohazardous waste.\"},{\"check\":\"Discard empty electrocompetent aliquot tubes into waste bin.\"},{\"check\":\"Return the styrofoam ice block and the aluminum tube rack.\"},{\"image\":\"http://your.image.server/image?name=Actions/Transformation/dump_dirty_cuvettes.jpg\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:43:43-07:00\",\"inputs\":{\"timestamp\":1509083023000}},{\"operation\":\"error\",\"message\":\"undefined local variable or method `give_happy_birthday\' for #<#<Class:0x007f73ecb09fe8>::Protocol:0x00000005569c08>\",\"backtrace\":[\"(eval):237:in `main\'\",\"/home/gnew/aq_planner/aquarium/lib/krill/manager.rb:125:in `debugger\'\",\"/home/gnew/aq_planner/aquarium/lib/krill/manager.rb:168:in `run\'\",\"/home/gnew/aq_planner/aquarium/app/controllers/plans_controller.rb:221:in `block in debug\'\",\"/home/gnew/aq_planner/aquarium/app/controllers/plans_controller.rb:185:in `each\'\",\"/home/gnew/aq_planner/aquarium/app/controllers/plans_controller.rb:185:in `debug\'\",\"/home/gnew/.rvm/gems/ruby-2.2.0@aquarium/gems/actionpack-3.2.22/lib/action_controller/metal/implicit_render.rb:4:in `send_action\'\",\"/home/gnew/.rvm/gems/ruby-2.2.0@aquarium/gems/actionpack-3.2.22/lib/abstract_controller/base.rb:167:in `process_action\'\",\"/home/gnew/.rvm/gems/ruby-2.2.0@aquarium/gems/actionpack-3.2.22/lib/action_controller/metal/rendering.rb:10:in `process_action\'\",\"/home/gnew/.rvm/gems/ruby-2.2.0@aquarium/gems/actionpack-3.2.22/lib/abstract_controller/callbacks.rb:18:in `block in process_action\'\"]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:43:43-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2017-10-27 05:43:42','2017-10-27 05:43:43','operation.rb',-2,235,1,'2017-10-27 05:43:42','2017-10-27 06:43:42',NULL,NULL),(42666,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":190},\"time\":\"2017-10-26T22:45:44-07:00\"}]','2017-10-27 05:45:44','2017-10-27 05:45:44','operation.rb',-1,235,1,'2017-10-27 05:45:44','2017-10-27 06:45:44',NULL,NULL),(42667,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":190},\"time\":\"2017-10-26T22:45:44-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Prepare bench\"},{\"note\":\"If the electroporator is off (no numbers displayed), turn it on using the ON/STDBY button.\"},{\"note\":\"Set the voltage to 1250V by clicking the up and down buttons.\"},{\"note\":\" Click the time constant button to show 0.0.\"},{\"image\":\"http://your.image.server/image?name=Actions/Transformation/initialize_electroporator.jpg\"},{\"check\":\"Retrieve and label 0 1.5 mL tubes with the following ids:  \"},{\"check\":\"Set your 3 pipettors to be 2 uL, 42 uL, and 900 uL.\"},{\"check\":\"Prepare 10 uL, 100 uL, and 1000 uL pipette tips.\"},{\"check\":\"Grab a Bench SOC liquid aliquot (sterile) and loosen the cap.\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:45:44-07:00\",\"inputs\":{\"timestamp\":1509083144000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Get cold items\"},{\"note\":\"Retrieve a styrofoam ice block and an aluminum tube rack. Put the aluminum tube rack on top of the ice block.\"},{\"image\":\"http://your.image.server/image?name=arrange_cold_block\"},{\"check\":\"Retrieve 1 cuvettes and put inside the styrofoam touching ice block.\"},{\"note\":\"Retrieve the following electrocompetent aliquots from the M80 and place them on an aluminum tube rack: \"},{\"check\":\"1 aliquot(s) of DH5alpha from batch 99747\"},{\"image\":\"http://your.image.server/image?name=Actions/Transformation/handle_electrocompetent_cells.jpg\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:45:44-07:00\",\"inputs\":{\"timestamp\":1509083144000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Label aliquots\"},{\"check\":\"Label the electrocompetent aliquot of DH5alpha as 1.\"},{\"note\":\"If still frozen, wait till the cells have thawed to a slushy consistency.\"},{\"warning\":\"Transformation efficiency depends on keeping electrocompetent cells ice-cold until electroporation.\"},{\"warning\":\"Do not wait too long\"},{\"image\":\"http://your.image.server/image?name=Actions/Transformation/thawed_electrocompotent_cells.jpg\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:45:44-07:00\",\"inputs\":{\"timestamp\":1509083144000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Add plasmid to electrocompetent aliquot, electroporate and rescue \"},{\"note\":\"Repeat for each row in the table:\"},{\"check\":\"Pipette 2 uL plasmid/gibson result into labeled electrocompetent aliquot, swirl the tip to mix and place back on the aluminum rack after mixing.\"},{\"check\":\"Transfer 42 uL of e-comp cells to electrocuvette with P100\"},{\"check\":\"Slide into electroporator, press PULSE button twice, and QUICKLY add 900 uL of SOC\"},{\"check\":\"pipette cells up and down 3 times, then transfer 900 uL to appropriate 1.5 mL tube with P1000\"},{\"table\":[[\"Plasmid Item ID (input)\",\"Electrocompetent Aliquot\",\"Transformed E Coli Item ID (output)\"]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:45:44-07:00\",\"inputs\":{\"timestamp\":1509083144000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Incubate transformants\"},{\"check\":\"Grab a glass flask\"},{\"check\":\"Place E. coli transformants inside flask laying sideways and place flask into shaking 37 C incubator.\"},{\"note\":\"<a href=\'https://www.google.com/search?q=30%20minute%20timer\' target=\'_blank\'>Use a 30 minute Google timer</a> to set a reminder to retrieve the transformants, at which point you will start the \'Plate Transformed Cells\' protocol.\"},{\"image\":\"http://your.image.server/image?name=Actions/Transformation/37_c_shaker_incubator.jpg\"},{\"note\":\"While the transformants incubate, finish this protocol by completing the remaining tasks.\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:45:44-07:00\",\"inputs\":{\"timestamp\":1509083144000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Pre-heat plates\"},{\"note\":\"Retrieve the following plates, and place into still 37C incubator.\"},{\"image\":\"http://your.image.server/image?name=Actions/Plating/put_plate_incubator.JPG\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:45:44-07:00\",\"inputs\":{\"timestamp\":1509083144000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Clean up\"},{\"check\":\"Put all cuvettes into biohazardous waste.\"},{\"check\":\"Discard empty electrocompetent aliquot tubes into waste bin.\"},{\"check\":\"Return the styrofoam ice block and the aluminum tube rack.\"},{\"image\":\"http://your.image.server/image?name=Actions/Transformation/dump_dirty_cuvettes.jpg\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:45:44-07:00\",\"inputs\":{\"timestamp\":1509083144000}},{\"operation\":\"complete\",\"rval\":{}}]','2017-10-27 05:45:44','2017-10-27 05:45:44','operation.rb',-2,235,1,'2017-10-27 05:45:44','2017-10-27 06:45:44',NULL,NULL),(42668,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":190},\"time\":\"2017-10-26T22:46:39-07:00\"}]','2017-10-27 05:46:39','2017-10-27 05:46:39','operation.rb',-1,235,1,'2017-10-27 05:46:39','2017-10-27 06:46:39',NULL,NULL),(42669,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":190},\"time\":\"2017-10-26T22:46:39-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":99784,\"location\":\"Bench\",\"name\":\"Gibson Reaction Result\",\"sample\":\"my first plasmid\",\"type\":\"Plasmid\"}}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:46:39-07:00\",\"inputs\":{\"timestamp\":1509083199000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Prepare bench\"},{\"note\":\"If the electroporator is off (no numbers displayed), turn it on using the ON/STDBY button.\"},{\"note\":\"Set the voltage to 1250V by clicking the up and down buttons.\"},{\"note\":\" Click the time constant button to show 0.0.\"},{\"image\":\"http://your.image.server/image?name=Actions/Transformation/initialize_electroporator.jpg\"},{\"check\":\"Retrieve and label 1 1.5 mL tubes with the following ids: 99788 \"},{\"check\":\"Set your 3 pipettors to be 2 uL, 42 uL, and 900 uL.\"},{\"check\":\"Prepare 10 uL, 100 uL, and 1000 uL pipette tips.\"},{\"check\":\"Grab a Bench SOC liquid aliquot (sterile) and loosen the cap.\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:46:40-07:00\",\"inputs\":{\"timestamp\":1509083200000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Get cold items\"},{\"note\":\"Retrieve a styrofoam ice block and an aluminum tube rack. Put the aluminum tube rack on top of the ice block.\"},{\"image\":\"http://your.image.server/image?name=arrange_cold_block\"},{\"check\":\"Retrieve 1 cuvettes and put inside the styrofoam touching ice block.\"},{\"note\":\"Retrieve the following electrocompetent aliquots from the M80 and place them on an aluminum tube rack: \"},{\"check\":\"1 aliquot(s) of DH5alpha from batch 99747\"},{\"image\":\"http://your.image.server/image?name=Actions/Transformation/handle_electrocompetent_cells.jpg\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:46:40-07:00\",\"inputs\":{\"timestamp\":1509083200000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Label aliquots\"},{\"check\":\"Label the electrocompetent aliquot of DH5alpha as 1.\"},{\"note\":\"If still frozen, wait till the cells have thawed to a slushy consistency.\"},{\"warning\":\"Transformation efficiency depends on keeping electrocompetent cells ice-cold until electroporation.\"},{\"warning\":\"Do not wait too long\"},{\"image\":\"http://your.image.server/image?name=Actions/Transformation/thawed_electrocompotent_cells.jpg\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:46:40-07:00\",\"inputs\":{\"timestamp\":1509083200000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Add plasmid to electrocompetent aliquot, electroporate and rescue \"},{\"note\":\"Repeat for each row in the table:\"},{\"check\":\"Pipette 2 uL plasmid/gibson result into labeled electrocompetent aliquot, swirl the tip to mix and place back on the aluminum rack after mixing.\"},{\"check\":\"Transfer 42 uL of e-comp cells to electrocuvette with P100\"},{\"check\":\"Slide into electroporator, press PULSE button twice, and QUICKLY add 900 uL of SOC\"},{\"check\":\"pipette cells up and down 3 times, then transfer 900 uL to appropriate 1.5 mL tube with P1000\"},{\"table\":[[\"Plasmid Item ID (input)\",\"Electrocompetent Aliquot\",\"Transformed E Coli Item ID (output)\"],[99784,1,{\"content\":99788,\"check\":true}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:46:40-07:00\",\"inputs\":{\"timestamp\":1509083200000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Incubate transformants\"},{\"check\":\"Grab a glass flask\"},{\"check\":\"Place E. coli transformants inside flask laying sideways and place flask into shaking 37 C incubator.\"},{\"note\":\"<a href=\'https://www.google.com/search?q=30%20minute%20timer\' target=\'_blank\'>Use a 30 minute Google timer</a> to set a reminder to retrieve the transformants, at which point you will start the \'Plate Transformed Cells\' protocol.\"},{\"image\":\"http://your.image.server/image?name=Actions/Transformation/37_c_shaker_incubator.jpg\"},{\"note\":\"While the transformants incubate, finish this protocol by completing the remaining tasks.\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:46:40-07:00\",\"inputs\":{\"timestamp\":1509083200000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Pre-heat plates\"},{\"note\":\"Retrieve the following plates, and place into still 37C incubator.\"},{\"check\":\"1 LB + AMP plates\"},{\"image\":\"http://your.image.server/image?name=Actions/Plating/put_plate_incubator.JPG\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:46:40-07:00\",\"inputs\":{\"timestamp\":1509083200000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Clean up\"},{\"check\":\"Put all cuvettes into biohazardous waste.\"},{\"check\":\"Discard empty electrocompetent aliquot tubes into waste bin.\"},{\"check\":\"Return the styrofoam ice block and the aluminum tube rack.\"},{\"image\":\"http://your.image.server/image?name=Actions/Transformation/dump_dirty_cuvettes.jpg\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:46:40-07:00\",\"inputs\":{\"timestamp\":1509083200000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return the Following Additional Item(s)\"},{\"take\":{\"id\":99784,\"location\":\"Bench\",\"name\":\"Gibson Reaction Result\",\"sample\":\"my first plasmid\",\"type\":\"Plasmid\"}}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:46:40-07:00\",\"inputs\":{\"timestamp\":1509083200000}},{\"operation\":\"complete\",\"rval\":{}}]','2017-10-27 05:46:39','2017-10-27 05:46:40','operation.rb',-2,235,1,'2017-10-27 05:46:39','2017-10-27 06:46:39',NULL,NULL),(42670,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":194},\"time\":\"2017-10-26T22:47:22-07:00\"}]','2017-10-27 05:47:22','2017-10-27 05:47:22','operation.rb',-1,235,1,'2017-10-27 05:47:22','2017-10-27 06:47:22',NULL,NULL),(42671,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":194},\"time\":\"2017-10-26T22:47:22-07:00\"},{\"operation\":\"error\",\"message\":\"undefined method `set_status\' for #<Operation:0x00000004d5fb20>\",\"backtrace\":[\"/home/gnew/.rvm/gems/ruby-2.2.0@aquarium/gems/activemodel-3.2.22/lib/active_model/attribute_methods.rb:407:in `method_missing\'\",\"/home/gnew/.rvm/gems/ruby-2.2.0@aquarium/gems/activerecord-3.2.22/lib/active_record/attribute_methods.rb:149:in `method_missing\'\",\"/home/gnew/aq_planner/aquarium/lib/krill/operation_list.rb:84:in `block (2 levels) in retrieve\'\",\"/home/gnew/aq_planner/aquarium/lib/krill/operation_list.rb:77:in `each\'\",\"/home/gnew/aq_planner/aquarium/lib/krill/operation_list.rb:77:in `block in retrieve\'\",\"/home/gnew/aq_planner/aquarium/lib/krill/operation_list.rb:75:in `each\'\",\"/home/gnew/aq_planner/aquarium/lib/krill/operation_list.rb:75:in `each_with_index\'\",\"/home/gnew/aq_planner/aquarium/lib/krill/operation_list.rb:75:in `retrieve\'\",\"(eval):38:in `main\'\",\"/home/gnew/aq_planner/aquarium/lib/krill/manager.rb:125:in `debugger\'\"]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:47:22-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2017-10-27 05:47:22','2017-10-27 05:47:22','operation.rb',-2,235,1,'2017-10-27 05:47:22','2017-10-27 06:47:22',NULL,NULL),(42672,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":192},\"time\":\"2017-10-26T22:47:22-07:00\"}]','2017-10-27 05:47:22','2017-10-27 05:47:22','operation.rb',-1,235,1,'2017-10-27 05:47:22','2017-10-27 06:47:22',NULL,NULL),(42673,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":192},\"time\":\"2017-10-26T22:47:22-07:00\"},{\"operation\":\"error\",\"message\":\"undefined method `set_status\' for #<Operation:0x007f73ed1393a0>\",\"backtrace\":[\"/home/gnew/.rvm/gems/ruby-2.2.0@aquarium/gems/activemodel-3.2.22/lib/active_model/attribute_methods.rb:407:in `method_missing\'\",\"/home/gnew/.rvm/gems/ruby-2.2.0@aquarium/gems/activerecord-3.2.22/lib/active_record/attribute_methods.rb:149:in `method_missing\'\",\"/home/gnew/aq_planner/aquarium/lib/krill/operation_list.rb:84:in `block (2 levels) in retrieve\'\",\"/home/gnew/aq_planner/aquarium/lib/krill/operation_list.rb:77:in `each\'\",\"/home/gnew/aq_planner/aquarium/lib/krill/operation_list.rb:77:in `block in retrieve\'\",\"/home/gnew/aq_planner/aquarium/lib/krill/operation_list.rb:75:in `each\'\",\"/home/gnew/aq_planner/aquarium/lib/krill/operation_list.rb:75:in `each_with_index\'\",\"/home/gnew/aq_planner/aquarium/lib/krill/operation_list.rb:75:in `retrieve\'\",\"(eval):12:in `main\'\",\"/home/gnew/aq_planner/aquarium/lib/krill/manager.rb:125:in `debugger\'\"]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:47:22-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2017-10-27 05:47:22','2017-10-27 05:47:22','operation.rb',-2,235,1,'2017-10-27 05:47:22','2017-10-27 06:47:22',NULL,NULL),(42674,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":191},\"time\":\"2017-10-26T22:47:22-07:00\"}]','2017-10-27 05:47:22','2017-10-27 05:47:22','operation.rb',-1,235,1,'2017-10-27 05:47:22','2017-10-27 06:47:22',NULL,NULL),(42675,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":191},\"time\":\"2017-10-26T22:47:22-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":99788,\"location\":\"37C shaker\",\"name\":\"Transformed E. coli Aliquot\",\"sample\":\"my first plasmid\",\"type\":\"Plasmid\"}}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:47:22-07:00\",\"inputs\":{\"timestamp\":1509083242000}},{\"operation\":\"display\",\"content\":[{\"note\":\"LB + Amp\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:47:22-07:00\",\"inputs\":{\"timestamp\":1509083242000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return the Following Item(s)\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:47:22-07:00\",\"inputs\":{\"timestamp\":1509083242000}},{\"operation\":\"complete\",\"rval\":{}}]','2017-10-27 05:47:22','2017-10-27 05:47:22','operation.rb',-2,235,1,'2017-10-27 05:47:22','2017-10-27 06:47:22',NULL,NULL),(42676,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":195},\"time\":\"2017-10-26T22:47:22-07:00\"}]','2017-10-27 05:47:22','2017-10-27 05:47:22','operation.rb',-1,235,1,'2017-10-27 05:47:22','2017-10-27 06:47:22',NULL,NULL),(42677,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":195},\"time\":\"2017-10-26T22:47:22-07:00\"},{\"operation\":\"error\",\"message\":\"undefined method `set_status\' for #<Operation:0x007f73edad2a10>\",\"backtrace\":[\"/home/gnew/.rvm/gems/ruby-2.2.0@aquarium/gems/activemodel-3.2.22/lib/active_model/attribute_methods.rb:407:in `method_missing\'\",\"/home/gnew/.rvm/gems/ruby-2.2.0@aquarium/gems/activerecord-3.2.22/lib/active_record/attribute_methods.rb:149:in `method_missing\'\",\"/home/gnew/aq_planner/aquarium/lib/krill/operation_list.rb:84:in `block (2 levels) in retrieve\'\",\"/home/gnew/aq_planner/aquarium/lib/krill/operation_list.rb:77:in `each\'\",\"/home/gnew/aq_planner/aquarium/lib/krill/operation_list.rb:77:in `block in retrieve\'\",\"/home/gnew/aq_planner/aquarium/lib/krill/operation_list.rb:75:in `each\'\",\"/home/gnew/aq_planner/aquarium/lib/krill/operation_list.rb:75:in `each_with_index\'\",\"/home/gnew/aq_planner/aquarium/lib/krill/operation_list.rb:75:in `retrieve\'\",\"(eval):9:in `main\'\",\"/home/gnew/aq_planner/aquarium/lib/krill/manager.rb:125:in `debugger\'\"]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:47:22-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2017-10-27 05:47:22','2017-10-27 05:47:22','operation.rb',-2,235,1,'2017-10-27 05:47:22','2017-10-27 06:47:22',NULL,NULL),(42678,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":196},\"time\":\"2017-10-26T22:47:22-07:00\"}]','2017-10-27 05:47:22','2017-10-27 05:47:22','operation.rb',-1,235,1,'2017-10-27 05:47:22','2017-10-27 06:47:22',NULL,NULL),(42679,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":196},\"time\":\"2017-10-26T22:47:22-07:00\"},{\"operation\":\"error\",\"message\":\"undefined method `set_status\' for #<Operation:0x00000004949018>\",\"backtrace\":[\"/home/gnew/.rvm/gems/ruby-2.2.0@aquarium/gems/activemodel-3.2.22/lib/active_model/attribute_methods.rb:407:in `method_missing\'\",\"/home/gnew/.rvm/gems/ruby-2.2.0@aquarium/gems/activerecord-3.2.22/lib/active_record/attribute_methods.rb:149:in `method_missing\'\",\"/home/gnew/aq_planner/aquarium/lib/krill/operation_list.rb:84:in `block (2 levels) in retrieve\'\",\"/home/gnew/aq_planner/aquarium/lib/krill/operation_list.rb:77:in `each\'\",\"/home/gnew/aq_planner/aquarium/lib/krill/operation_list.rb:77:in `block in retrieve\'\",\"/home/gnew/aq_planner/aquarium/lib/krill/operation_list.rb:75:in `each\'\",\"/home/gnew/aq_planner/aquarium/lib/krill/operation_list.rb:75:in `each_with_index\'\",\"/home/gnew/aq_planner/aquarium/lib/krill/operation_list.rb:75:in `retrieve\'\",\"(eval):13:in `main\'\",\"/home/gnew/aq_planner/aquarium/lib/krill/manager.rb:125:in `debugger\'\"]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:47:23-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2017-10-27 05:47:22','2017-10-27 05:47:23','operation.rb',-2,235,1,'2017-10-27 05:47:22','2017-10-27 06:47:22',NULL,NULL),(42680,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":198},\"time\":\"2017-10-26T22:47:23-07:00\"}]','2017-10-27 05:47:23','2017-10-27 05:47:23','operation.rb',-1,235,1,'2017-10-27 05:47:23','2017-10-27 06:47:23',NULL,NULL),(42681,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":198},\"time\":\"2017-10-26T22:47:23-07:00\"},{\"operation\":\"error\",\"message\":\"undefined method `get\' for nil:NilClass\",\"backtrace\":[\"(eval):13:in `block in add_debug_defaults\'\",\"(eval):11:in `each\'\",\"(eval):11:in `add_debug_defaults\'\",\"(eval):202:in `main\'\",\"/home/gnew/aq_planner/aquarium/lib/krill/manager.rb:125:in `debugger\'\",\"/home/gnew/aq_planner/aquarium/lib/krill/manager.rb:168:in `run\'\",\"/home/gnew/aq_planner/aquarium/app/controllers/plans_controller.rb:221:in `block in debug\'\",\"/home/gnew/aq_planner/aquarium/app/controllers/plans_controller.rb:185:in `each\'\",\"/home/gnew/aq_planner/aquarium/app/controllers/plans_controller.rb:185:in `debug\'\",\"/home/gnew/.rvm/gems/ruby-2.2.0@aquarium/gems/actionpack-3.2.22/lib/action_controller/metal/implicit_render.rb:4:in `send_action\'\"]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:47:23-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2017-10-27 05:47:23','2017-10-27 05:47:23','operation.rb',-2,235,1,'2017-10-27 05:47:23','2017-10-27 06:47:23',NULL,NULL),(42684,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":200},\"time\":\"2017-10-26T22:53:26-07:00\"}]','2017-10-27 05:53:26','2017-10-27 05:53:26','operation.rb',-1,235,1,'2017-10-27 05:53:26','2017-10-27 06:53:26',NULL,NULL),(42685,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":200},\"time\":\"2017-10-26T22:53:26-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"What type of Collection do you want to create?\"},{\"note\":\"object type name must be exactly correct\"},{\"input\":{\"var\":\"object_type\",\"label\":\"Object type\",\"default\":\"Stripwell\",\"type\":\"text\"}},{\"input\":{\"var\":\"location\",\"label\":\"Location\",\"default\":\"Bench\",\"type\":\"text\"}}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:53:36-07:00\",\"inputs\":{\"timestamp\":1509083616.273,\"object_type\":\"Agar Plate Batch\",\"location\":\"Bench\",\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"Collection Created!\"},{\"note\":\"Made new Agar Plate Batch\"},{\"note\":\"Collection link <a href=\'/items/99793\' class=\'aquarium-item\' id=\'99793\'>99793</a>\"},{\"note\":\"Now we will populate the collection with samples of your choice\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:53:37-07:00\",\"inputs\":{\"timestamp\":1509083617.538,\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"how many samples to add to 99793\"},{\"input\":{\"var\":\"sample\",\"label\":\"Sample id to add\",\"default\":7,\"type\":\"number\"}},{\"input\":{\"var\":\"add\",\"label\":\"how many to add\",\"default\":0,\"type\":\"number\"}},{\"select\":{\"var\":\"continue\",\"label\":\"I want to add a different sample as well\",\"multiple\":false,\"default\":1,\"choices\":[\"Yes\",\"No\"]}},{\"table\":[[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:54:18-07:00\",\"inputs\":{\"timestamp\":1509083658.048,\"sample\":20347,\"add\":80,\"continue\":\"No\",\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"Collection finsished and ready to use\"},{\"note\":\"Use the \'edit collection\' protocol to add or remove samples\"},{\"table}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:54:19-07:00\",\"inputs\":{\"timestamp\":1509083659.739,\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return the Following Additional Item(s)\"},{\"take\":{\"id\":99793,\"location\":\"Bench\",\"name\":\"Agar Plate Batch\"}}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:54:20-07:00\",\"inputs\":{\"timestamp\":1509083660.795,\"table_inputs\":[]}},{\"operation\":\"complete\",\"rval\":{}}]','2017-10-27 05:53:26','2017-10-27 05:54:20','operation.rb',-2,235,1,'2017-10-27 05:53:26','2017-10-27 06:53:26',NULL,NULL),(42690,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":191},\"time\":\"2017-10-26T22:59:01-07:00\"}]','2017-10-27 05:59:01','2017-10-27 05:59:01','operation.rb',-1,235,1,'2017-10-27 05:59:01','2017-10-27 06:59:01',NULL,NULL),(42691,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":191},\"time\":\"2017-10-26T22:59:01-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":99788,\"location\":\"37C shaker\",\"name\":\"Transformed E. coli Aliquot\",\"sample\":\"my first plasmid\",\"type\":\"Plasmid\"}}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:59:03-07:00\",\"inputs\":{\"timestamp\":1509083943000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Grab 1 of LB + Amp plates\"},{\"note\":\"Grab 1 plates from batch 99793\"},{\"check\":\"Label the top of the plates with your intials, the date, and the following ids: 99798 JN\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:59:03-07:00\",\"inputs\":{\"timestamp\":1509083943000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Spin down tubes and resuspend\"},{\"check\":\"Remove the transformed cells in 1.5 mL tubes from the 250 mL flask.\"},{\"check\":\"Centrifuge for 4,000 x g for 1 minute.\"},{\"check\":\"Carefully remove most of the supernatant using a P1000 pipette. Leave 100-200uL of supernatant in each tube.\"},{\"check\":\" Resuspend the cells in the remaining supernatant by vortexing.\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:59:03-07:00\",\"inputs\":{\"timestamp\":1509083943000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Plate transformed E coli aliquots\"},{\"check\":\"Use sterile beads to plate THE ENTIRE VOLUME (~200 uL) from the transformed aliquots (1.5 mL tubes) onto the plates, following the table below.\"},{\"warning\":\"Note the change in plating volume!\"},{\"check\":\"Discard used transformed aliquots after plating.\"},{\"table\":[[\"1.5 mL tube\",\"LB + Amp Plate\"],[99788,99798]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:59:03-07:00\",\"inputs\":{\"timestamp\":1509083943000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return the Following Item(s)\"},{\"take\":{\"id\":99798,\"location\":\"37 C incubator\",\"name\":\"E coli Plate of Plasmid\",\"sample\":\"my first plasmid\",\"type\":\"Plasmid\"}}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:59:03-07:00\",\"inputs\":{\"timestamp\":1509083943000}},{\"operation\":\"complete\",\"rval\":{}}]','2017-10-27 05:59:01','2017-10-27 05:59:03','operation.rb',-2,235,1,'2017-10-27 05:59:01','2017-10-27 06:59:01',NULL,NULL),(42692,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":192},\"time\":\"2017-10-26T22:59:45-07:00\"}]','2017-10-27 05:59:45','2017-10-27 05:59:45','operation.rb',-1,235,1,'2017-10-27 05:59:45','2017-10-27 06:59:45',NULL,NULL),(42693,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":192},\"time\":\"2017-10-26T22:59:45-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":99798,\"location\":\"37 C incubator\",\"name\":\"E coli Plate of Plasmid\",\"sample\":\"my first plasmid\",\"type\":\"Plasmid\"}}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:59:47-07:00\",\"inputs\":{\"timestamp\":1509083987000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Estimate colony numbers\"},{\"input\":{\"var\":\"n99798\",\"label\":\"Estimate how many colonies are on <a href=\'/items/99798\' class=\'aquarium-item\' id=\'99798\'>99798</a>\",\"default\":5,\"type\":\"number\"}},{\"select\":{\"var\":\"s<a href=\'/items/99798\' class=\'aquarium-item\' id=\'99798\'>99798</a>\",\"label\":\"Choose whether there is contamination, a lawn, or whether it\'s normal.\",\"multiple\":false,\"choices\":[\"normal\",\"contamination\",\"lawn\"]}}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:59:47-07:00\",\"inputs\":{\"n99798\":5,\"s<a href=\'/items/99798\' class=\'aquarium-item\' id=\'99798\'>99798</a>\":\"normal\",\"timestamp\":1509083987000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Label and Parafilm\"},{\"note\":\"Perform the steps with the following plates: [99798]\"},{\"note\":\"Label the plates with their item ID numbers on the side, and parafilm each one.\"},{\"note\":\"Labelling the plates on the side makes it easier to retrieve them from the fridge.\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:59:47-07:00\",\"inputs\":{\"timestamp\":1509083987000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return the Following Additional Item(s)\"},{\"take\":{\"id\":99798,\"location\":\"Bench\",\"name\":\"Checked E coli Plate of Plasmid\",\"sample\":\"my first plasmid\",\"type\":\"Plasmid\"}}]},{\"operation\":\"next\",\"time\":\"2017-10-26T22:59:47-07:00\",\"inputs\":{\"timestamp\":1509083987000}},{\"operation\":\"complete\",\"rval\":{}}]','2017-10-27 05:59:45','2017-10-27 05:59:47','operation.rb',-2,235,1,'2017-10-27 05:59:45','2017-10-27 06:59:45',NULL,NULL),(42694,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":194},\"time\":\"2017-10-26T23:00:03-07:00\"}]','2017-10-27 06:00:03','2017-10-27 06:00:03','operation.rb',-1,235,1,'2017-10-27 06:00:03','2017-10-27 07:00:03',NULL,NULL),(42695,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":194},\"time\":\"2017-10-26T23:00:03-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":99798,\"location\":\"Bench\",\"name\":\"Checked E coli Plate of Plasmid\",\"sample\":\"my first plasmid\",\"type\":\"Plasmid\"}}]},{\"operation\":\"next\",\"time\":\"2017-10-26T23:00:05-07:00\",\"inputs\":{\"timestamp\":1509084005000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Label and load overnight tubes\"},{\"note\":\"In the Media Bay, collect 1 14mL tubes\"},{\"note\":\"Write the overnight id on the corresponding tube and load with the correct media type.\"},{\"table\":[[\"Overnight Item ID (output)\",\"Media\",\"Quantity\"],[{\"content\":99799,\"check\":true},\"TB+AMP\",\"3 mL\"]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T23:00:05-07:00\",\"inputs\":{\"timestamp\":1509084005000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Inoculation from Checked E coli Plate of Plasmid\"},{\"note\":\"Use 10 L sterile tips to inoculate colonies from plate into 14 mL tubes according to the following table.\"},{\"check\":\"Mark each colony on the plate with corresponding overnight id. If the same plate id appears more than once in the table, inoculate different isolated colonies on that plate.\"},{\"table\":[[\"Checked E coli Plate of Plasmid\",\"Checked E coli Plate of Plasmid Location\",\"Overnight Item ID (output)\"],[99798,\"Bench\",{\"content\":99799,\"check\":true}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T23:00:05-07:00\",\"inputs\":{\"timestamp\":1509084005000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return the Following Additional Item(s)\"},{\"take\":{\"id\":99798,\"location\":\"Bench\",\"name\":\"Checked E coli Plate of Plasmid\",\"sample\":\"my first plasmid\",\"type\":\"Plasmid\"}},{\"take\":{\"id\":99799,\"location\":\"37 C shaker incubator\",\"name\":\"TB Overnight of Plasmid\",\"sample\":\"my first plasmid\",\"type\":\"Plasmid\"}}]},{\"operation\":\"next\",\"time\":\"2017-10-26T23:00:05-07:00\",\"inputs\":{\"timestamp\":1509084005000}},{\"operation\":\"complete\",\"rval\":{}}]','2017-10-27 06:00:03','2017-10-27 06:00:05','operation.rb',-2,235,1,'2017-10-27 06:00:03','2017-10-27 07:00:03',NULL,NULL),(42696,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":195},\"time\":\"2017-10-26T23:00:30-07:00\"}]','2017-10-27 06:00:30','2017-10-27 06:00:30','operation.rb',-1,235,1,'2017-10-27 06:00:30','2017-10-27 07:00:30',NULL,NULL),(42697,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":195},\"time\":\"2017-10-26T23:00:30-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":99799,\"location\":\"37 C shaker incubator\",\"name\":\"TB Overnight of Plasmid\",\"sample\":\"my first plasmid\",\"type\":\"Plasmid\"}}]},{\"operation\":\"next\",\"time\":\"2017-10-26T23:00:32-07:00\",\"inputs\":{\"timestamp\":1509084032000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Check if overnights have growth\"},{\"note\":\"Choose No for the overnight that does not have growth and throw them away or put in the clean station.\"},{\"select\":{\"var\":\"99799\",\"label\":\"Does tube 99799 have growth?\",\"multiple\":false,\"choices\":[\"Yes\",\"No\"]}}]},{\"operation\":\"next\",\"time\":\"2017-10-26T23:00:32-07:00\",\"inputs\":{\"99799\":\"Yes\",\"timestamp\":1509084032000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer Overnights into 1.5 mL Tubes\"},{\"note\":\"Grab 1 1.5 mL tubes and label from 1 to 1\"},{\"note\":\"Transfer 1.5 mL of the overnight into the corresponding 1.5 mL tube.\"},{\"table\":[[\"Plasmid Item ID (input)\",\"Tube Number\"],[99799,1]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T23:00:33-07:00\",\"inputs\":{\"timestamp\":1509084033000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Spin down the cells\"},{\"check\":\"Spin at 5,800 xg for 2 minutes, make sure to balance.\"},{\"check\":\"Remove the supernatant. Pour off the supernatant into liquid waste, being sure not to upset the pellet. Pipette out the residual supernatant.\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T23:00:33-07:00\",\"inputs\":{\"timestamp\":1509084033000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Resuspend in P1, P2, N3\"},{\"check\":\"Add 250 uL of P1 into each tube and vortex strongly to resuspend.\"},{\"check\":\"Add 250 uL of P2 and gently invert 5-10 times to mix, tube contents should turn blue.\"},{\"check\":\"Pipette 350 uL of N3 into each tube and gently invert 5-10 times to mix. Tube contents should turn colorless.\"},{\"warning\":\"Time between adding P2 and N3 should be minimized. Cells should not be exposed to active P2 for more than 5 minutes\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T23:00:33-07:00\",\"inputs\":{\"timestamp\":1509084033000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Centrifuge and add to columns\"},{\"check\":\"Spin tubes at 17,000 xg for 10 minutes\"},{\"warning\":\"Make sure to balance the centrifuge.\"},{\"check\":\"Grab 1 blue miniprep spin columns and label with 1 to 1.\"},{\"check\":\"Remove the tubes from centrifuge and carefully pipette the supernatant (up to 750 uL) into the same labeled columns.\"},{\"warning\":\"Be careful not to disturb the pellet.\"},{\"check\":\"Discard the used 1.5 mL tubes into waste bin.\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T23:00:33-07:00\",\"inputs\":{\"timestamp\":1509084033000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Spin and Wash\"},{\"check\":\"Spin all columns at 17,000 xg for 1 minute. Make sure to balance.\"},{\"check\":\"Remove the columns from the centrifuge and discard the flow through into a liquid waste container\"},{\"check\":\"Add 750 uL of PE buffer to each column. Make sure the PE bottle that you are using has ethanol added!\"},{\"check\":\"Spin the columns at 17,000 xg for 1 minute\"},{\"check\":\"Remove the columns from the centrifuge and discard the flow through into a liquid waste container.\"},{\"check\":\"Perform a final spin: spin all columns at 17,000 xg for 1 minute.\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T23:00:33-07:00\",\"inputs\":{\"timestamp\":1509084033000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Elute with water\"},{\"check\":\"Grab  1 new 1.5 mL tubes and label top of the tube with 1 to  1.\"},{\"check\":\"Remove the columns from the centrifuge\"},{\"check\":\"Inidividually take each column out of the flowthrough collector and put it into the labeled 1.5 mL tube with the same number, discard the flowthrough collector.\"},{\"warning\":\"For this step, use a new pipette tip for each sample to avoid cross contamination\"},{\"check\":\"Pipette 50 uL of water into the CENTER of each column\"},{\"check\":\"Let the tubes sit on the bench for 2 minutes\"},{\"check\":\"Spin the columns at 17,000 xg for 1 minute\"},{\"check\":\"Remove the tubes and discard the columns\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T23:00:33-07:00\",\"inputs\":{\"timestamp\":1509084033000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Relabel Tubes\"},{\"note\":\"Relabel each tube with the corresponding item ID\"},{\"table\":[[\"Tube Number\",\"Plasmid Item ID (output)\"],[1,99800]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T23:00:33-07:00\",\"inputs\":{\"timestamp\":1509084033000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Nanodrop and Enter Concentration\"},{\"note\":\"Nanodrop each plasmid and enter the concentration below\"},{\"table\":[[\"Plasmid Item ID (output)\",\"Concentration\"],[99800,{\"type\":\"number\",\"operation_id\":3014,\"key\":\"concentration\",\"default\":200}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T23:00:33-07:00\",\"inputs\":{\"timestamp\":1509084033000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Boxes Required\"},{\"note\":\"You will need the following boxes from the freezer(s)\"},{\"table\":[[{\"content\":\"M20.0.0\",\"check\":true}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T23:00:33-07:00\",\"inputs\":{\"timestamp\":1509084033000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return to M20.0.0\"},{\"note\":\"Return Item(s)\"},{\"table\":[[{\"content\":0,\"class\":\"td-empty-slot\"},{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"}],[{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"},{\"content\":99800,\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"}],[{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"},{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"}],[{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"}],[{\"content\":36,\"class\":\"td-empty-slot\"},{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"}],[{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"},{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"}],[{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"},{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"}],[{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"}],[{\"content\":72,\"class\":\"td-empty-slot\"},{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T23:00:33-07:00\",\"inputs\":{\"timestamp\":1509084033000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return the Following Additional Item(s)\"},{\"take\":{\"id\":99799,\"location\":\"Bench\",\"name\":\"TB Overnight of Plasmid\",\"sample\":\"my first plasmid\",\"type\":\"Plasmid\"}}]},{\"operation\":\"next\",\"time\":\"2017-10-26T23:00:33-07:00\",\"inputs\":{\"timestamp\":1509084033000}},{\"operation\":\"complete\",\"rval\":{}}]','2017-10-27 06:00:30','2017-10-27 06:00:33','operation.rb',-2,235,1,'2017-10-27 06:00:30','2017-10-27 07:00:30',NULL,NULL),(42698,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":196},\"time\":\"2017-10-26T23:00:41-07:00\"}]','2017-10-27 06:00:41','2017-10-27 06:00:41','operation.rb',-1,235,1,'2017-10-27 06:00:41','2017-10-27 07:00:41',NULL,NULL),(42699,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":196},\"time\":\"2017-10-26T23:00:41-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Boxes Required\"},{\"note\":\"You will need the following boxes from the freezer(s)\"},{\"table\":[[{\"content\":\"M20.0.0\",\"check\":true}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T23:00:53-07:00\",\"inputs\":{\"timestamp\":1509084053.059,\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"Take from M20.0.0\"},{\"note\":\"Collect Item(s)\"},{\"table\":[[{\"content\":0,\"class\":\"td-empty-slot\"},{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":99738,\"class\":\"td-filled-slot\",\"check\":true},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"}],[{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":99775,\"class\":\"td-filled-slot\",\"check\":true},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"},{\"content\":99800,\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"}],[{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"},{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"}],[{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"}],[{\"content\":36,\"class\":\"td-empty-slot\"},{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"}],[{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"},{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"}],[{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"},{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"}],[{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"}],[{\"content\":72,\"class\":\"td-empty-slot\"},{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T23:00:53-07:00\",\"inputs\":{\"timestamp\":1509084053.879,\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"Verify enough volume of each Plasmid exists, or note if contamination is present\"},{\"select\":{\"var\":\"99800\",\"label\":\"Is there at least 5.2 µL of 99800?\",\"multiple\":false,\"default\":0,\"choices\":[\"Yes\",\"No\",\"Contamination is present\"]}}]},{\"operation\":\"next\",\"time\":\"2017-10-26T23:00:55-07:00\",\"inputs\":{\"99800\":\"Yes\",\"timestamp\":1509084055.586,\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"Verify enough volume of each Sequencing Primer exists, or note if contamination is present\"},{\"select\":{\"var\":\"99738\",\"label\":\"Is there at least 2.5 µL of 99738?\",\"multiple\":false,\"default\":0,\"choices\":[\"Yes\",\"No\",\"Contamination is present\"]}},{\"select\":{\"var\":\"99775\",\"label\":\"Is there at least 2.5 µL of 99775?\",\"multiple\":false,\"default\":0,\"choices\":[\"Yes\",\"No\",\"Contamination is present\"]}}]},{\"operation\":\"next\",\"time\":\"2017-10-26T23:00:56-07:00\",\"inputs\":{\"99738\":\"Yes\",\"99775\":\"Yes\",\"timestamp\":1509084056.696,\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"Prepare stripwells for sequencing reaction\"},{\"check\":\"Prepare a 2-well stripwell, and label the first well with \\n                 UB1 and the last well with UB2\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T23:00:57-07:00\",\"inputs\":{\"timestamp\":1509084057.735,\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"Load stripwells 99801 with molecular grade water\"},{\"note\":\"Stripwell 1\"},{\"table\":[[\"Well\",\"Molecular Grade Water (uL)\"],[1,{\"content\":10.0,\"check\":true}],[2,{\"content\":10.0,\"check\":true}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T23:00:59-07:00\",\"inputs\":{\"timestamp\":1509084059.01,\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"Load stripwells 99801 with plasmid stock\"},{\"note\":\"Stripwell 1\"},{\"table\":[[\"Well\",\"Stock\",\"Volume (uL)\"],[1,99800,{\"content\":2.6,\"check\":true}],[2,99800,{\"content\":2.6,\"check\":true}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T23:01:00-07:00\",\"inputs\":{\"timestamp\":1509084060.474,\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"Load stripwells 99801 with Primer\"},{\"note\":\"Stripwell 1\"},{\"table\":[[\"Well\",\"Primer Aliquot\",\"Volume (uL)\"],[1,99738,{\"content\":2.5,\"check\":true}],[2,99775,{\"content\":2.5,\"check\":true}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T23:01:01-07:00\",\"inputs\":{\"timestamp\":1509084061.507,\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"Boxes Required\"},{\"note\":\"You will need the following boxes from the freezer(s)\"},{\"table\":[[{\"content\":\"M20.0.0\",\"check\":true}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T23:01:04-07:00\",\"inputs\":{\"timestamp\":1509084064.349,\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return to M20.0.0\"},{\"note\":\"Return Item(s)\"},{\"table\":[[{\"content\":0,\"class\":\"td-empty-slot\"},{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":99738,\"class\":\"td-filled-slot\",\"check\":true},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"}],[{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":99775,\"class\":\"td-filled-slot\",\"check\":true},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"},{\"content\":99800,\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"}],[{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"},{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"}],[{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"}],[{\"content\":36,\"class\":\"td-empty-slot\"},{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"}],[{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"},{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"}],[{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"},{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"}],[{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"}],[{\"content\":72,\"class\":\"td-empty-slot\"},{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T23:01:05-07:00\",\"inputs\":{\"timestamp\":1509084065.277,\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"Create a Genewiz order\"},{\"check\":\"Go the <a href=\'https://clims3.genewiz.com/default.aspx\' target=\'_blank\'>GENEWIZ website</a>, log in with lab account (Username: biofab@uw.edu, password is glauber1).\"},{\"check\":\"Click Create Sequencing Order, choose Same Day, Online Form, Pre-Mixed, 2 samples, then Create New Form\"},{\"check\":\"Enter DNA Name and My Primer Name according to the following table, choose DNA Type to be Plasmid\"},{\"table\":[[\"DNA Name\",\"DNA Type\",\"DNA Length\",\"My Primer Name\"],[\"99800-Joe_Neptune\",\"Plasmid\",0.0,20339],[\"99800-Joe_Neptune\",\"Plasmid\",0.0,20339]]},{\"check\":\"Click Save & Next, Review the form and click Next Step\"},{\"check\":\"Enter Quotation Number MS0721101, click Next Step\"},{\"check\":\"Print out the form and enter the Genewiz tracking number below.\"},{\"input\":{\"var\":\"tracking_num\",\"label\":\"Enter the Genewiz tracking number\",\"default\":\"Replace-Me\",\"type\":\"text\"}}]},{\"operation\":\"next\",\"time\":\"2017-10-26T23:01:17-07:00\",\"inputs\":{\"timestamp\":1509084077.48,\"tracking_num\":\"123412-129\",\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put all stripwells in the Genewiz dropbox\"},{\"check\":\"Cap all of the stripwells.\"},{\"check\":\"Wrap the stripwells in parafilm.\"},{\"check\":\"Put the stripwells into a zip-lock bag along with the printed Genewiz order form.\"},{\"check\":\"Ensure that the bag is sealed, and put it into the Genewiz dropbox.\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T23:01:19-07:00\",\"inputs\":{\"timestamp\":1509084079.114,\"table_inputs\":[]}},{\"operation\":\"complete\",\"rval\":{}}]','2017-10-27 06:00:41','2017-10-27 06:01:19','operation.rb',-2,235,1,'2017-10-27 06:00:41','2017-10-27 07:00:41',NULL,NULL),(42700,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":198},\"time\":\"2017-10-26T23:01:31-07:00\"}]','2017-10-27 06:01:31','2017-10-27 06:01:31','operation.rb',-1,235,1,'2017-10-27 06:01:31','2017-10-27 07:01:31',NULL,NULL),(42701,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":198},\"time\":\"2017-10-26T23:01:31-07:00\"},{\"operation\":\"error\",\"message\":\"undefined method `get\' for nil:NilClass\",\"backtrace\":[\"(eval):28:in `block in ensure_same_tracking_number\'\",\"(eval):28:in `each\'\",\"(eval):28:in `ensure_same_tracking_number\'\",\"(eval):203:in `main\'\",\"/home/gnew/aq_planner/aquarium/lib/krill/manager.rb:66:in `block in start_thread\'\"]},{\"operation\":\"next\",\"time\":\"2017-10-26T23:01:33-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2017-10-27 06:01:31','2017-10-27 06:01:33','operation.rb',-2,235,1,'2017-10-27 06:01:31','2017-10-27 07:01:31',NULL,NULL),(42702,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":198},\"time\":\"2017-10-26T23:05:22-07:00\"}]','2017-10-27 06:05:22','2017-10-27 06:05:22','operation.rb',-1,235,1,'2017-10-27 06:05:22','2017-10-27 07:05:22',NULL,NULL),(42703,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":198},\"time\":\"2017-10-26T23:05:22-07:00\"},{\"operation\":\"error\",\"message\":\"undefined method `get\' for nil:NilClass\",\"backtrace\":[\"(eval):13:in `block in add_debug_defaults\'\",\"(eval):11:in `each\'\",\"(eval):11:in `add_debug_defaults\'\",\"(eval):202:in `main\'\",\"/home/gnew/aq_planner/aquarium/lib/krill/manager.rb:125:in `debugger\'\",\"/home/gnew/aq_planner/aquarium/lib/krill/manager.rb:168:in `run\'\",\"/home/gnew/aq_planner/aquarium/app/controllers/plans_controller.rb:221:in `block in debug\'\",\"/home/gnew/aq_planner/aquarium/app/controllers/plans_controller.rb:185:in `each\'\",\"/home/gnew/aq_planner/aquarium/app/controllers/plans_controller.rb:185:in `debug\'\",\"/home/gnew/.rvm/gems/ruby-2.2.0@aquarium/gems/actionpack-3.2.22/lib/action_controller/metal/implicit_render.rb:4:in `send_action\'\"]},{\"operation\":\"next\",\"time\":\"2017-10-26T23:05:22-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2017-10-27 06:05:22','2017-10-27 06:05:22','operation.rb',-2,235,1,'2017-10-27 06:05:22','2017-10-27 07:05:22',NULL,NULL),(42704,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":198},\"time\":\"2017-10-26T23:07:14-07:00\"}]','2017-10-27 06:07:14','2017-10-27 06:07:14','operation.rb',-1,235,1,'2017-10-27 06:07:14','2017-10-27 07:07:14',NULL,NULL),(42705,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":198},\"time\":\"2017-10-26T23:07:14-07:00\"},{\"operation\":\"error\",\"message\":\"undefined method `get\' for nil:NilClass\",\"backtrace\":[\"(eval):13:in `block in add_debug_defaults\'\",\"(eval):11:in `each\'\",\"(eval):11:in `add_debug_defaults\'\",\"(eval):202:in `main\'\",\"/home/gnew/aq_planner/aquarium/lib/krill/manager.rb:125:in `debugger\'\",\"/home/gnew/aq_planner/aquarium/lib/krill/manager.rb:168:in `run\'\",\"/home/gnew/aq_planner/aquarium/app/controllers/plans_controller.rb:221:in `block in debug\'\",\"/home/gnew/aq_planner/aquarium/app/controllers/plans_controller.rb:185:in `each\'\",\"/home/gnew/aq_planner/aquarium/app/controllers/plans_controller.rb:185:in `debug\'\",\"/home/gnew/.rvm/gems/ruby-2.2.0@aquarium/gems/actionpack-3.2.22/lib/action_controller/metal/implicit_render.rb:4:in `send_action\'\"]},{\"operation\":\"next\",\"time\":\"2017-10-26T23:07:15-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2017-10-27 06:07:14','2017-10-27 06:07:15','operation.rb',-2,235,1,'2017-10-27 06:07:14','2017-10-27 07:07:14',NULL,NULL),(42708,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":198},\"time\":\"2017-10-26T23:10:11-07:00\"}]','2017-10-27 06:10:11','2017-10-27 06:10:11','operation.rb',-1,235,1,'2017-10-27 06:10:11','2017-10-27 07:10:11',NULL,NULL),(42709,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":198},\"time\":\"2017-10-26T23:10:11-07:00\"},{\"operation\":\"error\",\"message\":\"undefined method `get\' for nil:NilClass\",\"backtrace\":[\"(eval):13:in `block in add_debug_defaults\'\",\"(eval):11:in `each\'\",\"(eval):11:in `add_debug_defaults\'\",\"(eval):202:in `main\'\",\"/home/gnew/aq_planner/aquarium/lib/krill/manager.rb:125:in `debugger\'\",\"/home/gnew/aq_planner/aquarium/lib/krill/manager.rb:168:in `run\'\",\"/home/gnew/aq_planner/aquarium/app/controllers/plans_controller.rb:221:in `block in debug\'\",\"/home/gnew/aq_planner/aquarium/app/controllers/plans_controller.rb:185:in `each\'\",\"/home/gnew/aq_planner/aquarium/app/controllers/plans_controller.rb:185:in `debug\'\",\"/home/gnew/.rvm/gems/ruby-2.2.0@aquarium/gems/actionpack-3.2.22/lib/action_controller/metal/implicit_render.rb:4:in `send_action\'\"]},{\"operation\":\"next\",\"time\":\"2017-10-26T23:10:11-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2017-10-27 06:10:11','2017-10-27 06:10:11','operation.rb',-2,235,1,'2017-10-27 06:10:11','2017-10-27 07:10:11',NULL,NULL),(42710,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":198},\"time\":\"2017-10-26T23:11:24-07:00\"}]','2017-10-27 06:11:24','2017-10-27 06:11:24','operation.rb',-1,235,1,'2017-10-27 06:11:24','2017-10-27 07:11:24',NULL,NULL),(42711,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":198},\"time\":\"2017-10-26T23:11:24-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Check if Sequencing results arrived?\"},{\"check\":\"Go the Genewiz website, log in with lab account (Username: biofab@uw.edu, password is glabuer1).\"},{\"note\":\"In Recent Results table, click Tracking Number 123412-129, and check if the sequencing results have shown up yet.\"},{\"select\":{\"var\":\"results_back_or_not\",\"label\":\"Do the sequencing results show up?\",\"multiple\":false,\"default\":0,\"choices\":[\"Yes\",\"No\"]}}]},{\"operation\":\"next\",\"time\":\"2017-10-26T23:11:31-07:00\",\"inputs\":{\"timestamp\":1509084691.846,\"results_back_or_not\":\"Yes\",\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"Download Genewiz Sequencing Results zip file\"},{\"note\":\"Click the button \'Download All Selected Trace Files\' (Not Download All Sequence Files), which should download a zip file named 123412-129-some-random-number.zip.\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T23:11:34-07:00\",\"inputs\":{\"timestamp\":1509084694.022,\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"Upload individual sequencing results\"},{\"note\":\"Unzip the downloaded zip file named 123412-129_ab1.zip.\"},{\"note\":\"If you are on a Windows machine, right click the 123412-129-some-random-number.zip file, click Extract All, then click Extract.\"},{\"note\":\"Upload all the unzipped ab1 file below by navigating to the upzipped folder.\"},{\"note\":\"You can click Command + A on Mac or Ctrl + A on Windows to select all files.\"},{\"note\":\"Wait until all the uploads finished (a number appears at the end of file name).\"},{\"upload\":{\"var\":\"sequencing_results\"}},{\"table\":[[\"Expected Filenames\"],[\"99800-Joe_Neptune-20339.ab1\"],[\"99800-Joe_Neptune-20339.ab1\"]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T23:13:43-07:00\",\"inputs\":{\"timestamp\":1509084823.144,\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"Upload individual sequencing results\"},{\"note\":\"Unzip the downloaded zip file named 123412-129_ab1.zip.\"},{\"note\":\"If you are on a Windows machine, right click the 123412-129-some-random-number.zip file, click Extract All, then click Extract.\"},{\"note\":\"Upload all the unzipped ab1 file below by navigating to the upzipped folder.\"},{\"note\":\"You can click Command + A on Mac or Ctrl + A on Windows to select all files.\"},{\"note\":\"Wait until all the uploads finished (a number appears at the end of file name).\"},{\"upload\":{\"var\":\"sequencing_results\"}},{\"table\":[[\"Expected Filenames\"],[\"99800-Joe_Neptune-20339.ab1\"],[\"99800-Joe_Neptune-20339.ab1\"]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T23:13:44-07:00\",\"inputs\":{\"timestamp\":1509084824.586,\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"Upload individual sequencing results\"},{\"note\":\"Unzip the downloaded zip file named 123412-129_ab1.zip.\"},{\"note\":\"If you are on a Windows machine, right click the 123412-129-some-random-number.zip file, click Extract All, then click Extract.\"},{\"note\":\"Upload all the unzipped ab1 file below by navigating to the upzipped folder.\"},{\"note\":\"You can click Command + A on Mac or Ctrl + A on Windows to select all files.\"},{\"note\":\"Wait until all the uploads finished (a number appears at the end of file name).\"},{\"upload\":{\"var\":\"sequencing_results\"}},{\"table\":[[\"Expected Filenames\"],[\"99800-Joe_Neptune-20339.ab1\"],[\"99800-Joe_Neptune-20339.ab1\"]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T23:13:45-07:00\",\"inputs\":{\"timestamp\":1509084825.814,\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"Upload individual sequencing results\"},{\"note\":\"Unzip the downloaded zip file named 123412-129_ab1.zip.\"},{\"note\":\"If you are on a Windows machine, right click the 123412-129-some-random-number.zip file, click Extract All, then click Extract.\"},{\"note\":\"Upload all the unzipped ab1 file below by navigating to the upzipped folder.\"},{\"note\":\"You can click Command + A on Mac or Ctrl + A on Windows to select all files.\"},{\"note\":\"Wait until all the uploads finished (a number appears at the end of file name).\"},{\"upload\":{\"var\":\"sequencing_results\"}},{\"table\":[[\"Expected Filenames\"],[\"99800-Joe_Neptune-20339.ab1\"],[\"99800-Joe_Neptune-20339.ab1\"]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T23:13:53-07:00\",\"inputs\":{\"timestamp\":1509084833.393,\"table_inputs\":[]}},{\"operation\":\"display\",\"content\":[{\"title\":\"Upload individual sequencing results\"},{\"note\":\"Unzip the downloaded zip file named 123412-129_ab1.zip.\"},{\"note\":\"If you are on a Windows machine, right click the 123412-129-some-random-number.zip file, click Extract All, then click Extract.\"},{\"note\":\"Upload all the unzipped ab1 file below by navigating to the upzipped folder.\"},{\"note\":\"You can click Command + A on Mac or Ctrl + A on Windows to select all files.\"},{\"note\":\"Wait until all the uploads finished (a number appears at the end of file name).\"},{\"upload\":{\"var\":\"sequencing_results\"}},{\"table\":[[\"Expected Filenames\"],[\"99800-Joe_Neptune-20339.ab1\"],[\"99800-Joe_Neptune-20339.ab1\"]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T23:13:54-07:00\",\"inputs\":{\"timestamp\":1509084834.782,\"table_inputs\":[]}},{\"operation\":\"complete\",\"rval\":{}}]','2017-10-27 06:11:24','2017-10-27 06:13:55','operation.rb',-2,235,1,'2017-10-27 06:11:24','2017-10-27 07:11:24',NULL,NULL),(42712,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":197},\"time\":\"2017-10-26T23:16:43-07:00\"}]','2017-10-27 06:16:43','2017-10-27 06:16:43','operation.rb',-1,235,1,'2017-10-27 06:16:43','2017-10-27 07:16:43',NULL,NULL),(42713,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":197},\"time\":\"2017-10-26T23:16:43-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":99799,\"location\":\"Bench\",\"name\":\"TB Overnight of Plasmid\",\"sample\":\"my first plasmid\",\"type\":\"Plasmid\"}}]},{\"operation\":\"next\",\"time\":\"2017-10-26T23:16:43-07:00\",\"inputs\":{\"timestamp\":1509085003000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Print out labels\"},{\"note\":\"On the computer near the label printer, open Excel document titled \'Glycerol stock label template\'.\"},{\"note\":\"Copy and paste the table below to the document and save.\"},{\"table\":[[\"Stock Item ID (output)\",\"Sample ID\",\"Sample Name\"],[99803,20337,\"my first plasmid\"]]},{\"note\":\"Ensure that the correct label type is loaded in the printer: B33-181-492 should show up on the display. \\n          If not, get help from a lab manager to load the correct label type.\"},{\"note\":\"Open the LabelMark 6 software and select \'Open\' --> \'File\' --> \'Glycerol stocks.l6f\'\"},{\"note\":\"A window should pop up. Under  \'Start\' enter 99803 and set \'Total\' to 1. Select \'Finish.\'\"},{\"note\":\"Click on the number in the top row of the horizontal side label and select \'Edit External Data\'. A window should pop up. Select \'Finish\'.\"},{\"note\":\"Select \'File\' --> \'Print\' and set the printer to \'BBP33\'.\"},{\"note\":\"Collect labels.\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T23:16:43-07:00\",\"inputs\":{\"timestamp\":1509085003000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Pipette Glycerol into Cryo Tubes\"},{\"check\":\"Take 1 Cryo tube\"},{\"check\":\"Label each tube with the printed out labels\"},{\"check\":\"Pipette 900 uL of 50 percent Glycerol into each tube.\"},{\"warning\":\"Make sure not to touch the inner side of the Glycerol bottle with the pipetter.\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T23:16:43-07:00\",\"inputs\":{\"timestamp\":1509085003000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer Into Cryo Tubes\"},{\"note\":\"Transfer <b>900 uL</b> of culture according to the following table:\"},{\"table\":[[\"Overnight\",\"Glycerol Stock ID\"],[99799,{\"content\":99803,\"check\":true}]]},{\"note\":\"Cap the Cryo tube and then vortex on a table top vortexer for about 20 seconds.\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T23:16:43-07:00\",\"inputs\":{\"timestamp\":1509085003000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Discard overnights\"},{\"note\":\"Please discard all of the following overnights in the dishwashing area:\"},{\"note\":\"99799\"}]},{\"operation\":\"next\",\"time\":\"2017-10-26T23:16:43-07:00\",\"inputs\":{\"timestamp\":1509085003000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Boxes Required\"},{\"note\":\"You will need the following boxes from the freezer(s)\"},{\"table\":[[{\"content\":\"M80.0.0\",\"check\":true}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T23:16:43-07:00\",\"inputs\":{\"timestamp\":1509085003000}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return to M80.0.0\"},{\"note\":\"Return Item(s)\"},{\"table\":[[{\"content\":99803,\"class\":\"td-filled-slot\",\"check\":true},{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"}],[{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"},{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"}],[{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"},{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"}],[{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"}],[{\"content\":36,\"class\":\"td-empty-slot\"},{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"}],[{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"},{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"}],[{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"},{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"}],[{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"}],[{\"content\":72,\"class\":\"td-empty-slot\"},{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2017-10-26T23:16:43-07:00\",\"inputs\":{\"timestamp\":1509085003000}},{\"operation\":\"complete\",\"rval\":{}}]','2017-10-27 06:16:43','2017-10-27 06:16:43','operation.rb',-2,235,1,'2017-10-27 06:16:43','2017-10-27 07:16:43',NULL,NULL),(42714,NULL,NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":199},\"time\":\"2017-10-26T23:17:12-07:00\"}]','2017-10-27 06:17:12','2017-10-27 06:17:12','operation.rb',-1,235,1,'2017-10-27 06:17:12','2017-10-27 07:17:12',NULL,NULL),(42715,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":199},\"time\":\"2017-10-26T23:17:12-07:00\"},{\"operation\":\"complete\",\"rval\":{}}]','2017-10-27 06:17:12','2017-10-27 06:17:13','operation.rb',-2,235,1,'2017-10-27 06:17:12','2017-10-27 07:17:12',NULL,NULL);
/*!40000 ALTER TABLE `jobs` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `libraries`
--

DROP TABLE IF EXISTS `libraries`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `libraries` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL,
  `category` varchar(255) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `libraries`
--

LOCK TABLES `libraries` WRITE;
/*!40000 ALTER TABLE `libraries` DISABLE KEYS */;
INSERT INTO `libraries` VALUES (11,'Gradient PCR','Cloning Libs','2017-10-02 16:30:02','2017-10-02 17:51:46'),(12,'Cloning','Cloning Libs','2017-10-02 16:31:18','2017-10-02 16:31:29'),(13,'Debug','Standard Libs','2017-10-02 16:31:48','2017-10-02 16:31:57'),(14,'Preconditions','Standard Libs','2017-10-27 05:41:45','2017-10-27 05:41:56');
/*!40000 ALTER TABLE `libraries` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `locators`
--

DROP TABLE IF EXISTS `locators`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `locators` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `wizard_id` int(11) DEFAULT NULL,
  `item_id` int(11) DEFAULT NULL,
  `number` int(11) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=32365 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `locators`
--

LOCK TABLES `locators` WRITE;
/*!40000 ALTER TABLE `locators` DISABLE KEYS */;
INSERT INTO `locators` VALUES (32350,13,99733,0,'2017-10-02 16:42:05','2017-10-02 17:42:54'),(32351,13,99736,1,'2017-10-02 17:51:15','2017-10-02 17:51:15'),(32352,13,99737,2,'2017-10-02 17:51:15','2017-10-02 17:51:15'),(32353,13,99738,3,'2017-10-02 17:51:15','2017-10-02 17:51:15'),(32354,13,99739,4,'2017-10-02 17:51:15','2017-10-02 17:51:15'),(32355,13,99740,5,'2017-10-02 17:59:39','2017-10-02 17:59:39'),(32356,13,99741,6,'2017-10-02 18:16:52','2017-10-02 18:16:52'),(32357,13,99748,7,'2017-10-27 05:04:30','2017-10-27 05:04:30'),(32358,13,99751,8,'2017-10-27 05:09:37','2017-10-27 05:09:37'),(32359,13,99752,9,'2017-10-27 05:09:37','2017-10-27 05:09:37'),(32360,13,99775,10,'2017-10-27 05:35:24','2017-10-27 05:35:24'),(32361,13,99776,11,'2017-10-27 05:35:24','2017-10-27 05:35:24'),(32362,13,99778,12,'2017-10-27 05:35:38','2017-10-27 05:35:38'),(32363,13,99800,13,'2017-10-27 06:00:33','2017-10-27 06:00:33'),(32364,14,99803,0,'2017-10-27 06:16:43','2017-10-27 06:16:43');
/*!40000 ALTER TABLE `locators` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `logs`
--

DROP TABLE IF EXISTS `logs`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `logs` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `job_id` int(11) DEFAULT NULL,
  `user_id` varchar(255) DEFAULT NULL,
  `entry_type` varchar(255) DEFAULT NULL,
  `data` text,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `logs`
--

LOCK TABLES `logs` WRITE;
/*!40000 ALTER TABLE `logs` DISABLE KEYS */;
/*!40000 ALTER TABLE `logs` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `memberships`
--

DROP TABLE IF EXISTS `memberships`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `memberships` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) DEFAULT NULL,
  `group_id` int(11) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=543 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `memberships`
--

LOCK TABLES `memberships` WRITE;
/*!40000 ALTER TABLE `memberships` DISABLE KEYS */;
INSERT INTO `memberships` VALUES (541,1,1,'2017-10-02 16:21:25','2017-10-02 16:21:25'),(542,1,235,'2017-10-02 17:50:59','2017-10-02 17:50:59');
/*!40000 ALTER TABLE `memberships` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `object_types`
--

DROP TABLE IF EXISTS `object_types`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `object_types` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL,
  `description` varchar(255) DEFAULT NULL,
  `min` int(11) DEFAULT NULL,
  `max` int(11) DEFAULT NULL,
  `handler` varchar(255) DEFAULT NULL,
  `safety` text,
  `cleanup` text,
  `data` text,
  `vendor` text,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  `unit` varchar(255) DEFAULT NULL,
  `cost` float DEFAULT NULL,
  `release_method` varchar(255) DEFAULT NULL,
  `release_description` text,
  `sample_type_id` int(11) DEFAULT NULL,
  `image` varchar(255) DEFAULT NULL,
  `prefix` varchar(255) DEFAULT NULL,
  `rows` int(11) DEFAULT NULL,
  `columns` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=626 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `object_types`
--

LOCK TABLES `object_types` WRITE;
/*!40000 ALTER TABLE `object_types` DISABLE KEYS */;
INSERT INTO `object_types` VALUES (601,'Primer Aliquot','Primers at low concentration for every day use',0,1,'sample_container','No safety information','No cleanup information','No data','No vendor information','2017-10-02 16:27:22','2017-10-27 05:34:19','Primer',0.01,'return','',21,'','M20',NULL,NULL),(602,'Plasmid Stock','A 1.5 mL tube containing purified plasmid DNA',0,1,'sample_container','No safety information','No cleanup information','concentration:','No vendor information','2017-10-02 16:27:22','2017-10-02 16:39:51','Plasmid',2,'return','',22,'','M20',NULL,NULL),(603,'Fragment Stock','Fragment stock in 1.5 mL tube, usually stored in M20 fridge.',0,1000,'sample_container','No safety information','No cleanup information','No data','No vendor information','2017-10-02 16:27:22','2017-10-02 16:39:36','Fragment',50,'return','',23,'','M20',NULL,NULL),(604,'Unverified Plasmid Stock','A plasmid stock that has yet to be sequenced verified',0,1,'sample_container','No safety information','No cleanup information','No data','No vendor information','2017-10-02 16:27:22','2017-10-02 16:40:10','Plasmid',0.01,'return','',22,'','M20',NULL,NULL),(605,'1 ng/µL Plasmid Stock','Diluted stock for use as a template in PCR',0,1,'sample_container','No safety information','No cleanup information','No data','No vendor information','2017-10-02 16:27:22','2017-10-02 16:39:26','Plasmid',0.01,'query','If this is an aliquot for the \"Transformation Efficiency Project\", dispose of it. Otherwise, return it.',22,'','M20',NULL,NULL),(606,'1 ng/µL Fragment Stock','A diluted fragment stock to use as a PCR template',0,1,'sample_container','No safety information','No cleanup information','No data','No vendor information','2017-10-02 16:27:22','2017-10-02 16:39:12','Fragment',0.01,'return','',23,'','M20',NULL,NULL),(607,'Stripwell','Stripwell',0,10000,'collection','No safety information','No cleanup information','  {\r\n    \"materials\": 10.48,\r\n    \"labor\": 10\r\n  }','No vendor information','2017-10-02 16:27:22','2017-10-02 16:27:22','stripwell',1,'query','',NULL,NULL,'',NULL,NULL),(608,'Lyophilized Primer','Some barely visible white powder',1,10000,'sample_container','','','','','2017-10-02 16:28:05','2017-10-02 16:39:44','tube',5,'return','',21,'','',NULL,NULL),(609,'Primer Stock','rehydrated  primer in tube from IDT',0,1,'sample_container','No safety information','No cleanup information','No data','No vendor information','2017-10-02 16:29:49','2017-10-27 05:34:16','Primer',0.01,'return','',21,'','M20',NULL,NULL),(610,'Enzyme Stock','A Stock',0,1,'sample_container','No safety information','No cleanup information','No data','No vendor information','2017-10-02 18:15:43','2017-10-02 18:15:43','Enzyme',0.01,'return','',26,'','M20',NULL,NULL),(611,'50 mL 0.8 Percent Agarose Gel in Gel Box','Used to run gels.',0,1,'collection','No safety information','No cleanup information','No data','No vendor information','2017-10-25 18:07:26','2017-10-27 05:32:06','box',0.01,'return','',NULL,'','',2,6),(612,'Gel Slice','Slice of agarose gel.',0,1,'sample_container','No safety information','No cleanup information','No data','No vendor information','2017-10-25 18:15:21','2017-10-25 18:15:21','slice',0.01,'return','',23,'','',NULL,NULL),(613,'Gibson Reaction Result','The result of a Gibson assembly',0,1,'sample_container','No safety information','No cleanup information','No data','No vendor information','2017-10-25 18:27:19','2017-10-25 18:27:19','tube',0.01,'return','',22,'','',NULL,NULL),(614,'E. coli Comp Cell Batch','Batch of E. coli comp cells',0,1,'collection','No safety information','No cleanup information','No data','No vendor information','2017-10-25 18:29:34','2017-10-27 04:48:30','batch',0.01,'return','',NULL,'','',10,10),(615,'Transformed E. coli Aliquot','An aliquot containing transformed E. coli - usually in a 1.5 mL tube',0,1,'sample_container','No safety information','No cleanup information','No data','No vendor information','2017-10-25 18:31:12','2017-10-25 18:31:12','aliquot',0.01,'return','',22,'','',NULL,NULL),(616,'E coli Plate of Plasmid','A plate containing E. coli transformed with a plasmid',0,1,'sample_container','No safety information','No cleanup information','No data','No vendor information','2017-10-25 18:37:01','2017-10-25 18:37:13','plate',0.01,'return','',22,'','DFP',NULL,NULL),(617,'Checked E coli Plate of Plasmid','It\'s a checked plate',0,1,'sample_container','No safety information','No cleanup information','No data','No vendor information','2017-10-25 19:52:53','2017-10-25 19:52:53','plate',0.01,'return','',22,'','DFP',NULL,NULL),(618,'TB Overnight of Plasmid','An overnight of E. coli transformed with a plasmid in TB + antibiotic',0,1,'sample_container','No safety information','No cleanup information','No data','No vendor information','2017-10-27 01:09:49','2017-10-27 01:09:49','overnight',0.01,'return','',22,'','DFO',NULL,NULL),(619,'Sequencing Stripwell','Sequencing Stripwell',0,1,'collection','No safety information','No cleanup information','No data','No vendor information','2017-10-27 01:12:42','2017-10-27 01:12:42','stripwell',0.01,'return','',NULL,'','',NULL,NULL),(620,'Plasmid Glycerol Stock','Glycerol Stock of E. coli (usually DH5alpha) containing plasmid DNA stock',0,1,'sample_container','No safety information','No cleanup information','No data','No vendor information','2017-10-27 01:15:09','2017-10-27 01:15:09','stock',0.01,'return','',22,'','M80',NULL,NULL),(621,'Ladder Stock','A 1.5 mL twist tube that is contains the ladder. Sold by NEB.',0,1,'sample_container','No safety information','No cleanup information','No data','No vendor information','2017-10-27 05:11:54','2017-10-27 05:14:47','stock',0.01,'return','',27,'','SF2',NULL,NULL),(622,'Ladder Aliquot','Diluted ladder mixed with loading dye, for direct use with gels.',0,1,'sample_container','No safety information','No cleanup information','No data','No vendor information','2017-10-27 05:12:42','2017-10-27 05:14:40','aliquot',0.01,'return','',27,'','SF2',NULL,NULL),(623,'Screw Cap Tube','1.5 mL Screw Cap Tube',0,1,'sample_container','No safety information','No cleanup information','No data','No vendor information','2017-10-27 05:17:44','2017-10-27 05:17:44','tube',0.01,'return','',28,'','',NULL,NULL),(624,'Gibson Aliquot Batch','Batch of Gibson aliquot aliquots',0,1,'collection','No safety information','No cleanup information','No data','No vendor information','2017-10-27 05:37:49','2017-10-27 05:40:09','batch',0.01,'return','',NULL,'','DFP',10,10),(625,'Agar Plate Batch','A batch of agar plates',0,1,'collection','No safety information','No cleanup information','No data','No vendor information','2017-10-27 05:52:52','2017-10-27 05:53:00','batch',0.01,'return','',NULL,'','DFP',10,10);
/*!40000 ALTER TABLE `object_types` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `operation_types`
--

DROP TABLE IF EXISTS `operation_types`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `operation_types` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL,
  `category` varchar(255) DEFAULT NULL,
  `deployed` tinyint(1) DEFAULT NULL,
  `on_the_fly` tinyint(1) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `index_operation_types_on_category_and_name` (`category`,`name`)
) ENGINE=InnoDB AUTO_INCREMENT=202 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `operation_types`
--

LOCK TABLES `operation_types` WRITE;
/*!40000 ALTER TABLE `operation_types` DISABLE KEYS */;
INSERT INTO `operation_types` VALUES (183,'Make PCR Fragment','Cloning',1,0,'2017-10-02 16:27:22','2017-10-02 16:35:42'),(184,'Order Primer','Cloning',1,0,'2017-10-02 16:28:05','2017-10-02 16:35:46'),(185,'Rehydrate Primer','Cloning',1,0,'2017-10-02 16:29:49','2017-10-02 16:35:51'),(186,'Run Gel','Cloning',1,NULL,'2017-10-25 18:08:41','2017-10-25 18:08:44'),(187,'Pour Gel','Cloning',1,NULL,'2017-10-25 18:09:36','2017-10-25 18:09:38'),(188,'Purify Gel Slice','Cloning',1,NULL,'2017-10-25 18:15:48','2017-10-25 18:15:50'),(189,'Assemble Plasmid','Cloning',1,NULL,'2017-10-25 18:27:28','2017-10-25 18:27:28'),(190,'Transform Cells','Cloning',1,NULL,'2017-10-25 18:31:27','2017-10-25 18:31:27'),(191,'Plate Transformed Cells','Cloning',1,NULL,'2017-10-25 18:37:40','2017-10-25 18:37:40'),(192,'Check Plate','Cloning',1,NULL,'2017-10-27 01:07:44','2017-10-27 01:08:29'),(194,'Make Overnight Suspension','Cloning',1,NULL,'2017-10-27 01:10:05','2017-10-27 01:10:05'),(195,'Make Miniprep','Cloning',1,NULL,'2017-10-27 01:10:46','2017-10-27 01:10:46'),(196,'Send to Sequencing','Cloning',1,NULL,'2017-10-27 01:12:59','2017-10-27 01:12:59'),(197,'Make Glycerol Stock','Cloning',1,NULL,'2017-10-27 01:15:26','2017-10-27 01:15:26'),(198,'Upload Sequencing Results','Cloning',1,NULL,'2017-10-27 01:16:04','2017-10-27 01:16:04'),(199,'Clean Up Sequencing','Cloning',1,NULL,'2017-10-27 01:17:08','2017-10-27 01:17:08'),(200,'Make Collection','Manager',1,NULL,'2017-10-27 04:43:00','2017-10-27 04:43:00'),(201,'Extract Gel Slice','Cloning',1,NULL,'2017-10-27 04:56:55','2017-10-27 04:56:55');
/*!40000 ALTER TABLE `operation_types` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `operations`
--

DROP TABLE IF EXISTS `operations`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `operations` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `operation_type_id` int(11) DEFAULT NULL,
  `status` varchar(255) DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  `x` float DEFAULT NULL,
  `y` float DEFAULT NULL,
  `parent_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `index_operations_on_operation_type_id` (`operation_type_id`),
  KEY `index_operations_on_user_id` (`user_id`)
) ENGINE=InnoDB AUTO_INCREMENT=3069 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `operations`
--

LOCK TABLES `operations` WRITE;
/*!40000 ALTER TABLE `operations` DISABLE KEYS */;
INSERT INTO `operations` VALUES (2953,183,'done',1,'2017-10-02 16:36:33','2017-10-02 18:18:31',208,64,0),(2954,185,'done',1,'2017-10-02 16:36:33','2017-10-02 17:51:16',112,160,0),(2955,184,'done',1,'2017-10-02 16:36:33','2017-10-02 17:51:12',112,224,0),(2956,185,'done',1,'2017-10-02 16:36:33','2017-10-02 17:51:16',288,160,0),(2957,184,'done',1,'2017-10-02 16:36:33','2017-10-02 17:51:12',288,224,0),(2958,183,'done',1,'2017-10-02 17:54:25','2017-10-02 18:17:49',108,92,0),(2959,200,'done',1,'2017-10-27 04:43:54','2017-10-27 04:49:52',112,96,0),(2960,197,'planning',1,'2017-10-27 04:52:34','2017-10-27 04:52:34',112,144,0),(2961,194,'planning',1,'2017-10-27 04:52:34','2017-10-27 04:52:34',112,208,1),(2962,192,'planning',1,'2017-10-27 04:52:34','2017-10-27 04:52:34',112,272,1),(2963,191,'planning',1,'2017-10-27 04:52:34','2017-10-27 04:52:34',112,336,1),(2964,190,'planning',1,'2017-10-27 04:52:34','2017-10-27 04:52:34',112,400,1),(2965,189,'planning',1,'2017-10-27 04:52:34','2017-10-27 04:52:34',112,304,0),(2966,195,'planning',1,'2017-10-27 04:52:34','2017-10-27 04:52:34',320,304,0),(2967,196,'planning',1,'2017-10-27 04:52:34','2017-10-27 04:52:34',320,240,2),(2968,198,'planning',1,'2017-10-27 04:52:34','2017-10-27 04:52:34',320,176,2),(2969,196,'planning',1,'2017-10-27 04:52:34','2017-10-27 04:54:17',576,240,3),(2970,198,'planning',1,'2017-10-27 04:54:17','2017-10-27 04:54:17',576,176,3),(2971,188,'planning',1,'2017-10-27 04:59:30','2017-10-27 04:59:30',112,96,1),(2972,201,'planning',1,'2017-10-27 04:59:30','2017-10-27 04:59:30',112,160,1),(2973,186,'planning',1,'2017-10-27 04:59:30','2017-10-27 04:59:30',112,224,1),(2974,183,'planning',1,'2017-10-27 04:59:30','2017-10-27 04:59:30',112,288,1),(2975,187,'planning',1,'2017-10-27 04:59:30','2017-10-27 04:59:30',288,288,1),(2976,196,'planning',1,'2017-10-27 05:00:53','2017-10-27 05:00:53',96,208,1),(2977,198,'planning',1,'2017-10-27 05:00:53','2017-10-27 05:00:53',96,144,1),(2978,188,'error',1,'2017-10-27 05:03:49','2017-10-27 05:47:50',112,96,2),(2979,201,'error',1,'2017-10-27 05:03:49','2017-10-27 05:47:50',112,160,2),(2980,186,'error',1,'2017-10-27 05:03:49','2017-10-27 05:25:18',112,224,2),(2981,183,'done',1,'2017-10-27 05:03:49','2017-10-27 05:09:36',112,288,2),(2982,187,'done',1,'2017-10-27 05:03:49','2017-10-27 05:09:45',288,288,2),(2983,197,'error',1,'2017-10-27 05:03:49','2017-10-27 05:47:50',288,144,0),(2984,194,'error',1,'2017-10-27 05:03:49','2017-10-27 05:47:50',112,208,4),(2985,192,'error',1,'2017-10-27 05:03:49','2017-10-27 05:47:50',112,272,4),(2986,191,'error',1,'2017-10-27 05:03:49','2017-10-27 05:47:50',112,336,4),(2987,190,'error',1,'2017-10-27 05:03:49','2017-10-27 05:47:50',112,400,4),(2988,189,'error',1,'2017-10-27 05:03:49','2017-10-27 05:47:50',288,304,0),(2989,195,'error',1,'2017-10-27 05:03:49','2017-10-27 05:47:50',496,304,0),(2990,196,'error',1,'2017-10-27 05:03:49','2017-10-27 05:47:50',320,240,5),(2991,198,'error',1,'2017-10-27 05:03:49','2017-10-27 05:47:50',320,176,5),(2992,196,'error',1,'2017-10-27 05:03:49','2017-10-27 05:47:50',576,240,6),(2993,198,'error',1,'2017-10-27 05:03:49','2017-10-27 05:47:50',576,176,6),(2994,185,'done',1,'2017-10-27 05:05:15','2017-10-27 05:09:37',720,304,0),(2995,184,'done',1,'2017-10-27 05:05:15','2017-10-27 05:07:54',720,368,0),(3003,188,'done',1,'2017-10-27 05:32:40','2017-10-27 05:35:38',112,96,2),(3004,201,'done',1,'2017-10-27 05:32:40','2017-10-27 05:35:34',112,160,2),(3005,186,'done',1,'2017-10-27 05:32:40','2017-10-27 05:35:29',112,224,2),(3006,183,'done',1,'2017-10-27 05:32:40','2017-10-27 05:35:12',112,288,2),(3007,187,'done',1,'2017-10-27 05:32:40','2017-10-27 05:35:24',288,288,2),(3008,197,'done',1,'2017-10-27 05:32:40','2017-10-27 06:16:43',288,144,0),(3009,194,'done',1,'2017-10-27 05:32:40','2017-10-27 06:00:05',112,208,4),(3010,192,'done',1,'2017-10-27 05:32:40','2017-10-27 05:59:47',112,272,4),(3011,191,'done',1,'2017-10-27 05:32:40','2017-10-27 05:59:03',112,336,4),(3012,190,'done',1,'2017-10-27 05:32:41','2017-10-27 05:46:40',112,400,4),(3013,189,'done',1,'2017-10-27 05:32:41','2017-10-27 05:41:04',288,304,0),(3014,195,'done',1,'2017-10-27 05:32:41','2017-10-27 06:00:33',496,304,0),(3015,196,'done',1,'2017-10-27 05:32:41','2017-10-27 06:01:19',320,240,5),(3016,198,'done',1,'2017-10-27 05:32:41','2017-10-27 06:13:55',320,176,5),(3017,196,'done',1,'2017-10-27 05:32:41','2017-10-27 06:01:19',576,240,6),(3018,198,'done',1,'2017-10-27 05:32:41','2017-10-27 06:13:55',576,176,6),(3019,185,'done',1,'2017-10-27 05:32:41','2017-10-27 05:35:25',720,304,0),(3020,184,'done',1,'2017-10-27 05:32:41','2017-10-27 05:35:12',720,368,0),(3021,200,'done',1,'2017-10-27 05:39:33','2017-10-27 05:40:42',108,92,0),(3024,188,'planning',1,'2017-10-27 05:48:23','2017-10-27 05:48:23',112,96,2),(3025,201,'planning',1,'2017-10-27 05:48:23','2017-10-27 05:48:23',112,160,2),(3026,186,'planning',1,'2017-10-27 05:48:23','2017-10-27 05:48:23',112,224,2),(3027,183,'planning',1,'2017-10-27 05:48:23','2017-10-27 05:48:23',112,288,2),(3028,187,'planning',1,'2017-10-27 05:48:23','2017-10-27 05:48:23',288,288,2),(3029,197,'planning',1,'2017-10-27 05:48:23','2017-10-27 05:48:23',288,144,0),(3030,194,'planning',1,'2017-10-27 05:48:23','2017-10-27 05:48:23',112,208,4),(3031,192,'planning',1,'2017-10-27 05:48:23','2017-10-27 05:48:23',112,272,4),(3032,191,'planning',1,'2017-10-27 05:48:23','2017-10-27 05:48:23',112,336,4),(3033,190,'planning',1,'2017-10-27 05:48:23','2017-10-27 05:48:23',112,400,4),(3034,189,'planning',1,'2017-10-27 05:48:23','2017-10-27 05:48:23',288,304,0),(3035,195,'planning',1,'2017-10-27 05:48:23','2017-10-27 05:48:23',496,304,0),(3036,196,'planning',1,'2017-10-27 05:48:23','2017-10-27 05:48:23',320,240,5),(3037,198,'planning',1,'2017-10-27 05:48:24','2017-10-27 05:48:24',320,176,5),(3038,196,'planning',1,'2017-10-27 05:48:24','2017-10-27 05:48:24',576,240,6),(3039,198,'planning',1,'2017-10-27 05:48:24','2017-10-27 05:48:24',576,176,6),(3040,185,'planning',1,'2017-10-27 05:48:24','2017-10-27 05:48:24',720,304,0),(3041,184,'planning',1,'2017-10-27 05:48:24','2017-10-27 05:48:24',720,368,0),(3044,200,'done',1,'2017-10-27 05:53:16','2017-10-27 05:54:20',108,92,0),(3047,188,'planning',1,'2017-10-27 06:05:42','2017-10-27 06:05:42',112,96,2),(3048,201,'planning',1,'2017-10-27 06:05:42','2017-10-27 06:05:42',112,160,2),(3049,186,'planning',1,'2017-10-27 06:05:42','2017-10-27 06:05:42',112,224,2),(3050,183,'planning',1,'2017-10-27 06:05:42','2017-10-27 06:05:42',112,288,2),(3051,187,'planning',1,'2017-10-27 06:05:42','2017-10-27 06:05:42',288,288,2),(3052,197,'planning',1,'2017-10-27 06:05:42','2017-10-27 06:05:42',288,144,0),(3053,194,'planning',1,'2017-10-27 06:05:42','2017-10-27 06:05:42',112,208,4),(3054,192,'planning',1,'2017-10-27 06:05:42','2017-10-27 06:05:42',112,272,4),(3055,191,'planning',1,'2017-10-27 06:05:42','2017-10-27 06:05:42',112,336,4),(3056,190,'planning',1,'2017-10-27 06:05:42','2017-10-27 06:05:42',112,400,4),(3057,189,'planning',1,'2017-10-27 06:05:42','2017-10-27 06:05:42',288,304,0),(3058,195,'planning',1,'2017-10-27 06:05:42','2017-10-27 06:05:42',496,304,0),(3059,196,'planning',1,'2017-10-27 06:05:42','2017-10-27 06:05:42',320,240,5),(3060,198,'planning',1,'2017-10-27 06:05:42','2017-10-27 06:05:42',320,176,5),(3061,196,'planning',1,'2017-10-27 06:05:42','2017-10-27 06:05:42',576,240,6),(3062,198,'planning',1,'2017-10-27 06:05:42','2017-10-27 06:05:42',576,176,6),(3063,185,'planning',1,'2017-10-27 06:05:42','2017-10-27 06:05:42',720,304,0),(3064,184,'planning',1,'2017-10-27 06:05:42','2017-10-27 06:05:42',720,368,0),(3068,199,'done',1,'2017-10-27 06:13:54','2017-10-27 06:17:13',NULL,NULL,NULL);
/*!40000 ALTER TABLE `operations` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `parameters`
--

DROP TABLE IF EXISTS `parameters`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `parameters` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `key` varchar(255) DEFAULT NULL,
  `value` varchar(255) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  `description` text,
  `user_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=41 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `parameters`
--

LOCK TABLES `parameters` WRITE;
/*!40000 ALTER TABLE `parameters` DISABLE KEYS */;
INSERT INTO `parameters` VALUES (24,'email','somewhere@somehow.com','2017-10-02 16:20:33','2017-10-02 16:20:33',NULL,1),(25,'phone','123.234.3456','2017-10-02 16:20:33','2017-10-02 16:20:33',NULL,1),(26,'biofab',NULL,'2017-10-02 16:20:33','2017-10-02 16:20:33',NULL,1),(27,'aquarium',NULL,'2017-10-02 16:20:33','2017-10-02 16:20:33',NULL,1),(28,'Make new samples private',NULL,'2017-10-02 16:20:33','2017-10-02 16:20:33',NULL,1),(29,'Lab Name',NULL,'2017-10-02 16:20:33','2017-10-02 16:20:33',NULL,1),(30,'email','neptune@ocean.org','2017-10-02 16:20:36','2017-10-19 04:57:21',NULL,1),(31,'phone','123.234.3456','2017-10-02 16:20:36','2017-10-02 16:20:36',NULL,1),(32,'biofab','true','2017-10-02 16:20:36','2017-10-02 16:20:36',NULL,1),(33,'aquarium','true','2017-10-02 16:20:36','2017-10-02 16:20:38',NULL,1),(34,'Make new samples private',NULL,'2017-10-02 16:20:36','2017-10-02 16:20:36',NULL,1),(35,'Lab Name',NULL,'2017-10-02 16:20:36','2017-10-02 16:20:36',NULL,1),(36,'labor rate','0.0','2017-10-02 17:44:25','2017-10-02 17:44:25','Edit me',NULL),(37,'markup rate','0.0','2017-10-02 17:44:25','2017-10-02 17:44:25','Edit me',NULL),(40,'short primer cost','0.0','2017-10-02 17:49:03','2017-10-02 17:49:03','Edit me',NULL);
/*!40000 ALTER TABLE `parameters` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `plan_associations`
--

DROP TABLE IF EXISTS `plan_associations`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `plan_associations` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `plan_id` int(11) DEFAULT NULL,
  `operation_id` int(11) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`),
  KEY `index_plan_associations_on_plan_id` (`plan_id`),
  KEY `index_plan_associations_on_operation_id` (`operation_id`)
) ENGINE=InnoDB AUTO_INCREMENT=2989 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `plan_associations`
--

LOCK TABLES `plan_associations` WRITE;
/*!40000 ALTER TABLE `plan_associations` DISABLE KEYS */;
INSERT INTO `plan_associations` VALUES (2877,1197,2953,'2017-10-02 16:36:33','2017-10-02 16:36:33'),(2878,1197,2954,'2017-10-02 16:36:33','2017-10-02 16:36:33'),(2879,1197,2955,'2017-10-02 16:36:33','2017-10-02 16:36:33'),(2880,1197,2956,'2017-10-02 16:36:33','2017-10-02 16:36:33'),(2881,1197,2957,'2017-10-02 16:36:33','2017-10-02 16:36:33'),(2882,1198,2958,'2017-10-02 17:54:25','2017-10-02 17:54:25'),(2883,1199,2959,'2017-10-27 04:43:54','2017-10-27 04:43:54'),(2884,1200,2960,'2017-10-27 04:52:34','2017-10-27 04:52:34'),(2885,1200,2961,'2017-10-27 04:52:34','2017-10-27 04:52:34'),(2886,1200,2962,'2017-10-27 04:52:34','2017-10-27 04:52:34'),(2887,1200,2963,'2017-10-27 04:52:34','2017-10-27 04:52:34'),(2888,1200,2964,'2017-10-27 04:52:34','2017-10-27 04:52:34'),(2889,1200,2965,'2017-10-27 04:52:34','2017-10-27 04:52:34'),(2890,1200,2966,'2017-10-27 04:52:34','2017-10-27 04:52:34'),(2891,1200,2967,'2017-10-27 04:52:34','2017-10-27 04:52:34'),(2892,1200,2968,'2017-10-27 04:52:34','2017-10-27 04:52:34'),(2893,1200,2969,'2017-10-27 04:52:34','2017-10-27 04:52:34'),(2894,1200,2970,'2017-10-27 04:54:17','2017-10-27 04:54:17'),(2895,1201,2971,'2017-10-27 04:59:30','2017-10-27 04:59:30'),(2896,1201,2972,'2017-10-27 04:59:30','2017-10-27 04:59:30'),(2897,1201,2973,'2017-10-27 04:59:30','2017-10-27 04:59:30'),(2898,1201,2974,'2017-10-27 04:59:30','2017-10-27 04:59:30'),(2899,1201,2975,'2017-10-27 04:59:30','2017-10-27 04:59:30'),(2900,1202,2976,'2017-10-27 05:00:53','2017-10-27 05:00:53'),(2901,1202,2977,'2017-10-27 05:00:53','2017-10-27 05:00:53'),(2902,1203,2978,'2017-10-27 05:03:49','2017-10-27 05:03:49'),(2903,1203,2979,'2017-10-27 05:03:49','2017-10-27 05:03:49'),(2904,1203,2980,'2017-10-27 05:03:49','2017-10-27 05:03:49'),(2905,1203,2981,'2017-10-27 05:03:49','2017-10-27 05:03:49'),(2906,1203,2982,'2017-10-27 05:03:49','2017-10-27 05:03:49'),(2907,1203,2983,'2017-10-27 05:03:49','2017-10-27 05:03:49'),(2908,1203,2984,'2017-10-27 05:03:49','2017-10-27 05:03:49'),(2909,1203,2985,'2017-10-27 05:03:49','2017-10-27 05:03:49'),(2910,1203,2986,'2017-10-27 05:03:49','2017-10-27 05:03:49'),(2911,1203,2987,'2017-10-27 05:03:49','2017-10-27 05:03:49'),(2912,1203,2988,'2017-10-27 05:03:49','2017-10-27 05:03:49'),(2913,1203,2989,'2017-10-27 05:03:49','2017-10-27 05:03:49'),(2914,1203,2990,'2017-10-27 05:03:49','2017-10-27 05:03:49'),(2915,1203,2991,'2017-10-27 05:03:49','2017-10-27 05:03:49'),(2916,1203,2992,'2017-10-27 05:03:49','2017-10-27 05:03:49'),(2917,1203,2993,'2017-10-27 05:03:49','2017-10-27 05:03:49'),(2918,1203,2994,'2017-10-27 05:05:15','2017-10-27 05:05:15'),(2919,1203,2995,'2017-10-27 05:05:15','2017-10-27 05:05:15'),(2926,1210,3003,'2017-10-27 05:32:40','2017-10-27 05:32:40'),(2927,1210,3004,'2017-10-27 05:32:40','2017-10-27 05:32:40'),(2928,1210,3005,'2017-10-27 05:32:40','2017-10-27 05:32:40'),(2929,1210,3006,'2017-10-27 05:32:40','2017-10-27 05:32:40'),(2930,1210,3007,'2017-10-27 05:32:40','2017-10-27 05:32:40'),(2931,1210,3008,'2017-10-27 05:32:40','2017-10-27 05:32:40'),(2932,1210,3009,'2017-10-27 05:32:40','2017-10-27 05:32:40'),(2933,1210,3010,'2017-10-27 05:32:40','2017-10-27 05:32:40'),(2934,1210,3011,'2017-10-27 05:32:40','2017-10-27 05:32:40'),(2935,1210,3012,'2017-10-27 05:32:41','2017-10-27 05:32:41'),(2936,1210,3013,'2017-10-27 05:32:41','2017-10-27 05:32:41'),(2937,1210,3014,'2017-10-27 05:32:41','2017-10-27 05:32:41'),(2938,1210,3015,'2017-10-27 05:32:41','2017-10-27 05:32:41'),(2939,1210,3016,'2017-10-27 05:32:41','2017-10-27 05:32:41'),(2940,1210,3017,'2017-10-27 05:32:41','2017-10-27 05:32:41'),(2941,1210,3018,'2017-10-27 05:32:41','2017-10-27 05:32:41'),(2942,1210,3019,'2017-10-27 05:32:41','2017-10-27 05:32:41'),(2943,1210,3020,'2017-10-27 05:32:41','2017-10-27 05:32:41'),(2944,1211,3021,'2017-10-27 05:39:33','2017-10-27 05:39:33'),(2946,1213,3024,'2017-10-27 05:48:23','2017-10-27 05:48:23'),(2947,1213,3025,'2017-10-27 05:48:23','2017-10-27 05:48:23'),(2948,1213,3026,'2017-10-27 05:48:23','2017-10-27 05:48:23'),(2949,1213,3027,'2017-10-27 05:48:23','2017-10-27 05:48:23'),(2950,1213,3028,'2017-10-27 05:48:23','2017-10-27 05:48:23'),(2951,1213,3029,'2017-10-27 05:48:23','2017-10-27 05:48:23'),(2952,1213,3030,'2017-10-27 05:48:23','2017-10-27 05:48:23'),(2953,1213,3031,'2017-10-27 05:48:23','2017-10-27 05:48:23'),(2954,1213,3032,'2017-10-27 05:48:23','2017-10-27 05:48:23'),(2955,1213,3033,'2017-10-27 05:48:23','2017-10-27 05:48:23'),(2956,1213,3034,'2017-10-27 05:48:23','2017-10-27 05:48:23'),(2957,1213,3035,'2017-10-27 05:48:23','2017-10-27 05:48:23'),(2958,1213,3036,'2017-10-27 05:48:23','2017-10-27 05:48:23'),(2959,1213,3037,'2017-10-27 05:48:24','2017-10-27 05:48:24'),(2960,1213,3038,'2017-10-27 05:48:24','2017-10-27 05:48:24'),(2961,1213,3039,'2017-10-27 05:48:24','2017-10-27 05:48:24'),(2962,1213,3040,'2017-10-27 05:48:24','2017-10-27 05:48:24'),(2963,1213,3041,'2017-10-27 05:48:24','2017-10-27 05:48:24'),(2965,1215,3044,'2017-10-27 05:53:16','2017-10-27 05:53:16'),(2968,1218,3047,'2017-10-27 06:05:42','2017-10-27 06:05:42'),(2969,1218,3048,'2017-10-27 06:05:42','2017-10-27 06:05:42'),(2970,1218,3049,'2017-10-27 06:05:42','2017-10-27 06:05:42'),(2971,1218,3050,'2017-10-27 06:05:42','2017-10-27 06:05:42'),(2972,1218,3051,'2017-10-27 06:05:42','2017-10-27 06:05:42'),(2973,1218,3052,'2017-10-27 06:05:42','2017-10-27 06:05:42'),(2974,1218,3053,'2017-10-27 06:05:42','2017-10-27 06:05:42'),(2975,1218,3054,'2017-10-27 06:05:42','2017-10-27 06:05:42'),(2976,1218,3055,'2017-10-27 06:05:42','2017-10-27 06:05:42'),(2977,1218,3056,'2017-10-27 06:05:42','2017-10-27 06:05:42'),(2978,1218,3057,'2017-10-27 06:05:42','2017-10-27 06:05:42'),(2979,1218,3058,'2017-10-27 06:05:42','2017-10-27 06:05:42'),(2980,1218,3059,'2017-10-27 06:05:42','2017-10-27 06:05:42'),(2981,1218,3060,'2017-10-27 06:05:42','2017-10-27 06:05:42'),(2982,1218,3061,'2017-10-27 06:05:42','2017-10-27 06:05:42'),(2983,1218,3062,'2017-10-27 06:05:42','2017-10-27 06:05:42'),(2984,1218,3063,'2017-10-27 06:05:42','2017-10-27 06:05:42'),(2985,1218,3064,'2017-10-27 06:05:42','2017-10-27 06:05:42'),(2988,1210,3068,'2017-10-27 06:13:54','2017-10-27 06:13:54');
/*!40000 ALTER TABLE `plan_associations` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `plans`
--

DROP TABLE IF EXISTS `plans`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `plans` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  `budget_id` int(11) DEFAULT NULL,
  `name` varchar(255) DEFAULT NULL,
  `status` varchar(255) DEFAULT NULL,
  `cost_limit` float DEFAULT NULL,
  `folder` varchar(255) DEFAULT NULL,
  `layout` text,
  PRIMARY KEY (`id`),
  KEY `index_plans_on_user_id` (`user_id`)
) ENGINE=InnoDB AUTO_INCREMENT=1219 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `plans`
--

LOCK TABLES `plans` WRITE;
/*!40000 ALTER TABLE `plans` DISABLE KEYS */;
INSERT INTO `plans` VALUES (1197,1,'2017-10-02 16:36:33','2017-10-02 17:49:00',39,'My First Plan',NULL,NULL,NULL,'{\"id\":0,\"parent_id\":-1,\"name\":\"Untitled Module 0\",\"x\":160,\"y\":160,\"width\":160,\"height\":60,\"model\":{\"model\":\"Module\"},\"input\":null,\"output\":null,\"documentation\":\"No documentation yet for this module.\",\"children\":null,\"wires\":null}'),(1198,1,'2017-10-02 17:54:25','2017-10-02 17:54:30',39,'My Second Plan',NULL,NULL,NULL,'{\"id\":0,\"parent_id\":-1,\"name\":\"Untitled Module 0\",\"x\":160,\"y\":160,\"width\":160,\"height\":60,\"model\":{\"model\":\"Module\"},\"input\":null,\"output\":null,\"documentation\":\"No documentation yet for this module.\",\"children\":null,\"wires\":null}'),(1199,1,'2017-10-27 04:43:54','2017-10-27 04:43:57',39,'Make Collection',NULL,NULL,NULL,'{\"id\":0,\"parent_id\":-1,\"name\":\"Untitled Module 0\",\"x\":160,\"y\":160,\"width\":160,\"height\":60,\"model\":{\"model\":\"Module\"},\"input\":null,\"output\":null,\"children\":null,\"wires\":null}'),(1200,1,'2017-10-27 04:52:34','2017-10-27 04:55:01',NULL,'Make Glycerol Stock from Assembled Plasmid with QC','system_template',NULL,NULL,'{\"id\":0,\"parent_id\":-1,\"name\":\"Untitled Module 0\",\"x\":160,\"y\":160,\"width\":160,\"height\":60,\"model\":{\"model\":\"Module\"},\"input\":null,\"output\":null,\"children\":[{\"id\":1,\"parent_id\":0,\"name\":\"Transform to Overnight\",\"x\":112,\"y\":208,\"width\":160,\"height\":60,\"model\":{\"model\":\"Module\"},\"input\":[{\"id\":1,\"x\":144,\"y\":464,\"width\":32,\"height\":32,\"model\":{\"model\":\"ModuleIO\"}},{\"id\":2,\"x\":208,\"y\":464,\"width\":32,\"height\":32,\"model\":{\"model\":\"ModuleIO\"}}],\"output\":[{\"id\":0,\"x\":176,\"y\":144,\"width\":32,\"height\":32,\"model\":{\"model\":\"ModuleIO\"}}],\"children\":null,\"wires\":[{\"to_module\":{\"id\":1},\"from_op\":{\"id\":2961},\"from\":{\"record_type\":\"FieldValue\",\"id\":188837},\"to\":{\"record_type\":\"ModuleIO\",\"id\":0}},{\"from_module\":{\"id\":1},\"to_op\":{\"id\":2964},\"to\":{\"record_type\":\"FieldValue\",\"id\":188842},\"from\":{\"record_type\":\"ModuleIO\",\"id\":1}},{\"from_module\":{\"id\":1},\"to_op\":{\"id\":2964},\"to\":{\"record_type\":\"FieldValue\",\"id\":188843},\"from\":{\"record_type\":\"ModuleIO\",\"id\":2}}]},{\"id\":2,\"parent_id\":0,\"name\":\"Sequence DNA\",\"x\":320,\"y\":208,\"width\":160,\"height\":60,\"model\":{\"model\":\"Module\"},\"input\":[{\"id\":3,\"x\":352,\"y\":304,\"width\":32,\"height\":32,\"model\":{\"model\":\"ModuleIO\"}},{\"id\":5,\"x\":416,\"y\":304,\"width\":32,\"height\":32,\"model\":{\"model\":\"ModuleIO\"}}],\"output\":null,\"children\":null,\"wires\":[{\"from_module\":{\"id\":2},\"to_op\":{\"id\":2967},\"to\":{\"record_type\":\"FieldValue\",\"id\":188849},\"from\":{\"record_type\":\"ModuleIO\",\"id\":3}},{\"from_module\":{\"id\":2},\"to_op\":{\"id\":2967},\"to\":{\"record_type\":\"FieldValue\",\"id\":188850},\"from\":{\"record_type\":\"ModuleIO\",\"id\":5}}]},{\"id\":3,\"parent_id\":0,\"name\":\"Sequence DNA\",\"x\":496,\"y\":208,\"width\":160,\"height\":60,\"model\":{\"model\":\"Module\"},\"input\":[{\"id\":4,\"x\":608,\"y\":304,\"width\":32,\"height\":32,\"model\":{\"model\":\"ModuleIO\"}},{\"id\":6,\"x\":672,\"y\":304,\"width\":32,\"height\":32,\"model\":{\"model\":\"ModuleIO\"}}],\"output\":null,\"children\":null,\"wires\":[{\"from_module\":{\"id\":3},\"to_op\":{\"id\":2969},\"to\":{\"record_type\":\"FieldValue\",\"id\":188853},\"from\":{\"record_type\":\"ModuleIO\",\"id\":4}},{\"from_module\":{\"id\":3},\"to_op\":{\"id\":2969},\"to\":{\"record_type\":\"FieldValue\",\"id\":188854},\"from\":{\"record_type\":\"ModuleIO\",\"id\":6}}]}],\"wires\":[{\"from_module\":{\"id\":1},\"to_op\":{\"id\":2960},\"to\":{\"record_type\":\"FieldValue\",\"id\":188833},\"from\":{\"record_type\":\"ModuleIO\",\"id\":0}},{\"to_module\":{\"id\":1},\"from_op\":{\"id\":2965},\"from\":{\"record_type\":\"FieldValue\",\"id\":188846},\"to\":{\"record_type\":\"ModuleIO\",\"id\":1}},{\"from_module\":{\"id\":1},\"to_op\":{\"id\":2966},\"to\":{\"record_type\":\"FieldValue\",\"id\":188847},\"from\":{\"record_type\":\"ModuleIO\",\"id\":0}},{\"to_module\":{\"id\":2},\"from_op\":{\"id\":2966},\"from\":{\"record_type\":\"FieldValue\",\"id\":188848},\"to\":{\"record_type\":\"ModuleIO\",\"id\":3}},{\"to_module\":{\"id\":3},\"from_op\":{\"id\":2966},\"from\":{\"record_type\":\"FieldValue\",\"id\":188848},\"to\":{\"record_type\":\"ModuleIO\",\"id\":4}}]}'),(1201,1,'2017-10-27 04:59:30','2017-10-27 04:59:46',NULL,'Make Fragment Stock from PCR','system_template',NULL,NULL,'{\"id\":0,\"parent_id\":-1,\"name\":\"Untitled Module 0\",\"x\":160,\"y\":160,\"width\":160,\"height\":60,\"model\":{\"model\":\"Module\"},\"input\":null,\"output\":null,\"children\":[{\"id\":1,\"parent_id\":0,\"name\":\"PCR and Gel Extraction\",\"x\":147.2,\"y\":211.2,\"width\":160,\"height\":60,\"model\":{\"model\":\"Module\"},\"input\":[{\"id\":0,\"x\":128,\"y\":352,\"width\":32,\"height\":32,\"model\":{\"model\":\"ModuleIO\"}},{\"id\":1,\"x\":176,\"y\":352,\"width\":32,\"height\":32,\"model\":{\"model\":\"ModuleIO\"}},{\"id\":2,\"x\":224,\"y\":352,\"width\":32,\"height\":32,\"model\":{\"model\":\"ModuleIO\"}}],\"output\":[{\"id\":3,\"x\":176,\"y\":32,\"width\":32,\"height\":32,\"model\":{\"model\":\"ModuleIO\"}}],\"children\":null,\"wires\":[{\"to_module\":{\"id\":1},\"from_op\":{\"id\":2971},\"from\":{\"record_type\":\"FieldValue\",\"id\":188858},\"to\":{\"record_type\":\"ModuleIO\",\"id\":3}},{\"from_module\":{\"id\":1},\"to_op\":{\"id\":2974},\"to\":{\"record_type\":\"FieldValue\",\"id\":188864},\"from\":{\"record_type\":\"ModuleIO\",\"id\":0}},{\"from_module\":{\"id\":1},\"to_op\":{\"id\":2974},\"to\":{\"record_type\":\"FieldValue\",\"id\":188865},\"from\":{\"record_type\":\"ModuleIO\",\"id\":1}},{\"from_module\":{\"id\":1},\"to_op\":{\"id\":2974},\"to\":{\"record_type\":\"FieldValue\",\"id\":188866},\"from\":{\"record_type\":\"ModuleIO\",\"id\":2}}]}],\"wires\":null}'),(1202,1,'2017-10-27 05:00:53','2017-10-27 05:00:58',NULL,'Sequence DNA','system_template',NULL,NULL,'{\"id\":0,\"parent_id\":-1,\"name\":\"Untitled Module 0\",\"x\":160,\"y\":160,\"width\":160,\"height\":60,\"model\":{\"model\":\"Module\"},\"input\":null,\"output\":null,\"children\":[{\"id\":1,\"parent_id\":0,\"name\":\"Sequence DNA\",\"x\":96,\"y\":176,\"width\":160,\"height\":60,\"model\":{\"model\":\"Module\"},\"input\":[{\"id\":0,\"x\":128,\"y\":272,\"width\":32,\"height\":32,\"model\":{\"model\":\"ModuleIO\"}},{\"id\":1,\"x\":192,\"y\":272,\"width\":32,\"height\":32,\"model\":{\"model\":\"ModuleIO\"}}],\"output\":null,\"children\":null,\"wires\":[{\"from_module\":{\"id\":1},\"to_op\":{\"id\":2976},\"to\":{\"record_type\":\"FieldValue\",\"id\":188869},\"from\":{\"record_type\":\"ModuleIO\",\"id\":0}},{\"from_module\":{\"id\":1},\"to_op\":{\"id\":2976},\"to\":{\"record_type\":\"FieldValue\",\"id\":188870},\"from\":{\"record_type\":\"ModuleIO\",\"id\":1}}]}],\"wires\":null}'),(1210,1,'2017-10-27 05:32:40','2017-10-27 05:34:58',39,'Cloning Demo',NULL,NULL,NULL,'{\"id\":0,\"parent_id\":-1,\"name\":\"Untitled Module 0\",\"x\":160,\"y\":160,\"width\":160,\"height\":60,\"model\":{\"model\":\"Module\"},\"input\":null,\"output\":null,\"children\":[{\"id\":2,\"parent_id\":0,\"name\":\"PCR and Gel Extraction\",\"x\":208,\"y\":384,\"width\":160,\"height\":60,\"model\":{\"model\":\"Module\"},\"input\":[{\"id\":0,\"x\":128,\"y\":352,\"width\":32,\"height\":32,\"model\":{\"model\":\"ModuleIO\"}},{\"id\":1,\"x\":176,\"y\":352,\"width\":32,\"height\":32,\"model\":{\"model\":\"ModuleIO\"}},{\"id\":2,\"x\":224,\"y\":352,\"width\":32,\"height\":32,\"model\":{\"model\":\"ModuleIO\"}}],\"output\":[{\"id\":3,\"x\":176,\"y\":32,\"width\":32,\"height\":32,\"model\":{\"model\":\"ModuleIO\"}}],\"children\":null,\"wires\":[{\"to_module\":{\"id\":2},\"from_op\":{\"id\":3003},\"from\":{\"record_type\":\"FieldValue\",\"id\":188945},\"to\":{\"record_type\":\"ModuleIO\",\"id\":3}},{\"from_module\":{\"id\":2},\"to_op\":{\"id\":3006},\"to\":{\"record_type\":\"FieldValue\",\"id\":188951},\"from\":{\"record_type\":\"ModuleIO\",\"id\":0}},{\"from_module\":{\"id\":2},\"to_op\":{\"id\":3006},\"to\":{\"record_type\":\"FieldValue\",\"id\":188952},\"from\":{\"record_type\":\"ModuleIO\",\"id\":1}},{\"from_module\":{\"id\":2},\"to_op\":{\"id\":3006},\"to\":{\"record_type\":\"FieldValue\",\"id\":188953},\"from\":{\"record_type\":\"ModuleIO\",\"id\":2}}]},{\"id\":4,\"parent_id\":0,\"name\":\"Transform to Overnight\",\"x\":288,\"y\":208,\"width\":160,\"height\":60,\"model\":{\"model\":\"Module\"},\"input\":[{\"id\":4,\"x\":144,\"y\":464,\"width\":32,\"height\":32,\"model\":{\"model\":\"ModuleIO\"}},{\"id\":5,\"x\":208,\"y\":464,\"width\":32,\"height\":32,\"model\":{\"model\":\"ModuleIO\"}}],\"output\":[{\"id\":6,\"x\":176,\"y\":144,\"width\":32,\"height\":32,\"model\":{\"model\":\"ModuleIO\"}}],\"children\":null,\"wires\":[{\"to_module\":{\"id\":4},\"from_op\":{\"id\":3009},\"from\":{\"record_type\":\"FieldValue\",\"id\":188960},\"to\":{\"record_type\":\"ModuleIO\",\"id\":6}},{\"from_module\":{\"id\":4},\"to_op\":{\"id\":3012},\"to\":{\"record_type\":\"FieldValue\",\"id\":188965},\"from\":{\"record_type\":\"ModuleIO\",\"id\":4}},{\"from_module\":{\"id\":4},\"to_op\":{\"id\":3012},\"to\":{\"record_type\":\"FieldValue\",\"id\":188966},\"from\":{\"record_type\":\"ModuleIO\",\"id\":5}}]},{\"id\":5,\"parent_id\":0,\"name\":\"Sequence DNA\",\"x\":496,\"y\":208,\"width\":160,\"height\":60,\"model\":{\"model\":\"Module\"},\"input\":[{\"id\":7,\"x\":352,\"y\":304,\"width\":32,\"height\":32,\"model\":{\"model\":\"ModuleIO\"}},{\"id\":8,\"x\":416,\"y\":304,\"width\":32,\"height\":32,\"model\":{\"model\":\"ModuleIO\"}}],\"output\":null,\"children\":null,\"wires\":[{\"from_module\":{\"id\":5},\"to_op\":{\"id\":3015},\"to\":{\"record_type\":\"FieldValue\",\"id\":188972},\"from\":{\"record_type\":\"ModuleIO\",\"id\":7}},{\"from_module\":{\"id\":5},\"to_op\":{\"id\":3015},\"to\":{\"record_type\":\"FieldValue\",\"id\":188973},\"from\":{\"record_type\":\"ModuleIO\",\"id\":8}}]},{\"id\":6,\"parent_id\":0,\"name\":\"Sequence DNA\",\"x\":672,\"y\":208,\"width\":160,\"height\":60,\"model\":{\"model\":\"Module\"},\"input\":[{\"id\":9,\"x\":608,\"y\":304,\"width\":32,\"height\":32,\"model\":{\"model\":\"ModuleIO\"}},{\"id\":10,\"x\":672,\"y\":304,\"width\":32,\"height\":32,\"model\":{\"model\":\"ModuleIO\"}}],\"output\":null,\"children\":null,\"wires\":[{\"from_module\":{\"id\":6},\"to_op\":{\"id\":3017},\"to\":{\"record_type\":\"FieldValue\",\"id\":188976},\"from\":{\"record_type\":\"ModuleIO\",\"id\":9}},{\"from_module\":{\"id\":6},\"to_op\":{\"id\":3017},\"to\":{\"record_type\":\"FieldValue\",\"id\":188977},\"from\":{\"record_type\":\"ModuleIO\",\"id\":10}}]}],\"wires\":[{\"from_module\":{\"id\":4},\"to_op\":{\"id\":3008},\"to\":{\"record_type\":\"FieldValue\",\"id\":188956},\"from\":{\"record_type\":\"ModuleIO\",\"id\":6}},{\"to_module\":{\"id\":4},\"from_op\":{\"id\":3013},\"from\":{\"record_type\":\"FieldValue\",\"id\":188969},\"to\":{\"record_type\":\"ModuleIO\",\"id\":4}},{\"from_module\":{\"id\":4},\"to_op\":{\"id\":3014},\"to\":{\"record_type\":\"FieldValue\",\"id\":188970},\"from\":{\"record_type\":\"ModuleIO\",\"id\":6}},{\"to_module\":{\"id\":5},\"from_op\":{\"id\":3014},\"from\":{\"record_type\":\"FieldValue\",\"id\":188971},\"to\":{\"record_type\":\"ModuleIO\",\"id\":7}},{\"to_module\":{\"id\":6},\"from_op\":{\"id\":3014},\"from\":{\"record_type\":\"FieldValue\",\"id\":188971},\"to\":{\"record_type\":\"ModuleIO\",\"id\":9}},{\"from_module\":{\"id\":2},\"to_op\":{\"id\":3013},\"to\":{\"record_type\":\"FieldValue\",\"id\":188968},\"from\":{\"record_type\":\"ModuleIO\",\"id\":3}},{\"to_module\":{\"id\":6},\"from_op\":{\"id\":3019},\"from\":{\"record_type\":\"FieldValue\",\"id\":188981},\"to\":{\"record_type\":\"ModuleIO\",\"id\":10}}]}'),(1211,1,'2017-10-27 05:39:33','2017-10-27 05:39:35',39,'Make Collection',NULL,NULL,NULL,'{\"id\":0,\"parent_id\":-1,\"name\":\"Untitled Module 0\",\"x\":160,\"y\":160,\"width\":160,\"height\":60,\"model\":{\"model\":\"Module\"},\"input\":null,\"output\":null,\"children\":null,\"wires\":null}'),(1213,1,'2017-10-27 05:48:23','2017-10-27 05:48:24',39,'Cloning Demo (copy)','planning',NULL,NULL,'{\"id\":0,\"parent_id\":-1,\"name\":\"Untitled Module 0\",\"x\":160,\"y\":160,\"width\":160,\"height\":60,\"model\":{\"model\":\"Module\"},\"input\":null,\"output\":null,\"children\":[{\"id\":2,\"parent_id\":0,\"name\":\"PCR and Gel Extraction\",\"x\":208,\"y\":384,\"width\":160,\"height\":60,\"model\":{\"model\":\"Module\"},\"input\":[{\"id\":0,\"x\":128,\"y\":352,\"width\":32,\"height\":32,\"model\":{\"model\":\"ModuleIO\"}},{\"id\":1,\"x\":176,\"y\":352,\"width\":32,\"height\":32,\"model\":{\"model\":\"ModuleIO\"}},{\"id\":2,\"x\":224,\"y\":352,\"width\":32,\"height\":32,\"model\":{\"model\":\"ModuleIO\"}}],\"output\":[{\"id\":3,\"x\":176,\"y\":32,\"width\":32,\"height\":32,\"model\":{\"model\":\"ModuleIO\"}}],\"children\":null,\"wires\":[{\"to_module\":{\"id\":2},\"from_op\":{\"id\":3024},\"from\":{\"record_type\":\"FieldValue\",\"id\":188993},\"to\":{\"record_type\":\"ModuleIO\",\"id\":3}},{\"from_module\":{\"id\":2},\"to_op\":{\"id\":3027},\"to\":{\"record_type\":\"FieldValue\",\"id\":188999},\"from\":{\"record_type\":\"ModuleIO\",\"id\":0}},{\"from_module\":{\"id\":2},\"to_op\":{\"id\":3027},\"to\":{\"record_type\":\"FieldValue\",\"id\":189000},\"from\":{\"record_type\":\"ModuleIO\",\"id\":1}},{\"from_module\":{\"id\":2},\"to_op\":{\"id\":3027},\"to\":{\"record_type\":\"FieldValue\",\"id\":189001},\"from\":{\"record_type\":\"ModuleIO\",\"id\":2}}]},{\"id\":4,\"parent_id\":0,\"name\":\"Transform to Overnight\",\"x\":288,\"y\":208,\"width\":160,\"height\":60,\"model\":{\"model\":\"Module\"},\"input\":[{\"id\":4,\"x\":144,\"y\":464,\"width\":32,\"height\":32,\"model\":{\"model\":\"ModuleIO\"}},{\"id\":5,\"x\":208,\"y\":464,\"width\":32,\"height\":32,\"model\":{\"model\":\"ModuleIO\"}}],\"output\":[{\"id\":6,\"x\":176,\"y\":144,\"width\":32,\"height\":32,\"model\":{\"model\":\"ModuleIO\"}}],\"children\":null,\"wires\":[{\"to_module\":{\"id\":4},\"from_op\":{\"id\":3030},\"from\":{\"record_type\":\"FieldValue\",\"id\":189008},\"to\":{\"record_type\":\"ModuleIO\",\"id\":6}},{\"from_module\":{\"id\":4},\"to_op\":{\"id\":3033},\"to\":{\"record_type\":\"FieldValue\",\"id\":189013},\"from\":{\"record_type\":\"ModuleIO\",\"id\":4}},{\"from_module\":{\"id\":4},\"to_op\":{\"id\":3033},\"to\":{\"record_type\":\"FieldValue\",\"id\":189014},\"from\":{\"record_type\":\"ModuleIO\",\"id\":5}}]},{\"id\":5,\"parent_id\":0,\"name\":\"Sequence DNA\",\"x\":496,\"y\":208,\"width\":160,\"height\":60,\"model\":{\"model\":\"Module\"},\"input\":[{\"id\":7,\"x\":352,\"y\":304,\"width\":32,\"height\":32,\"model\":{\"model\":\"ModuleIO\"}},{\"id\":8,\"x\":416,\"y\":304,\"width\":32,\"height\":32,\"model\":{\"model\":\"ModuleIO\"}}],\"output\":null,\"children\":null,\"wires\":[{\"from_module\":{\"id\":5},\"to_op\":{\"id\":3036},\"to\":{\"record_type\":\"FieldValue\",\"id\":189020},\"from\":{\"record_type\":\"ModuleIO\",\"id\":7}},{\"from_module\":{\"id\":5},\"to_op\":{\"id\":3036},\"to\":{\"record_type\":\"FieldValue\",\"id\":189021},\"from\":{\"record_type\":\"ModuleIO\",\"id\":8}}]},{\"id\":6,\"parent_id\":0,\"name\":\"Sequence DNA\",\"x\":672,\"y\":208,\"width\":160,\"height\":60,\"model\":{\"model\":\"Module\"},\"input\":[{\"id\":9,\"x\":608,\"y\":304,\"width\":32,\"height\":32,\"model\":{\"model\":\"ModuleIO\"}},{\"id\":10,\"x\":672,\"y\":304,\"width\":32,\"height\":32,\"model\":{\"model\":\"ModuleIO\"}}],\"output\":null,\"children\":null,\"wires\":[{\"from_module\":{\"id\":6},\"to_op\":{\"id\":3038},\"to\":{\"record_type\":\"FieldValue\",\"id\":189024},\"from\":{\"record_type\":\"ModuleIO\",\"id\":9}},{\"from_module\":{\"id\":6},\"to_op\":{\"id\":3038},\"to\":{\"record_type\":\"FieldValue\",\"id\":189025},\"from\":{\"record_type\":\"ModuleIO\",\"id\":10}}]}],\"wires\":[{\"from_module\":{\"id\":4},\"to_op\":{\"id\":3029},\"to\":{\"record_type\":\"FieldValue\",\"id\":189004},\"from\":{\"record_type\":\"ModuleIO\",\"id\":6}},{\"to_module\":{\"id\":4},\"from_op\":{\"id\":3034},\"from\":{\"record_type\":\"FieldValue\",\"id\":189017},\"to\":{\"record_type\":\"ModuleIO\",\"id\":4}},{\"from_module\":{\"id\":4},\"to_op\":{\"id\":3035},\"to\":{\"record_type\":\"FieldValue\",\"id\":189018},\"from\":{\"record_type\":\"ModuleIO\",\"id\":6}},{\"to_module\":{\"id\":5},\"from_op\":{\"id\":3035},\"from\":{\"record_type\":\"FieldValue\",\"id\":189019},\"to\":{\"record_type\":\"ModuleIO\",\"id\":7}},{\"to_module\":{\"id\":6},\"from_op\":{\"id\":3035},\"from\":{\"record_type\":\"FieldValue\",\"id\":189019},\"to\":{\"record_type\":\"ModuleIO\",\"id\":9}},{\"from_module\":{\"id\":2},\"to_op\":{\"id\":3034},\"to\":{\"record_type\":\"FieldValue\",\"id\":189016},\"from\":{\"record_type\":\"ModuleIO\",\"id\":3}},{\"to_module\":{\"id\":6},\"from_op\":{\"id\":3040},\"from\":{\"record_type\":\"FieldValue\",\"id\":189029},\"to\":{\"record_type\":\"ModuleIO\",\"id\":10}}]}'),(1215,1,'2017-10-27 05:53:16','2017-10-27 05:53:19',39,'Make Collection',NULL,NULL,NULL,'{\"id\":0,\"parent_id\":-1,\"name\":\"Untitled Module 0\",\"x\":160,\"y\":160,\"width\":160,\"height\":60,\"model\":{\"model\":\"Module\"},\"input\":null,\"output\":null,\"children\":null,\"wires\":null}'),(1218,1,'2017-10-27 06:05:42','2017-10-27 06:05:42',39,'Cloning Demo (copy)','planning',NULL,NULL,'{\"id\":0,\"parent_id\":-1,\"name\":\"Untitled Module 0\",\"x\":160,\"y\":160,\"width\":160,\"height\":60,\"model\":{\"model\":\"Module\"},\"input\":null,\"output\":null,\"children\":[{\"id\":2,\"parent_id\":0,\"name\":\"PCR and Gel Extraction\",\"x\":208,\"y\":384,\"width\":160,\"height\":60,\"model\":{\"model\":\"Module\"},\"input\":[{\"id\":0,\"x\":128,\"y\":352,\"width\":32,\"height\":32,\"model\":{\"model\":\"ModuleIO\"}},{\"id\":1,\"x\":176,\"y\":352,\"width\":32,\"height\":32,\"model\":{\"model\":\"ModuleIO\"}},{\"id\":2,\"x\":224,\"y\":352,\"width\":32,\"height\":32,\"model\":{\"model\":\"ModuleIO\"}}],\"output\":[{\"id\":3,\"x\":176,\"y\":32,\"width\":32,\"height\":32,\"model\":{\"model\":\"ModuleIO\"}}],\"children\":null,\"wires\":[{\"to_module\":{\"id\":2},\"from_op\":{\"id\":3047},\"from\":{\"record_type\":\"FieldValue\",\"id\":189043},\"to\":{\"record_type\":\"ModuleIO\",\"id\":3}},{\"from_module\":{\"id\":2},\"to_op\":{\"id\":3050},\"to\":{\"record_type\":\"FieldValue\",\"id\":189049},\"from\":{\"record_type\":\"ModuleIO\",\"id\":0}},{\"from_module\":{\"id\":2},\"to_op\":{\"id\":3050},\"to\":{\"record_type\":\"FieldValue\",\"id\":189050},\"from\":{\"record_type\":\"ModuleIO\",\"id\":1}},{\"from_module\":{\"id\":2},\"to_op\":{\"id\":3050},\"to\":{\"record_type\":\"FieldValue\",\"id\":189051},\"from\":{\"record_type\":\"ModuleIO\",\"id\":2}}]},{\"id\":4,\"parent_id\":0,\"name\":\"Transform to Overnight\",\"x\":288,\"y\":208,\"width\":160,\"height\":60,\"model\":{\"model\":\"Module\"},\"input\":[{\"id\":4,\"x\":144,\"y\":464,\"width\":32,\"height\":32,\"model\":{\"model\":\"ModuleIO\"}},{\"id\":5,\"x\":208,\"y\":464,\"width\":32,\"height\":32,\"model\":{\"model\":\"ModuleIO\"}}],\"output\":[{\"id\":6,\"x\":176,\"y\":144,\"width\":32,\"height\":32,\"model\":{\"model\":\"ModuleIO\"}}],\"children\":null,\"wires\":[{\"to_module\":{\"id\":4},\"from_op\":{\"id\":3053},\"from\":{\"record_type\":\"FieldValue\",\"id\":189058},\"to\":{\"record_type\":\"ModuleIO\",\"id\":6}},{\"from_module\":{\"id\":4},\"to_op\":{\"id\":3056},\"to\":{\"record_type\":\"FieldValue\",\"id\":189063},\"from\":{\"record_type\":\"ModuleIO\",\"id\":4}},{\"from_module\":{\"id\":4},\"to_op\":{\"id\":3056},\"to\":{\"record_type\":\"FieldValue\",\"id\":189064},\"from\":{\"record_type\":\"ModuleIO\",\"id\":5}}]},{\"id\":5,\"parent_id\":0,\"name\":\"Sequence DNA\",\"x\":496,\"y\":208,\"width\":160,\"height\":60,\"model\":{\"model\":\"Module\"},\"input\":[{\"id\":7,\"x\":352,\"y\":304,\"width\":32,\"height\":32,\"model\":{\"model\":\"ModuleIO\"}},{\"id\":8,\"x\":416,\"y\":304,\"width\":32,\"height\":32,\"model\":{\"model\":\"ModuleIO\"}}],\"output\":null,\"children\":null,\"wires\":[{\"from_module\":{\"id\":5},\"to_op\":{\"id\":3059},\"to\":{\"record_type\":\"FieldValue\",\"id\":189070},\"from\":{\"record_type\":\"ModuleIO\",\"id\":7}},{\"from_module\":{\"id\":5},\"to_op\":{\"id\":3059},\"to\":{\"record_type\":\"FieldValue\",\"id\":189071},\"from\":{\"record_type\":\"ModuleIO\",\"id\":8}}]},{\"id\":6,\"parent_id\":0,\"name\":\"Sequence DNA\",\"x\":672,\"y\":208,\"width\":160,\"height\":60,\"model\":{\"model\":\"Module\"},\"input\":[{\"id\":9,\"x\":608,\"y\":304,\"width\":32,\"height\":32,\"model\":{\"model\":\"ModuleIO\"}},{\"id\":10,\"x\":672,\"y\":304,\"width\":32,\"height\":32,\"model\":{\"model\":\"ModuleIO\"}}],\"output\":null,\"children\":null,\"wires\":[{\"from_module\":{\"id\":6},\"to_op\":{\"id\":3061},\"to\":{\"record_type\":\"FieldValue\",\"id\":189074},\"from\":{\"record_type\":\"ModuleIO\",\"id\":9}},{\"from_module\":{\"id\":6},\"to_op\":{\"id\":3061},\"to\":{\"record_type\":\"FieldValue\",\"id\":189075},\"from\":{\"record_type\":\"ModuleIO\",\"id\":10}}]}],\"wires\":[{\"from_module\":{\"id\":4},\"to_op\":{\"id\":3052},\"to\":{\"record_type\":\"FieldValue\",\"id\":189054},\"from\":{\"record_type\":\"ModuleIO\",\"id\":6}},{\"to_module\":{\"id\":4},\"from_op\":{\"id\":3057},\"from\":{\"record_type\":\"FieldValue\",\"id\":189067},\"to\":{\"record_type\":\"ModuleIO\",\"id\":4}},{\"from_module\":{\"id\":4},\"to_op\":{\"id\":3058},\"to\":{\"record_type\":\"FieldValue\",\"id\":189068},\"from\":{\"record_type\":\"ModuleIO\",\"id\":6}},{\"to_module\":{\"id\":5},\"from_op\":{\"id\":3058},\"from\":{\"record_type\":\"FieldValue\",\"id\":189069},\"to\":{\"record_type\":\"ModuleIO\",\"id\":7}},{\"to_module\":{\"id\":6},\"from_op\":{\"id\":3058},\"from\":{\"record_type\":\"FieldValue\",\"id\":189069},\"to\":{\"record_type\":\"ModuleIO\",\"id\":9}},{\"from_module\":{\"id\":2},\"to_op\":{\"id\":3057},\"to\":{\"record_type\":\"FieldValue\",\"id\":189066},\"from\":{\"record_type\":\"ModuleIO\",\"id\":3}},{\"to_module\":{\"id\":6},\"from_op\":{\"id\":3063},\"from\":{\"record_type\":\"FieldValue\",\"id\":189079},\"to\":{\"record_type\":\"ModuleIO\",\"id\":10}}]}');
/*!40000 ALTER TABLE `plans` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sample_types`
--

DROP TABLE IF EXISTS `sample_types`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sample_types` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL,
  `description` varchar(255) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=30 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `sample_types`
--

LOCK TABLES `sample_types` WRITE;
/*!40000 ALTER TABLE `sample_types` DISABLE KEYS */;
INSERT INTO `sample_types` VALUES (21,'Primer','A short double stranded piece of DNA for PCR and sequencing','2017-10-02 16:27:22','2017-10-02 16:27:22'),(22,'Plasmid','A circular piece of double stranded DNA','2017-10-02 16:27:22','2017-10-02 16:27:22'),(23,'Fragment','A linear double stranded piece of DNA from PCR or Restriction Digest','2017-10-02 16:27:22','2017-10-02 16:27:22'),(24,'E coli strain','A strain of E coli distinguished from others by genomic (not plasmid) modifications.','2017-10-02 16:27:22','2017-10-02 16:27:22'),(25,'Yeast Strain','A strain of yeast distinguished from others by genomic or plasmid modifications','2017-10-02 16:27:22','2017-10-02 16:27:22'),(26,'Enzyme','Increases a reaction rate','2017-10-02 18:10:07','2017-10-02 18:10:07'),(27,'Ladder','DNA ladder for gel electrophoresis','2017-10-27 05:11:19','2017-10-27 05:11:19'),(28,'Reagent','A general category for reagents','2017-10-27 05:16:55','2017-10-27 05:16:55'),(29,'Media','General media','2017-10-27 05:52:10','2017-10-27 05:52:10');
/*!40000 ALTER TABLE `sample_types` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `samples`
--

DROP TABLE IF EXISTS `samples`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `samples` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL,
  `sample_type_id` int(11) DEFAULT NULL,
  `project` varchar(255) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  `user_id` int(11) DEFAULT NULL,
  `description` varchar(255) DEFAULT NULL,
  `data` text,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=20348 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `samples`
--

LOCK TABLES `samples` WRITE;
/*!40000 ALTER TABLE `samples` DISABLE KEYS */;
INSERT INTO `samples` VALUES (20336,'my first fragment',23,'poncho','2017-10-02 16:35:24','2017-10-02 16:35:24',1,'For testing purposes',NULL),(20337,'my first plasmid',22,'poncho','2017-10-02 16:35:24','2017-10-02 16:35:24',1,'For testing purposes',NULL),(20338,'my first forward primer',21,'poncho','2017-10-02 16:35:25','2017-10-02 16:35:25',1,'For testing purposes',NULL),(20339,'my first reverse primer',21,'poncho','2017-10-02 16:35:25','2017-10-02 16:35:25',1,'For testing purposes',NULL),(20340,'Kapa HF Master Mix',26,'poncho','2017-10-02 18:16:45','2017-10-02 18:16:45',1,'New sample type description',NULL),(20341,'DH5alpha',24,'Transformation Efficiency','2017-10-27 04:48:02','2017-10-27 04:48:02',1,'Strain for transformation plasmid extraction',NULL),(20342,'my second fragment',23,'poncho','2017-10-27 05:03:23','2017-10-27 05:03:23',1,'Also for testing purposes',NULL),(20343,'1 kb Ladder',27,'poncho','2017-10-27 05:13:13','2017-10-27 05:13:13',1,'1 kb ladder',NULL),(20344,'100 bp Ladder',27,'poncho','2017-10-27 05:13:27','2017-10-27 05:13:27',1,'100 bp ladder',NULL),(20345,'6X Loading Dye',28,'poncho','2017-10-27 05:18:14','2017-10-27 05:18:14',1,'Loading dye for PCR',NULL),(20346,'Gibson Aliquot',28,'poncho','2017-10-27 05:39:15','2017-10-27 05:39:15',1,'New sample type description',NULL),(20347,'LB + Amp',29,'poncho','2017-10-27 05:54:05','2017-10-27 05:54:05',1,'LB with Ampicillin',NULL);
/*!40000 ALTER TABLE `samples` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `schema_migrations`
--

DROP TABLE IF EXISTS `schema_migrations`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `schema_migrations` (
  `version` varchar(255) NOT NULL,
  UNIQUE KEY `unique_schema_migrations` (`version`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `schema_migrations`
--

LOCK TABLES `schema_migrations` WRITE;
/*!40000 ALTER TABLE `schema_migrations` DISABLE KEYS */;
INSERT INTO `schema_migrations` VALUES ('20130726214810'),('20130728175955'),('20130813203406'),('20130813203610'),('20130930164148'),('20131001153824'),('20131001154059'),('20131001162233'),('20131001164018'),('20131002160320'),('20131007152145'),('20131007221832'),('20131008170438'),('20131008170820'),('20131017153859'),('20131017195843'),('20131017223325'),('20131022161712'),('20131029153603'),('20131029153634'),('20131111143554'),('20131111143621'),('20131113172448'),('20131113181345'),('20131119164152'),('20131119164208'),('20131122032927'),('20131223192901'),('20140131235419'),('20140404201838'),('20140404201900'),('20140404204258'),('20140408224245'),('20140428213241'),('20140507230919'),('20140508203643'),('20140513225335'),('20140616190537'),('20140714220057'),('20140907220135'),('20150124195318'),('20150124201744'),('20150129213358'),('20150129221830'),('20150212051010'),('20150212051027'),('20150213173621'),('20150222153442'),('20150326202149'),('20150405154727'),('20150515160553'),('20150515160619'),('20150719221125'),('20150719221226'),('20150719221253'),('20150719223053'),('20150720044538'),('20150828232337'),('20150923014954'),('20150923015030'),('20150923184243'),('20150924044044'),('20150926162327'),('20151027164741'),('20151029034310'),('20151118210640'),('20151203054202'),('20160128203950'),('20160128205317'),('20160128205943'),('20160129021809'),('20160129164244'),('20160129165100'),('20160330023703'),('20160330033810'),('20160330185947'),('20160330190634'),('20160411130601'),('20160411131711'),('20160412010529'),('20160427043024'),('20160427043546'),('20160429232330'),('20160429232408'),('20160429232434'),('20160430000308'),('20160430152749'),('20160514044605'),('20160526204339'),('20160607162741'),('20160615161649'),('20160720211005'),('20161113203042'),('20161219172133'),('20170106204721'),('20170330173426'),('20170421231924'),('20170426225719'),('20170504211619'),('20170504212208'),('20170604165355'),('20170627173019'),('20170725190809'),('20170729024546'),('20170806145525'),('20170813203843'),('20171103151518'),('20180509200425'),('20180529204642');
/*!40000 ALTER TABLE `schema_migrations` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `timings`
--

DROP TABLE IF EXISTS `timings`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `timings` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `parent_id` int(11) DEFAULT NULL,
  `parent_class` varchar(255) DEFAULT NULL,
  `days` varchar(255) DEFAULT NULL,
  `start` int(11) DEFAULT NULL,
  `stop` int(11) DEFAULT NULL,
  `active` tinyint(1) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=67 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `timings`
--

LOCK TABLES `timings` WRITE;
/*!40000 ALTER TABLE `timings` DISABLE KEYS */;
INSERT INTO `timings` VALUES (50,183,'OperationType','[\"Mo\",\"Tu\",\"We\",\"Th\",\"Fr\"]',870,930,1,'2017-10-02 16:27:22','2017-10-02 16:27:22'),(51,184,'OperationType','[\"Mo\",\"Tu\",\"We\",\"Th\",\"Fr\"]',960,990,1,'2017-10-02 16:28:05','2017-10-02 16:28:05'),(52,185,'OperationType','[\"Mo\",\"Tu\",\"We\",\"Th\",\"Fr\"]',690,870,1,'2017-10-02 16:29:49','2017-10-02 16:29:49'),(53,186,'OperationType','[\"Mo\",\"Tu\",\"We\",\"Th\",\"Fr\"]',510,540,1,'2017-10-27 04:33:44','2017-10-27 04:33:44'),(54,187,'OperationType','[\"Mo\",\"Tu\",\"We\",\"Th\",\"Fr\"]',480,495,1,'2017-10-27 04:34:11','2017-10-27 04:34:11'),(55,188,'OperationType','[\"Mo\",\"Tu\",\"We\",\"Th\",\"Fr\"]',630,720,1,'2017-10-27 04:34:38','2017-10-27 04:34:38'),(56,188,'OperationType','[\"Mo\",\"Tu\",\"We\",\"Th\",\"Fr\"]',630,720,1,'2017-10-27 04:34:42','2017-10-27 04:34:42'),(57,189,'OperationType','[\"Mo\",\"Tu\",\"We\",\"Th\",\"Fr\"]',690,750,1,'2017-10-27 04:35:06','2017-10-27 04:35:06'),(58,190,'OperationType','[\"Mo\",\"Tu\",\"We\",\"Th\",\"Fr\"]',90,840,1,'2017-10-27 04:35:39','2017-10-27 04:35:39'),(59,191,'OperationType','[\"Mo\",\"Tu\",\"We\",\"Th\",\"Fr\"]',60,930,1,'2017-10-27 04:35:58','2017-10-27 04:35:58'),(60,192,'OperationType','[\"Mo\",\"Tu\",\"We\",\"Th\",\"Fr\"]',480,510,1,'2017-10-27 04:36:19','2017-10-27 04:36:19'),(61,194,'OperationType','[\"Su\",\"Mo\",\"Tu\",\"We\",\"Th\",\"Fr\"]',900,1050,1,'2017-10-27 04:36:45','2017-10-27 04:36:45'),(62,195,'OperationType','[\"Mo\",\"Tu\",\"We\",\"Th\",\"Fr\",\"Sa\"]',495,570,1,'2017-10-27 04:37:11','2017-10-27 04:37:11'),(63,196,'OperationType','[\"Su\",\"Mo\",\"Tu\",\"We\",\"Th\",\"Fr\"]',570,690,1,'2017-10-27 04:37:33','2017-10-27 04:37:33'),(64,197,'OperationType','[\"Su\",\"Mo\",\"Tu\",\"We\",\"Th\",\"Fr\",\"Sa\"]',660,810,1,'2017-10-27 04:37:54','2017-10-27 04:37:54'),(65,198,'OperationType','[\"Mo\",\"Tu\",\"We\",\"Th\",\"Fr\",\"Sa\"]',480,510,1,'2017-10-27 04:38:10','2017-10-27 04:38:10'),(66,199,'OperationType','[\"Su\",\"Mo\",\"Tu\",\"We\",\"Th\",\"Fr\",\"Sa\"]',930,990,1,'2017-10-27 04:38:31','2017-10-27 04:38:31');
/*!40000 ALTER TABLE `timings` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `uploads`
--

DROP TABLE IF EXISTS `uploads`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `uploads` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `job_id` int(11) DEFAULT NULL,
  `upload_file_name` varchar(255) DEFAULT NULL,
  `upload_content_type` varchar(255) DEFAULT NULL,
  `upload_file_size` int(11) DEFAULT NULL,
  `upload_updated_at` datetime DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `uploads`
--

LOCK TABLES `uploads` WRITE;
/*!40000 ALTER TABLE `uploads` DISABLE KEYS */;
/*!40000 ALTER TABLE `uploads` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user_budget_associations`
--

DROP TABLE IF EXISTS `user_budget_associations`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `user_budget_associations` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) DEFAULT NULL,
  `budget_id` int(11) DEFAULT NULL,
  `quota` float DEFAULT NULL,
  `disabled` tinyint(1) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=161 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user_budget_associations`
--

LOCK TABLES `user_budget_associations` WRITE;
/*!40000 ALTER TABLE `user_budget_associations` DISABLE KEYS */;
INSERT INTO `user_budget_associations` VALUES (160,1,39,1000000,0,'2017-10-02 17:48:47','2017-10-02 17:48:47');
/*!40000 ALTER TABLE `user_budget_associations` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `users`
--

DROP TABLE IF EXISTS `users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `users` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL,
  `login` varchar(255) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  `password_digest` varchar(255) DEFAULT NULL,
  `remember_token` varchar(255) DEFAULT NULL,
  `admin` tinyint(1) DEFAULT '0',
  `key` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `index_users_on_login` (`login`),
  KEY `index_users_on_remember_token` (`remember_token`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `users`
--

LOCK TABLES `users` WRITE;
/*!40000 ALTER TABLE `users` DISABLE KEYS */;
INSERT INTO `users` VALUES (1,'Joe Neptune','neptune','2013-06-16 17:26:54','2017-10-19 04:59:18','$2a$10$HxgxLX5/ITcYpII1InAL1.jUYAiHk/rMftHniPJVvauy43VDoo8yW','TYmoWfyV42AL7dSoYcgmug',1,'VHzz9IW3xnNx8O3cA_P0rKsUWmTVH_Qz9mHKqgE-hNI');
/*!40000 ALTER TABLE `users` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wires`
--

DROP TABLE IF EXISTS `wires`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wires` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `from_id` int(11) DEFAULT NULL,
  `to_id` int(11) DEFAULT NULL,
  `active` tinyint(1) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=1556 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wires`
--

LOCK TABLES `wires` WRITE;
/*!40000 ALTER TABLE `wires` DISABLE KEYS */;
INSERT INTO `wires` VALUES (1469,188818,188813,1,'2017-10-02 16:36:33','2017-10-02 16:36:33'),(1470,188820,188817,1,'2017-10-02 16:36:33','2017-10-02 16:36:33'),(1471,188823,188814,1,'2017-10-02 16:36:33','2017-10-02 16:36:33'),(1472,188825,188822,1,'2017-10-02 16:36:33','2017-10-02 16:36:33'),(1473,188839,188836,1,'2017-10-27 04:52:34','2017-10-27 04:52:34'),(1474,188841,188838,1,'2017-10-27 04:52:34','2017-10-27 04:52:34'),(1475,188844,188840,1,'2017-10-27 04:52:34','2017-10-27 04:52:34'),(1476,188846,188842,1,'2017-10-27 04:52:34','2017-10-27 04:52:34'),(1477,188837,188847,1,'2017-10-27 04:52:34','2017-10-27 04:52:34'),(1478,188837,188833,1,'2017-10-27 04:52:34','2017-10-27 04:52:34'),(1479,188851,188852,1,'2017-10-27 04:52:34','2017-10-27 04:52:34'),(1480,188848,188853,1,'2017-10-27 04:52:34','2017-10-27 04:52:34'),(1481,188855,188856,1,'2017-10-27 04:54:17','2017-10-27 04:54:17'),(1482,188848,188849,1,'2017-10-27 04:54:17','2017-10-27 04:54:17'),(1483,188860,188857,1,'2017-10-27 04:59:30','2017-10-27 04:59:30'),(1484,188863,188859,1,'2017-10-27 04:59:30','2017-10-27 04:59:30'),(1485,188867,188861,1,'2017-10-27 04:59:30','2017-10-27 04:59:30'),(1486,188868,188862,1,'2017-10-27 04:59:30','2017-10-27 04:59:30'),(1487,188871,188872,1,'2017-10-27 05:00:53','2017-10-27 05:00:53'),(1488,188883,188880,1,'2017-10-27 05:03:49','2017-10-27 05:03:49'),(1489,188886,188882,1,'2017-10-27 05:03:49','2017-10-27 05:03:49'),(1490,188890,188884,1,'2017-10-27 05:03:49','2017-10-27 05:03:49'),(1491,188891,188885,1,'2017-10-27 05:03:49','2017-10-27 05:03:49'),(1492,188898,188895,1,'2017-10-27 05:03:49','2017-10-27 05:03:49'),(1493,188900,188897,1,'2017-10-27 05:03:49','2017-10-27 05:03:49'),(1494,188903,188899,1,'2017-10-27 05:03:49','2017-10-27 05:03:49'),(1495,188905,188901,1,'2017-10-27 05:03:49','2017-10-27 05:03:49'),(1496,188896,188906,1,'2017-10-27 05:03:49','2017-10-27 05:03:49'),(1497,188896,188892,1,'2017-10-27 05:03:49','2017-10-27 05:03:49'),(1498,188910,188911,1,'2017-10-27 05:03:49','2017-10-27 05:03:49'),(1499,188907,188912,1,'2017-10-27 05:03:49','2017-10-27 05:03:49'),(1500,188914,188915,1,'2017-10-27 05:03:49','2017-10-27 05:03:49'),(1501,188907,188908,1,'2017-10-27 05:03:49','2017-10-27 05:03:49'),(1502,188881,188904,1,'2017-10-27 05:05:15','2017-10-27 05:05:15'),(1503,188918,188913,1,'2017-10-27 05:05:15','2017-10-27 05:05:15'),(1504,188920,188917,1,'2017-10-27 05:05:15','2017-10-27 05:05:15'),(1505,188947,188944,NULL,'2017-10-27 05:32:41','2017-10-27 05:32:41'),(1506,188950,188946,NULL,'2017-10-27 05:32:41','2017-10-27 05:32:41'),(1507,188954,188948,NULL,'2017-10-27 05:32:41','2017-10-27 05:32:41'),(1508,188955,188949,NULL,'2017-10-27 05:32:41','2017-10-27 05:32:41'),(1509,188962,188959,NULL,'2017-10-27 05:32:41','2017-10-27 05:32:41'),(1510,188964,188961,NULL,'2017-10-27 05:32:41','2017-10-27 05:32:41'),(1511,188967,188963,NULL,'2017-10-27 05:32:41','2017-10-27 05:32:41'),(1512,188969,188965,NULL,'2017-10-27 05:32:41','2017-10-27 05:32:41'),(1513,188960,188970,NULL,'2017-10-27 05:32:41','2017-10-27 05:32:41'),(1514,188960,188956,NULL,'2017-10-27 05:32:41','2017-10-27 05:32:41'),(1515,188974,188975,NULL,'2017-10-27 05:32:41','2017-10-27 05:32:41'),(1516,188971,188976,NULL,'2017-10-27 05:32:41','2017-10-27 05:32:41'),(1517,188978,188979,NULL,'2017-10-27 05:32:41','2017-10-27 05:32:41'),(1518,188971,188972,NULL,'2017-10-27 05:32:41','2017-10-27 05:32:41'),(1519,188945,188968,NULL,'2017-10-27 05:32:41','2017-10-27 05:32:41'),(1520,188981,188977,NULL,'2017-10-27 05:32:41','2017-10-27 05:32:41'),(1521,188983,188980,NULL,'2017-10-27 05:32:41','2017-10-27 05:32:41'),(1522,188995,188992,NULL,'2017-10-27 05:48:24','2017-10-27 05:48:24'),(1523,188998,188994,NULL,'2017-10-27 05:48:24','2017-10-27 05:48:24'),(1524,189002,188996,NULL,'2017-10-27 05:48:24','2017-10-27 05:48:24'),(1525,189003,188997,NULL,'2017-10-27 05:48:24','2017-10-27 05:48:24'),(1526,189010,189007,NULL,'2017-10-27 05:48:24','2017-10-27 05:48:24'),(1527,189012,189009,NULL,'2017-10-27 05:48:24','2017-10-27 05:48:24'),(1528,189015,189011,NULL,'2017-10-27 05:48:24','2017-10-27 05:48:24'),(1529,189017,189013,NULL,'2017-10-27 05:48:24','2017-10-27 05:48:24'),(1530,189008,189018,NULL,'2017-10-27 05:48:24','2017-10-27 05:48:24'),(1531,189008,189004,NULL,'2017-10-27 05:48:24','2017-10-27 05:48:24'),(1532,189022,189023,NULL,'2017-10-27 05:48:24','2017-10-27 05:48:24'),(1533,189019,189024,NULL,'2017-10-27 05:48:24','2017-10-27 05:48:24'),(1534,189026,189027,NULL,'2017-10-27 05:48:24','2017-10-27 05:48:24'),(1535,189019,189020,NULL,'2017-10-27 05:48:24','2017-10-27 05:48:24'),(1536,188993,189016,NULL,'2017-10-27 05:48:24','2017-10-27 05:48:24'),(1537,189029,189025,NULL,'2017-10-27 05:48:24','2017-10-27 05:48:24'),(1538,189031,189028,NULL,'2017-10-27 05:48:24','2017-10-27 05:48:24'),(1539,189045,189042,NULL,'2017-10-27 06:05:42','2017-10-27 06:05:42'),(1540,189048,189044,NULL,'2017-10-27 06:05:42','2017-10-27 06:05:42'),(1541,189052,189046,NULL,'2017-10-27 06:05:42','2017-10-27 06:05:42'),(1542,189053,189047,NULL,'2017-10-27 06:05:42','2017-10-27 06:05:42'),(1543,189060,189057,NULL,'2017-10-27 06:05:42','2017-10-27 06:05:42'),(1544,189062,189059,NULL,'2017-10-27 06:05:42','2017-10-27 06:05:42'),(1545,189065,189061,NULL,'2017-10-27 06:05:42','2017-10-27 06:05:42'),(1546,189067,189063,NULL,'2017-10-27 06:05:42','2017-10-27 06:05:42'),(1547,189058,189068,NULL,'2017-10-27 06:05:42','2017-10-27 06:05:42'),(1548,189058,189054,NULL,'2017-10-27 06:05:42','2017-10-27 06:05:42'),(1549,189072,189073,NULL,'2017-10-27 06:05:42','2017-10-27 06:05:42'),(1550,189069,189074,NULL,'2017-10-27 06:05:42','2017-10-27 06:05:42'),(1551,189076,189077,NULL,'2017-10-27 06:05:42','2017-10-27 06:05:42'),(1552,189069,189070,NULL,'2017-10-27 06:05:42','2017-10-27 06:05:42'),(1553,189043,189066,NULL,'2017-10-27 06:05:42','2017-10-27 06:05:42'),(1554,189079,189075,NULL,'2017-10-27 06:05:42','2017-10-27 06:05:42'),(1555,189081,189078,NULL,'2017-10-27 06:05:42','2017-10-27 06:05:42');
/*!40000 ALTER TABLE `wires` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wizards`
--

DROP TABLE IF EXISTS `wizards`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wizards` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL,
  `specification` varchar(255) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  `description` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wizards`
--

LOCK TABLES `wizards` WRITE;
/*!40000 ALTER TABLE `wizards` DISABLE KEYS */;
INSERT INTO `wizards` VALUES (13,'M20','{\"fields\":{\"0\":{\"name\":\"a\",\"capacity\":\"-1\"},\"1\":{\"name\":\"b\",\"capacity\":\"16\"},\"2\":{\"name\":\"c\",\"capacity\":\"81\"}}}','2017-10-02 16:40:56','2017-10-02 16:45:56','Minus 20 Freezefr'),(14,'M80','{\"fields\":{\"0\":{\"name\":\"a\",\"capacity\":\"-1\"},\"1\":{\"name\":\"b\",\"capacity\":\"16\"},\"2\":{\"name\":\"c\",\"capacity\":\"81\"}}}','2017-10-02 16:41:06','2017-10-02 16:46:06','Minus 80 Freezer');
/*!40000 ALTER TABLE `wizards` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2018-06-05 22:06:19