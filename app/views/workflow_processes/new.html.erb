<div ng-app="launcher">

  <div id="launcher-control" 
       class='row-fluid' 
       ng-controller='launcherCtrl as launcher' 
       workflow=<%= params[:wid] %> >

    <h4>New <i><a href="/workflows/{{workflow.id}}">{{workflow.name}}</a></i> Process</h4>

    <p>{{workflow.specification.description}}</p>

    <div id="thread_builder">

      <div class='pull-left'><h4>Build a Thread <span class="alert alert-error" ng-if="error != ''">{{error}}</span></h4></div>

      <div class="pull-right">
        <a class="btn btn-small btn-info" href="#" ng-click="randomize()">Randomize</a> 
        <a class="btn btn-small btn-success" href="#" ng-click="submit()">Add</a>               
      </div>      

      <table class='launcher-table'>

        <tr ng-if="workflow.form.inputs.length == 0 && workflow.form.outputs.length == 0 && workflow.form.parameters == 0">
          <th>No Thread Definition Required</th>
        </tr>

        <tr>
          <th ng-repeat="i in visible_inputs()" class='input-header'>{{i.description}}</th>
          <th ng-repeat="i in workflow.form.parameters" class='param-header'>{{i.description}}</th>          
          <th ng-repeat="i in visible_outputs()" class='output-header'>{{i.description}}</th>            
        </tr>

        <tr>
          <td ng-repeat="i in visible_inputs()">
            <input ng-if="!i.is_vector" type='text' class='input-plain {{i.name}}-sample' ng-model="new_thread[i.name]" />
            <div ng-if="i.is_vector">
               <table class='launcher-vector-table'>
                 <tr ng-repeat="s in new_thread[i.name] track by $index">
                   <td>
                     <input type='text' 
                            class='input-plain {{i.name}}-sample'
                            ng-model="new_thread[i.name][$index]"
                            ng-data-index="{{$index}}" /> 
                   </td>
                   <td class='launcher-vector-remove'>
                     <a href="#" ng-click="removeFromVector(i,$index)"><i class='icon-remove'></i></a>
                   </td>
                 </tr>
                 <tr>
                   <td><a href="#" ng-click="addToVector(i)"><i class='icon-plus'></i></a></td>
                   <td></td>
                 </tr>
               </table>
            </div>
          </td>   

          <td ng-repeat="i in workflow.form.parameters">

            <div ng-if="!i.type.type">Error: type descriptor is not valid</div>

            <!-- No Choices -->

            <input ng-if="i.type.type == 'number' && !i.type.choices" 
                  type='number' 
                  id='{{i.name}}'                  
                  ng-model="new_thread[i.name]"
                  ng-init="new_thread[i.name] = i.type.default ? i.type.default : 0"
                  class='input-plain'/>

            <input ng-if="i.type.type == 'string' && !i.type.choices" 
                   type='text'
                   id='{{i.name}}'                     
                   ng-model="new_thread[i.name]"
                   ng-init="new_thread[i.name] = i.type.default ? i.type.default : ''"
                   class='input-plain'/>            

            <!-- Single Choice -->

            <select ng-if="i.type.type == 'number' && i.type.choices && !i.type.multiple" 
                    ng-options="toNumber(choice) as choice for choice in i.type.choices" 
                    ng-init="new_thread[i.name] = i.type.choices[0]" 
                    ng-model="new_thread[i.name]"
                    class='launcher-select'></select>

            <select ng-if="i.type.type == 'string' && i.type.choices && !i.type.multiple" 
                    ng-options="choice for choice in i.type.choices" 
                    ng-init="new_thread[i.name] = i.type.choices[0]" 
                    ng-model="new_thread[i.name]"
                    class='launcher-select'></select>

            <!-- Multiple Choice -->

            <select ng-if="i.type.type == 'number' && i.type.choices && i.type.multiple" 
                    ng-options="toNumber(choice) as choice for choice in i.type.choices" 
                    ng-init="new_thread[i.name] = []" 
                    ng-model="new_thread[i.name]"
                    multiple
                    ng-attr-size="{{ i.type.choices.length }}"
                    class='launcher-select'></select>

            <select ng-if="i.type.type == 'string' && i.type.choices && i.type.multiple" 
                    ng-options="choice for choice in i.type.choices" 
                    ng-init="new_thread[i.name] = []" 
                    ng-model="new_thread[i.name]"
                    multiple
                    ng-attr-size="{{ i.type.choices.length }}"
                    class='launcher-select'></select>


          </td>
          <td ng-repeat="i in visible_outputs()">
            <input type='text' id='{{i.name}}' class='input-plain' ng-model="new_thread[i.name]" />
          </td>            
        </tr>
      </table>

    </div>

    <div id="unassigned-threads" style='margin-top: 20px' ng-show="threads.length > 0">

      <div class='pull-left'><h4>Choose Threads</h4></div>
      <div class="pull-right">
        <a class="btn btn-small" href="#" ng-click="clear()">Clear Selection</a>
        <a class="btn btn-small" href="#" ng-click="all()">Select All</a>
        <% if Rails.env != 'production' %>
          <a class="btn btn-small btn-warning" href="#" ng-click="launch(true)" ng-disabled="!launchable">Debug</a>        
        <% end %>        
        <a class="btn btn-small btn-success" href="#" ng-click="launch(false)" ng-disabled="!launchable">Launch</a>
      </div>

      <table class='launcher-table launcher-threads'>
        <tr>
          <th>Thread Id</th>
          <th ng-repeat="i in workflow.form.inputs">{{i.description}}</th>
          <th ng-repeat="i in workflow.form.parameters">{{i.description}}</th>          
          <th ng-repeat="i in workflow.form.outputs">{{i.description}}</th> 
          <th>Created at</th>   
        </tr>
        <tr ng-repeat="thread in threads">
          <td>
            <input type=checkbox checked data-thread-id={{thread.id}} ng-model="thread.checked" ng-change='launch_check()' class='selector'> 
            {{thread.id}}
            <a href='#' ng-click="destroy(thread.id)" class='pull-right'><i class='icon-remove'></i></a>
          </td>
          <td ng-repeat="i in workflow.form.inputs">{{thread[i.name]}}</td>
          <td ng-repeat="i in workflow.form.parameters">{{thread[i.name]}}</td>          
          <td ng-repeat="i in workflow.form.outputs">{{thread[i.name]}}</td> 
          <td>{{thread.created_at | date:'MMM dd, yyyy'}}</td>
        </tr>
      </table>    

    </div>

    <br />

    <!-- div class='row-fluid'>
      <div class='span3'>
        <pre style="font-size: 6pt; line-height: 1.2">{{workflow.form.inputs|json}}</pre>
      </div>
      <div class='span3'>
        <pre style="font-size: 6pt; line-height: 1.2">{{workflow.form.outputs|json}}</pre>
      </div>      
      <div class='span3'>
        <pre style="font-size: 6pt; line-height: 1.2">{{workflow.form.parameters|json}}</pre>
      </div -->      
      <div class='sdpan3'>
        <pre style="font-size: 6pt; line-height: 1.2">{{new_thread|json}}</pre>
      </div>
    </div

  </div>

</div>

<script>

(function() {

  w = angular.module('launcher',[]);

  w.controller('launcherCtrl', [ '$scope', '$http', '$attrs', function ($scope,$http,$attrs) {

    $scope.new_thread = {};
    $scope.threads = [];
    $scope.workflow = {};
    $scope.sample_names = {};
    $scope.launchable = false;
    $scope.error = "";

    $scope.toNumber = function(str) {
      var i = parseInt(str);
      var f = parseInt(str);
      if ( i == f ) {
        return i;
      } else {
        return f;
      }
    }

    $scope.visible = function(parts) {
      var list = [];
      angular.forEach(parts,function(i) {
        if ( !i.hidden ) {
          list.push(i);
        }
      });
      return list;
    }

    $scope.visible_inputs = function() {
      if ( $scope.workflow.form ) {
        return $scope.visible($scope.workflow.form.inputs);
      } else {
        return [];
      }
    }

    $scope.visible_outputs = function() {
      if ( $scope.workflow.form ) {
        return $scope.visible($scope.workflow.form.outputs);
      } else {
        return [];
      }
    }

    $http.get('/workflows/' + $attrs.workflow + ".json")
      .success(function(data) {
        $scope.workflow = data;
        $scope.get_samples();
        $scope.init_new_thread();
      })
      .error(function() {
        $scope.error = "Could not retrieve workflow";
        console.log("Could not retrieve workflow");
      });

    function expand(thread) {
      var s = JSON.parse(thread.specification);
      angular.forEach(s,function(ispec) {
        if ( ispec.sample ) {
          thread[ispec.name] = ispec.sample;
        } else {
          thread[ispec.name] = ispec.value;
        }
      });
      thread.checked = true;
      return thread;
    }

    $http.get('/workflow_threads.json?workflow_id='+$attrs.workflow)
      .success(function(data) {
        $scope.threads = data;
        angular.forEach($scope.threads,function(thread) {
          expand(thread);
        });
        $scope.launchable = ($scope.threads.length > 0);
      })
      .error(function() {
        console.log("Could not retrieve workflow threads");
      });      

    function parts() {
      return $scope.workflow.form.inputs.concat($scope.workflow.form.outputs);
    }

    $scope.get_samples = function() {

      angular.forEach(parts(),function(i) {
        angular.forEach(i.alternatives, function(alt) {
          if ( alt.sample_type ) {
            var stid = alt.sample_type.split(":")[0];
            if ( ! $scope.sample_names[stid] ) {
              $scope.sample_names[stid] = [];
            }
          }
        });
      });

      angular.forEach($scope.sample_names,function(vals,stid) {
        $.ajax({
          url: '/sample_list/' + stid + ".json"
        }).done(function(samples) {
          $scope.sample_names[stid] = samples;
          $scope.autocomplete();
        });      
      });

    }

    $scope.associate_autocomplete_data = function (ispec) {

      var samples = [];

      angular.forEach(ispec.alternatives, function(alt) {
        var stid = alt.sample_type.split(":")[0];          
        samples = samples.concat($scope.sample_names[stid])
       });

      $("."+ispec.name+"-sample").autocomplete({
          source: samples,
          select: function(ev,ui) {
            if ( typeof $scope.new_thread[ispec.name] == "string" ) {
              $scope.new_thread[ispec.name] = ui.item.value;
            } else {
              var index = $(ev.target).attr('ng-data-index');
              $scope.new_thread[ispec.name][index] = ui.item.value;
            }
            $scope.$apply();
          }
        });

    }

    $scope.autocomplete = function() {

      angular.forEach(parts(),function(i) {

        $scope.associate_autocomplete_data(i);

        if ( i.alternatives[0] && i.alternatives[0].sample ) {
          $scope.new_thread[i.name] = i.alternatives[0].sample;
        }

        if ( i.is_vector ) {
          $scope.new_thread[i.name] = [ "" ];
        }

        $scope.$apply();

        $("#status").css('display','none');

      });

    }

    $scope.removeFromVector = function(ispec,index) {

      $scope.new_thread[ispec.name].splice(index, 1);

    }

    $scope.addToVector = function(ispec) {

      $scope.new_thread[ispec.name].push("");

      setTimeout(function(){ 
        // Note: This is lame, but I can't figure out how to set up autocomplete on the new element
        // that will be created when the model is updated unless I wait for angular to add the 
        // the element.
        $scope.associate_autocomplete_data(ispec);
      }, 100);

    }

    $scope.reset_param = function(p) {
      if ( p.type.default ) {
        $scope.new_thread[p.name] = p.type.default;
      } else if ( p.type.choices ) {
        $scope.new_thread[p.name] = p.type.choices[0];
      }
    }

    $scope.init_new_thread = function() {
      $scope.new_thread = {};
      angular.forEach(parts(),function(i) {
        if ( i.alternatives[0] && i.alternatives[0].sample ) {
          $scope.new_thread[i.name] = i.alternatives[0].sample;
        }
        if ( i.alternatives[0] && !i.alternatives[0].sample ) {
          $scope.new_thread[i.name] = "";
        }              
        if ( i.is_vector ) {
           $scope.new_thread[i.name] = [ "" ];
        }
      });
      angular.forEach($scope.workflow.form.parameters,$scope.reset_param);
    }

    $scope.submit = function() { 

      var data = JSON.stringify({ thread: $scope.new_thread, workflow_id: $scope.workflow.id });

      $.ajax({
          url: '/workflow_threads/',
          dataType: 'json',
          contentType: 'application/json',
          data: data,
          method: "POST"
        }).success(function(data) {

          if ( data.error ) {

            $scope.error = data.error;
            console.log(data.error);

          } else {

            $scope.error = "";
            $scope.threads.push(expand(data));
            $scope.init_new_thread();
            $scope.launchable = true;
            
          }

          $scope.$apply();

        })
        .error(function() {
          $scope.error = "Unknown error";
          console.log("Could not submit thread");
        });

    }

    $scope.randomize = function() {

      angular.forEach(parts(),function(io) {

        if ( !io.is_vector ) {
          var stid = io.alternatives[0].sample_type.split(":")[0];            
          n = $scope.sample_names[stid].length;
          $scope.new_thread[io.name] = $scope.sample_names[stid][Math.floor(Math.random()*n)];      
        } else {
          var stid = io.alternatives[0].sample_type.split(":")[0];            
          n = $scope.sample_names[stid].length;
          $scope.new_thread[io.name] = [];
          for ( var i=0; i<2; i++ ) {
            $scope.new_thread[io.name].push($scope.sample_names[stid][Math.floor(Math.random()*n)]);
          }
        }

      });

      angular.forEach($scope.workflow.form.parameters,function(p) {

        if ( !p.type.choices ) {
          if ( p.type.default ) {
            $scope.new_thread[p.name] = p.type.default;            
          } else if ( p.type.type == "number" ) {
            $scope.new_thread[p.name] = Math.round(Math.random()*1000)/10;
          } else if ( p.type.type == "string" ) {
            var strings = [ "biology", "computer science", "mathematics", "chemistry", "philosophy",
                            "economics", "literature", "medicine", "engineering", "sports and leisure",
                            "political sciences", "education", "psychology" ];
            $scope.new_thread[p.name] = strings[Math.floor(Math.random()*strings.length)];
          }
        } else {
          if ( p.type.multiple ) {
            $scope.new_thread[p.name] = [ p.type.choices[Math.floor(Math.random()*p.type.choices.length)] ];
          } else {
            $scope.new_thread[p.name] = p.type.choices[Math.floor(Math.random()*p.type.choices.length)];
          }
        }
      });

    }

    function set_thread_checked(val) {
      angular.forEach($scope.threads,function(t) {
        t.checked = val;
      });
    }

    $scope.all = function() {
      $(".selector").prop('checked',true);
      set_thread_checked(true);
      $scope.launchable = true;      
    }

    $scope.clear = function() {
      $(".selector").prop('checked',false);
      set_thread_checked(false);   
      $scope.launchable = false;      
    }

    $scope.launch_check = function() {
      $scope.launchable = ( $(".selector:checked").length > 0 );
      return $scope.launchable;
    }

    $scope.launch = function(debug) {

      var thread_ids = [];

      $('.selector').each(function(s) {
        if ($(this).prop('checked') ) {
          thread_ids.push($(this).data('thread-id'));
        }
      });

      if ( thread_ids.length > 0 ) {

        $.ajax({
          url: '/workflow_processes',
          data: {workflow_id: $scope.workflow.id, thread_ids: thread_ids, debug: debug},
          method: "POST"
        }).success(function(data) {
            window.location = '/workflow_processes/' + data.id;
        }).error(function() {
            console.log("Could not start process")
        });

      } else {
        console.log("No threads selected.")
      }
    }

    $scope.destroy = function(tid) {
      $.ajax({
        method: "DELETE",
        url: '/workflow_threads/'+tid+'.json'
      }).success(function(data) {
          var temp = [];
          angular.forEach($scope.threads,function(thread) {
            if ( thread.id != tid ) {
              temp.push(thread);
            }
          });
          $scope.threads = temp;
          $scope.$apply();
        })
        .error(function() {
          console.log("Could not delete thread " + tid);
        });    
    }    

  }]);

})();

</script>
