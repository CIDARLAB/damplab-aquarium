<style>

.job_chart {
  width: 100%;
  height: 300px;
  background: #fff;
  border: 0pt solid #eee;
  position: relative;
}

.bar {
  position: absolute;
}

.text {
  position: absolute;
  font-size: 14pt;
  line-height: 16pt;
  text-align: center;
  padding: 5pt;
}

.smalltext {
  position: absolute;
  font-size: 10pt;
  line-height: 16pt;
  text-align: center;
}

.line {
  position: absolute;
  background: red;
}

.control {
  float: left;
  width: 14px;
  height: 14px;
  padding: 5px;
  margin: 5px;
  border: 1pt solid #bbb;
  border-radius: 2px;
  background: #fff;
}

.control:active {
  background: #ccc;
}

</style>


<div id="activity" class="job_chart">
</div>

  <a id="back" class='control' href="#"><i class='icon-arrow-left'></i></a>
  <a id="zoom_in" class='control' href="#"><i class='icon-zoom-in'></i></a>
  <a id="zoom_out" class='control' href="#"><i class='icon-zoom-out'></i></a>
  <a id="forward" class='control' href="#"><i class='icon-arrow-right'></i></a>

<script>

  // All times should be represented in seconds since 1970
  // A window in time coordinates should be kept track of in terms of a start time that is at the left of the viewer
  //    The position of the left side of the viewer, called the cursor(?), should be kept track of in terms of time
  //    Moving left and right should increase or decrease the position of the left of the viewer in terms of time
  // A zoom level should be kept track of with zoom=1 => 24 hours per viewer width
  // All calculations and scaling should be done in the plot methods (bar, text, vertical-line, etc)
  // All x arguments to the plot methods should be in terms of time
  // All y arguments should be in terms of row number, starting at 0 with the time at n and the date at n+1

  function Row() {
    this.items = [];
  }
 
  HOUR = 60*60;

  function JobChart(id) {

    // The div into which to plot
    this.div = document.getElementById(id);

    // Row data: Has the form { rowname1: [ data11, data12, ... ], rowname2: [ data21, data22, ... ] }
    this.rows = new Object();

    // Set up cursor and zoom
    this.compute_dates(); 
    this.cursor = this.tomorrow_morning.getTime()/1000; // The right side of the viewer
    this.zoom = 24; // number of hours in the vierwer
    
    var that = this;

    // Set up controls
    this.forward = document.getElementById('forward'); 
    this.forward.addEventListener ( 'click', function() {
      that.cursor += HOUR;
      that.render();
    } );

    this.zoom_in = document.getElementById('zoom_in');
    this.zoom_in.addEventListener ( 'click', function() {
      if ( that.zoom > 24 ) {
	that.zoom -= 24;
      } else if ( that.zoom > 1 ) {
	that.zoom -= 1;
      } 
      that.render();
    } );

    this.back = document.getElementById('back');
    this.back.addEventListener ( 'click', function() {
      that.cursor -= HOUR;
      that.render();
    } );

    this.zoom_out = document.getElementById('zoom_out');
    this.zoom_out.addEventListener ( 'click', function() {
      if ( that.zoom < 24 ) {
        that.zoom += 1;
      } else {
        that.zoom += 24;
      }
      that.render();
    } );

  }

  JobChart.prototype.add_item = function(rowname,item) {

    if ( !this.rows[rowname] ) {
      this.rows[rowname] = new Row();
    }

    this.rows[rowname].items.push(item);

  }

  JobChart.prototype.compute_sizes = function() {

    this.x_offset = 120;
    this.y_offset = 10;
    this.width = this.div.offsetWidth - this.x_offset - 10;
    this.height = this.div.offsetHeight - this.y_offset - 30;
    this.num_rows = 10;    

  }

  JobChart.prototype.render_background = function() {

    this.compute_dates();

    for ( var i=this.zoom; i>0; i-- ) {

      var d = new Date ( ( this.cursor - i*HOUR )*1000  );
   
      // Draw a bar for each hour or group of hours
      var b = this.bar   ( this.cursor - i*HOUR, 0,             HOUR, this.num_rows, i%2==0 ? "#eff" : "#fff" );
      if ( this.zoom < 24 || d.getHours() % 4 == 0 ) {
        var t = this.text  ( this.cursor - i*HOUR, this.num_rows, HOUR, 1, d.getHours() + ":00" );
        t.style.fontSize = '9pt';
        t.style.textAlign = 'left';
      }

      // Print the date
      if ( d.getHours() == 0 ) {
        this.bar ( this.cursor - i*HOUR, 0, 1, this.num_rows+3, '#aaa' );
        var c = this.text  ( this.cursor - i*HOUR, this.num_rows+1, HOUR, 1, d.toDateString() );
        c.style.fontSize = '9pt';
        c.style.textAlign = 'left';
        c.style.fontWeight = 'bold';
        c.style.whiteSpace = 'nowrap';
      }

    }

  }

  JobChart.prototype.render_rows = function() {

    var i = 0;

    //jc.bar ( jc.now.getTime()/1000 - 1*HOUR, 0, HOUR, 1, '#123' );
    //jc.bar ( jc.now.getTime()/1000 - 2*HOUR, 1, HOUR, 1, '#456' );
    //jc.bar ( jc.now.getTime()/1000 - 3*HOUR, 2, HOUR, 1, '#789' );

    for ( var login in this.rows ) {

      var t = this.text ( 0, i*20 + this.y_offset, this.x_offset, 20, login + '&nbsp;', false );
      t.style.textAlign = 'right';
      t.style.fontSize = '12pt';
      t.style.padding = 0;

      var items = this.rows[login].items;

        for ( var j=0; j<items.length; j++ ) {

          var p = (items[j].start - this.morning.getTime()/1000) / this.seconds_per_day; // fraction for start
          var q = (items[j].stop - this.morning.getTime()/1000) / this.seconds_per_day; // fraction for stop
        
          var x = this.x_offset + (this.days-this.min-2) * this.width / this.days + p*this.width/this.days;
          var y = 20*i + this.y_offset;
          var w = Math.max ( (q-p)*this.width/this.days, 10.0 );
          var h = 20;

         this.bar(items[j].start,i,items[j].stop-items[j].start,1,"#234");

      }

      i += 1;

    }

  }

  JobChart.prototype.render = function() {
    while ( this.div.hasChildNodes()) {
      this.div.removeChild(this.div.lastChild);
    }  
    this.compute_sizes();
    this.render_background();
    this.render_rows();
  }

  JobChart.prototype.compute_dates = function () {

    this.now  = new Date();

    this.morning = new Date();
    this.morning.setHours(0);
    this.morning.setMinutes(0);

    this.tomorrow_morning = new Date();
    this.tomorrow_morning.setDate(this.now.getDate()+1);
    this.tomorrow_morning.setHours(0);
    this.tomorrow_morning.setMinutes(0);
    this.tomorrow_morning.setSeconds(0);

  }

  JobChart.prototype.timestamp_to_day = function (d) {

    now  = new Date();

    morning = new Date();
    morning.setHours(0);
    morning.setMinutes(0);

    tomorrow_morning = new Date();
    tomorrow_morning.setDate(now.getDate()+1);
    tomorrow_morning.setHours(0);
    tomorrow_morning.setMinutes(0);

  }

  JobChart.prototype.new_div = function(x,y,w,h,classname,scale) {

  if ( typeof scale === 'undefined' ) {

      // x and w are in minutes and need to be scaled and translated
      // to fit the viewer
      var X = this.width * ( 1 + ( x - this.cursor ) / ( this.zoom * HOUR ) ) + this.x_offset;
      var W = Math.max(2,this.width * w / ( this.zoom * HOUR ));

      // y and h are in number of rows
      var Y = this.y_offset + 20*y;
      var H = 20*h;

    } else {

      var X=x;
      var W=w;
      var Y=y;
      var H=h;

    }

    var b = document.createElement ( 'div' );
    b.className = classname;
    b.style.left = X + 'px'; 
    b.style.top = Y + 'px';
    b.style.width = Math.max(1,W) + 'px';
    b.style.height = H + 'px';
    return b;

  }

  JobChart.prototype.vertical_line = function(x,y,h,col) {
    return this.bar (x,y,1,h,col);
  }

  JobChart.prototype.bar = function(x,y,w,h,col) {

    var b = this.new_div(x,y,w,h,'bar');
    b.style.background = col;
    this.div.appendChild(b);
    return b;

  }

JobChart.prototype.text = function(x,y,w,h,str,scale) {

  var b = this.new_div(x,y,w,h,'text',scale);
    b.innerHTML = str;
    this.div.appendChild(b);
    return b;

  }

  JobChart.prototype.smalltext = function(x,y,w,h,str) {

    var b = this.new_div(x,y,w,h,'smalltext');
    b.innerHTML = str;
    b.style.color = "#555";
    this.div.appendChild(b);
    return b;

  }

  jc = new JobChart('activity');
  
  jc.timestamp_to_day();
  jc.add_item('klavins', { start: 1378485113, stop: 1378485832 } );

  <% 
  
  Job.all.each do |j| 

    start_entry = j.logs.reject { |l| l.entry_type != 'START' }
    stop_entry = j.logs.reject { |l| l.entry_type != 'STOP' }

    if start_entry.length > 0 
      j[:start] = start_entry.first.created_at.to_i
    else
      j[:start] = "0"
    end

    if stop_entry.length > 0 
      j[:stop] = stop_entry.first.created_at.to_i
    else
      j[:stop] = "0"
    end

  %>

  jc.add_item ( '<%= j[:user_id] %>', { job: <%= j[:id] %>, start: <%= j[:start] %>, stop: <%= j[:stop] %> } ); 

  <% end %>
  jc.render();

  window.onresize = function() {
    jc.render();
  }

</script>

<br />

<h2></h2>

<ul class='list'>
  <li><%= User.all.length %> users</li>
  <li><%= ObjectType.all.length %> object types</li>
  <li><%= Item.all.length %> items</li>
  <li><%= Primer.all.length %> primers</li>
  <li><%= Job.all.length %> jobs</li>
  <li><%= Log.all.length %> log entries</li>
  <li><%= Blob.all.length %> github sha tags cached</li>
</ul>
