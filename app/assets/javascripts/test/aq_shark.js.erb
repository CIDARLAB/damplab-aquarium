<% if Rails.env.development? %>

  class SharkTest {

    constructor() {
      this.its = [];
      this.subtests = {};
    }

  }

  class SharkTestAction {

    constructor(description, method) {
      this.description = description;
      this.method = method;
      this.results = [];
    }

    note(msg) {
      this.results.push(msg);
      return this;
    }    

    async() {
      return this.note("asynchronous");
    }

  }

  class Shark {

    constructor() {
      let shark = this;
      shark.test = new SharkTest();
      shark.current = shark.test;
    }

    run() {
      let shark = this;
      shark.current = shark.test;
      shark.run_aux(shark.current);
    }

    run_aux(test) {

      let shark = this;    

      test.its.forEach(it => {
        if ( it.method ) {  
          try {
            it.method(shark.make_done_doer(it));
            it.note("visited");
          } catch(e) {
            it.note("failed")
              .note(e);
            shark.show_error(it, e)
          }
        } else {
          it.note("unimplemented")
        }
      });

      for ( var test_name in test.subtests ) {
        shark.run_aux(test.subtests[test_name])
      }

    }

    make_done_doer(it) {
      let shark = this;
      return function(err) {
        if ( err ) {
          shark.show_error(it, err.stack)
          it.note('failed asynchronously')
            .note(err)
            .note(err.stack);
        } else {
          it.note("finished asynchronously");
        }
      }
    }

    show_error(it,e) {
      console.log("%cError: ", "color: red", it.description, e);
    }

  }

  shark = new Shark();

  function describe(test_name, method) {
    let temp = shark.current;
    shark.current.subtests[test_name] = new SharkTest();
    shark.current = shark.current.subtests[test_name];
    method();
    shark.current = temp;
  }

  function it(description, method) {
    let it = new SharkTestAction(description, method);
    shark.current.its.push(it);
    return it;
  }

<% end %>